:- assert_fact(lemma,n_reverse:types,@(all,[l1,l2],[=>,[succeeds,[n(n_reverse,2),$(l1),$(l2)]],[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]]])).
:- assert_fact(lemma,n_reverse:termination,@(all,[l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[terminates,[n(n_reverse,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,a_reverse:types:1,@(all,[l1,l2,l3],[=>,[succeeds,[n(a_reverse,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l1)]]])).
:- assert_fact(lemma,a_reverse:types:2,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(a_reverse,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l2)]]],[succeeds,[n(list,1),$(l3)]]])).
:- assert_fact(lemma,a_reverse:types:3,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(a_reverse,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[succeeds,[n(list,1),$(l2)]]])).
:- assert_fact(lemma,a_reverse:termination,@(all,[l1,l2,l3],[=>,[succeeds,[n(list,1),$(l1)]],[terminates,[n(a_reverse,3),$(l1),$(l2),$(l3)]]])).
:- assert_fact(lemma,n_reverse:existence,@(all,[l1],[=>,[succeeds,[n(list,1),$(l1)]],@(ex,[l2],[succeeds,[n(n_reverse,2),$(l1),$(l2)]])])).
:- assert_fact(lemma,n_reverse:uniqueness,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(n_reverse,2),$(l1),$(l2)]],[succeeds,[n(n_reverse,2),$(l1),$(l3)]]],[=,$(l2),$(l3)]])).
:- assert_fact(theorem,n_reverse:function,@(all,[l1],[=>,[succeeds,[n(list,1),$(l1)]],@(ex,[l2],[&,[succeeds,[n(n_reverse,2),$(l1),$(l2)]],@(all,[l3],[=>,[succeeds,[n(n_reverse,2),$(l1),$(l3)]],[=,$(l2),$(l3)]])])])).
:- assert_fact(lemma,n_reverse:ground,@(all,[l1,l2],[=>,[&,[succeeds,[n(n_reverse,2),$(l1),$(l2)]],[gr,$(l1)]],[gr,$(l2)]])).
:- assert_fun([f(rev,1),$(l1)],[succeeds,[n(list,1),$(l1)]],@(ex,[l2],[succeeds,[n(n_reverse,2),$(l1),$(l2)]])).
:- assert_fact(corollary,rev:nil,[=,[f(rev,1),[n([],0)]],[n([],0)]]).
:- assert_fact(corollary,rev:types,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],[succeeds,[n(list,1),[f(rev,1),$(l)]]]])).
:- assert_fact(corollary,rev:cons,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],[=,[f(rev,1),[n('.',2),$(x),$(l)]],[f(**,2),[f(rev,1),$(l)],[n('.',2),$(x),[n([],0)]]]]])).
:- assert_fact(lemma,a_reverse:n_reverse,@(all,[l1,l2,l3],[=>,[succeeds,[n(a_reverse,3),$(l1),$(l2),$(l3)]],[=,[f(**,2),[f(rev,1),$(l1)],$(l2)],$(l3)]])).
:- assert_fact(lemma,n_reverse:a_reverse,@(all,[l1,l2],[=>,[succeeds,[n(n_reverse,2),$(l1),$(l2)]],@(all,[l3],[succeeds,[n(a_reverse,3),$(l1),$(l3),[f(**,2),$(l2),$(l3)]]])])).
:- assert_fact(theorem,reverse:success,@(all,[l1,l2],[<=>,[succeeds,[n(reverse,2),$(l1),$(l2)]],[succeeds,[n(n_reverse,2),$(l1),$(l2)]]])).
:- assert_fact(corollary,reverse:termination,@(all,[l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[terminates,[n(reverse,2),$(l1),$(l2)]]])).
:- assert_fact(theorem,reverse:failure,@(all,[l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[<=>,[fails,[n(reverse,2),$(l1),$(l2)]],[fails,[n(n_reverse,2),$(l1),$(l2)]]]])).
:- assert_fact(corollary,rev:1,@(all,[x],[=,[f(rev,1),[n('.',2),$(x),[n([],0)]]],[n('.',2),$(x),[n([],0)]]])).
:- assert_fact(corollary,rev:2,@(all,[x,y],[=,[f(rev,1),[n('.',2),$(x),[n('.',2),$(y),[n([],0)]]]],[n('.',2),$(y),[n('.',2),$(x),[n([],0)]]]])).
:- assert_fact(corollary,rev:3,@(all,[x,y,z],[=,[f(rev,1),[n('.',2),$(x),[n('.',2),$(y),[n('.',2),$(z),[n([],0)]]]]],[n('.',2),$(z),[n('.',2),$(y),[n('.',2),$(x),[n([],0)]]]]])).
:- assert_fact(lemma,rev:app,@(all,[l,y],[=>,[succeeds,[n(list,1),$(l)]],[=,[f(rev,1),[f(**,2),$(l),[n('.',2),$(y),[n([],0)]]]],[n('.',2),$(y),[f(rev,1),$(l)]]]])).
:- assert_fact(theorem,rev:involution,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],[=,[f(rev,1),[f(rev,1),$(l)]],$(l)]])).
:- assert_fact(theorem,n_reverse:involution,@(all,[l1,l2],[=>,[succeeds,[n(n_reverse,2),$(l1),$(l2)]],[succeeds,[n(n_reverse,2),$(l2),$(l1)]]])).
:- assert_fact(theorem,rev:permutation,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],[succeeds,[n(permutation,2),$(l),[f(rev,1),$(l)]]]])).
