:- assert_fact(lemma,nat:non:negative:1,@(all,[x,y],[=>,[succeeds,[n(nat,1),$(x)]],[<>,$(x),[n(-,1),$(y)]]])).
:- assert_fact(lemma,nat:non:negative:2,@(all,[x],[=>,[succeeds,[n(nat,1),$(x)]],[fails,[n(negative,1),$(x)]]])).
:- assert_fact(lemma,int:gr,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[gr,$(z)]])).
:- assert_fact(lemma,int:termination,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[terminates,[n(int,1),$(z)]]])).
:- assert_fact(lemma,minus:types:1,@(all,[x,y,z],[=>,[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]],[succeeds,[n(minus,3),$(x),$(y),$(z)]]],[succeeds,[n(int,1),$(z)]]])).
:- assert_fact(lemma,minus:types:2,@(all,[x,y,z],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(minus,3),$(x),$(y),$(z)]]],[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]]]])).
:- assert_fact(lemma,minus:gr:1,@(all,[x,y,z],[=>,[&,[succeeds,[n(minus,3),$(x),$(y),$(z)]],[gr,$(x)],[gr,$(y)]],[gr,$(z)]])).
:- assert_fact(lemma,minus:gr:2,@(all,[x,y,z],[=>,[&,[succeeds,[n(minus,3),$(x),$(y),$(z)]],[gr,$(z)]],[&,[gr,$(x)],[gr,$(y)]]])).
:- assert_pred([d(add,3),$(z1),$(z2),$(z3)],@(ex,[x1,y1,x2,y2],[&,[succeeds,[n(minus,3),$(x1),$(y1),$(z1)]],[succeeds,[n(minus,3),$(x2),$(y2),$(z2)]],[succeeds,[n(minus,3),[f(@+,2),$(x1),$(x2)],[f(@+,2),$(y1),$(y2)],$(z3)]]])).
:- assert_fact(lemma,add:types,@(all,[z1,z2,z3],[=>,[&,[d(add,3),$(z1),$(z2),$(z3)],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[succeeds,[n(int,1),$(z3)]]])).
:- assert_fact(lemma,minus:existence:1,@(all,[x,y],[=>,[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]]],@(ex,[z],[succeeds,[n(minus,3),$(x),$(y),$(z)]])])).
:- assert_fact(lemma,minus:existence:2,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],@(ex,[x,y],[succeeds,[n(minus,3),$(x),$(y),$(z)]])])).
:- assert_fact(lemma,add:existence,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],@(ex,[z3],[d(add,3),$(z1),$(z2),$(z3)])])).
:- assert_fact(lemma,minus:equivalence:1,@(all,[x1,y1,x2,y2,z],[=>,[&,[succeeds,[n(minus,3),$(x1),$(y1),$(z)]],[succeeds,[n(minus,3),$(x2),$(y2),$(z)]],[succeeds,[n(int,1),$(z)]]],[=,[f(@+,2),$(x1),$(y2)],[f(@+,2),$(x2),$(y1)]]])).
:- assert_fact(lemma,minus:equivalence:2,@(all,[x1,y1,x2,y2,z1,z2],[=>,[&,[succeeds,[n(minus,3),$(x1),$(y1),$(z1)]],[succeeds,[n(minus,3),$(x2),$(y2),$(z2)]],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[=,[f(@+,2),$(x1),$(y2)],[f(@+,2),$(x2),$(y1)]]],[=,$(z1),$(z2)]])).
:- assert_fact(lemma,add:uniqueness,@(all,[z1,z2,z3,z4],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(add,3),$(z1),$(z2),$(z3)],[d(add,3),$(z1),$(z2),$(z4)]],[=,$(z3),$(z4)]])).
:- assert_fun([f(#+,2),$(z1),$(z2)],[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],@(ex,[z3],[d(add,3),$(z1),$(z2),$(z3)])).
:- assert_fact(corollary,add:types,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[succeeds,[n(int,1),[f(#+,2),$(z1),$(z2)]]]])).
:- assert_fact(lemma,add:characterization:1,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],@(ex,[x1,y1,x2,y2],[&,[succeeds,[n(minus,3),$(x1),$(y1),$(z1)]],[succeeds,[n(minus,3),$(x2),$(y2),$(z2)]],[succeeds,[n(minus,3),[f(@+,2),$(x1),$(x2)],[f(@+,2),$(y1),$(y2)],[f(#+,2),$(z1),$(z2)]]]])])).
:- assert_fact(lemma,add:characterization:2,@(all,[x1,x2,y1,y2,z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[succeeds,[n(minus,3),$(x1),$(y1),$(z1)]],[succeeds,[n(minus,3),$(x2),$(y2),$(z2)]]],[succeeds,[n(minus,3),[f(@+,2),$(x1),$(x2)],[f(@+,2),$(y1),$(y2)],[f(#+,2),$(z1),$(z2)]]]])).
:- assert_fact(lemma,minus:uniqueness,@(all,[x,y,z1,z2],[=>,[&,[succeeds,[n(minus,3),$(x),$(y),$(z1)]],[succeeds,[n(minus,3),$(x),$(y),$(z2)]],[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]]],[=,$(z1),$(z2)]])).
:- assert_fact(lemma,add:characterization:3,@(all,[x1,x2,y1,y2,z1,z2,z3],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[succeeds,[n(minus,3),$(x1),$(y1),$(z1)]],[succeeds,[n(minus,3),$(x2),$(y2),$(z2)]]],[=>,[succeeds,[n(minus,3),[f(@+,2),$(x1),$(x2)],[f(@+,2),$(y1),$(y2)],$(z3)]],[=,$(z3),[f(#+,2),$(z1),$(z2)]]]])).
:- assert_fact(theorem,add:commutative,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[=,[f(#+,2),$(z1),$(z2)],[f(#+,2),$(z2),$(z1)]]])).
:- assert_fact(lemma,minus:nat,@(all,[x],[=>,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(minus,3),$(x),[n(0,0)],$(x)]]])).
:- assert_fact(lemma,add:nat,@(all,[x,y],[=>,[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]]],[=,[f(@+,2),$(x),$(y)],[f(#+,2),$(x),$(y)]]])).
:- assert_fact(theorem,add:associative,@(all,[z1,z2,z3],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[succeeds,[n(int,1),$(z3)]]],[=,[f(#+,2),[f(#+,2),$(z1),$(z2)],$(z3)],[f(#+,2),$(z1),[f(#+,2),$(z2),$(z3)]]]])).
:- assert_fact(theorem,add:zero,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[=,[f(#+,2),$(z),[n(0,0)]],$(z)]])).
:- assert_fact(corollary,add:zero,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[=,[f(#+,2),[n(0,0)],$(z)],$(z)]])).
:- assert_fact(lemma,minus:2:types,@(all,[z1,z2],[=>,[&,[succeeds,[n(minus,2),$(z1),$(z2)]],[succeeds,[n(int,1),$(z1)]]],[succeeds,[n(int,1),$(z2)]]])).
:- assert_fact(lemma,minus:2:existence,@(all,[z1],[=>,[succeeds,[n(int,1),$(z1)]],@(ex,[z2],[succeeds,[n(minus,2),$(z1),$(z2)]])])).
:- assert_fact(lemma,minus:2:uniqueness,@(all,[z,z1,z2],[=>,[&,[succeeds,[n(minus,2),$(z),$(z1)]],[succeeds,[n(minus,2),$(z),$(z2)]]],[=,$(z1),$(z2)]])).
:- assert_fun([f(#-,1),$(z1)],[succeeds,[n(int,1),$(z1)]],@(ex,[z2],[succeeds,[n(minus,2),$(z1),$(z2)]])).
:- assert_fact(corollary,minus:types,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[succeeds,[n(int,1),[f(#-,1),$(z)]]]])).
:- assert_fact(lemma,minus:zero,[=,[f(#-,1),[n(0,0)]],[n(0,0)]]).
:- assert_fact(lemma,minus:transpose,@(all,[x,y,z],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(minus,3),$(x),$(y),$(z)]]],[succeeds,[n(minus,3),$(y),$(x),[f(#-,1),$(z)]]]])).
:- assert_fact(theorem,minus:inverse,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[=,[f(#+,2),$(z),[f(#-,1),$(z)]],[n(0,0)]]])).
:- assert_fact(corollary,minus:inverse,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[=,[f(#+,2),[f(#-,1),$(z)],$(z)],[n(0,0)]]])).
:- assert_fact(lemma,minus:zero:characterization,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[=,[f(#+,2),$(z1),$(z2)],[n(0,0)]]],[=,$(z2),[f(#-,1),$(z1)]]])).
:- assert_fact(lemma,minus:double,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[=,[f(#-,1),[f(#-,1),$(z)]],$(z)]])).
:- assert_fact(lemma,subtraction:existence,@(all,[z1,z2],@(ex,[z3],[=,[f(#+,2),$(z1),[f(#-,1),$(z2)]],$(z3)]))).
:- assert_fact(lemma,subtraction:uniqueness,@(all,[z1,z2,z3,z4],[=>,[&,[=,[f(#+,2),$(z1),[f(#-,1),$(z2)]],$(z3)],[=,[f(#+,2),$(z1),[f(#-,1),$(z2)]],$(z4)]],[=,$(z3),$(z4)]])).
:- assert_fun([f(#-,2),$(z1),$(z2)],[&],@(ex,[z3],[=,[f(#+,2),$(z1),[f(#-,1),$(z2)]],$(z3)])).
:- assert_fact(corollary,subtraction:add:minus,@(all,[z1,z2],[=,[f(#-,2),$(z1),$(z2)],[f(#+,2),$(z1),[f(#-,1),$(z2)]]])).
:- assert_fact(lemma,subtraction:types,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[succeeds,[n(int,1),[f(#-,2),$(z1),$(z2)]]]])).
:- assert_fact(lemma,minus:add,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[=,[f(#-,1),[f(#+,2),$(z1),$(z2)]],[f(#-,2),[f(#-,1),$(z1)],$(z2)]]])).
:- assert_fact(lemma,minus:subtraction,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[=,[f(#-,1),[f(#-,2),$(z1),$(z2)]],[f(#+,2),[f(#-,1),$(z1)],$(z2)]]])).
:- assert_pred([d(#<,2),$(z1),$(z2)],@(ex,[x1,y1,x2,y2],[&,[succeeds,[n(minus,3),$(x1),$(y1),$(z1)]],[succeeds,[n(minus,3),$(x2),$(y2),$(z2)]],[succeeds,[n(@<,2),[f(@+,2),$(x1),$(y2)],[f(@+,2),$(x2),$(y1)]]]])).
:- assert_fact(theorem,int:less:irreflexive,@(all,[z],[=>,[succeeds,[n(int,1),$(z)]],[~,[d(#<,2),$(z),$(z)]]])).
:- assert_fact(theorem,int:less:transitive,@(all,[z1,z2,z3],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[succeeds,[n(int,1),$(z3)]],[d(#<,2),$(z1),$(z2)],[d(#<,2),$(z2),$(z3)]],[d(#<,2),$(z1),$(z3)]])).
:- assert_fact(theorem,int:less:total,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[\/,[d(#<,2),$(z1),$(z2)],[=,$(z1),$(z2)],[d(#<,2),$(z2),$(z1)]]])).
:- assert_fact(theorem,less:add,@(all,[z,z1,z2],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#<,2),$(z1),$(z2)]],[d(#<,2),[f(#+,2),$(z),$(z1)],[f(#+,2),$(z),$(z2)]]])).
:- assert_fact(corollary,less:add,@(all,[z,z1,z2],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#<,2),$(z1),$(z2)]],[d(#<,2),[f(#+,2),$(z1),$(z)],[f(#+,2),$(z2),$(z)]]])).
:- assert_fact(corollary,less:minus,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#<,2),$(z1),$(z2)]],[d(#<,2),[f(#-,1),$(z2)],[f(#-,1),$(z1)]]])).
:- assert_fact(corollary,less:subtraction,@(all,[z,z1,z2],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#<,2),$(z1),$(z2)]],[d(#<,2),[f(#-,2),$(z),$(z2)],[f(#-,2),$(z),$(z1)]]])).
:- assert_fact(lemma,less:nat:int,@(all,[x,y],[=>,[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]],[succeeds,[n(@<,2),$(x),$(y)]]],[d(#<,2),$(x),$(y)]])).
:- assert_fact(lemma,less:int:nat,@(all,[x,y],[=>,[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]],[d(#<,2),$(x),$(y)]],[succeeds,[n(@<,2),$(x),$(y)]]])).
:- assert_pred([d(#=<,2),$(z1),$(z2)],[\/,[d(#<,2),$(z1),$(z2)],[=,$(z1),$(z2)]]).
:- assert_fact(lemma,int:less:leq,@(all,[z1,z2],[=>,[d(#<,2),$(z1),$(z2)],[d(#=<,2),$(z1),$(z2)]])).
:- assert_fact(lemma,int:leq:reflexive,@(all,[z],[d(#=<,2),$(z),$(z)])).
:- assert_fact(lemma,int:leq:transitive:1,@(all,[z1,z2,z3],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[succeeds,[n(int,1),$(z3)]],[d(#=<,2),$(z1),$(z2)],[d(#<,2),$(z2),$(z3)]],[d(#<,2),$(z1),$(z3)]])).
:- assert_fact(lemma,int:leq:transitive:2,@(all,[z1,z2,z3],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[succeeds,[n(int,1),$(z3)]],[d(#<,2),$(z1),$(z2)],[d(#=<,2),$(z2),$(z3)]],[d(#<,2),$(z1),$(z3)]])).
:- assert_fact(lemma,int:leq:transitive:3,@(all,[z1,z2,z3],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[succeeds,[n(int,1),$(z3)]],[d(#=<,2),$(z1),$(z2)],[d(#=<,2),$(z2),$(z3)]],[d(#=<,2),$(z1),$(z3)]])).
:- assert_fact(lemma,int:leq:anti:symmetric,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#=<,2),$(z1),$(z2)],[d(#=<,2),$(z2),$(z1)]],[=,$(z1),$(z2)]])).
:- assert_fact(lemma,int:total:1,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[\/,[d(#=<,2),$(z1),$(z2)],[d(#<,2),$(z2),$(z1)]]])).
:- assert_fact(lemma,int:total:2,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]]],[\/,[d(#=<,2),$(z1),$(z2)],[d(#=<,2),$(z2),$(z1)]]])).
:- assert_fact(lemma,int:leq:add,@(all,[z,z1,z2],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#=<,2),$(z1),$(z2)]],[d(#=<,2),[f(#+,2),$(z),$(z1)],[f(#+,2),$(z),$(z2)]]])).
:- assert_fact(corollary,int:leq:add,@(all,[z,z1,z2],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#=<,2),$(z1),$(z2)]],[d(#=<,2),[f(#+,2),$(z1),$(z)],[f(#+,2),$(z2),$(z)]]])).
:- assert_fact(lemma,int:leq:minus,@(all,[z1,z2],[=>,[&,[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#=<,2),$(z1),$(z2)]],[d(#=<,2),[f(#-,1),$(z2)],[f(#-,1),$(z1)]]])).
:- assert_fact(lemma,int:leq:subtraction,@(all,[z,z1,z2],[=>,[&,[succeeds,[n(int,1),$(z)]],[succeeds,[n(int,1),$(z1)]],[succeeds,[n(int,1),$(z2)]],[d(#=<,2),$(z1),$(z2)]],[d(#=<,2),[f(#-,2),$(z),$(z2)],[f(#-,2),$(z),$(z1)]]])).
:- assert_fact(corollary,leq:nat:int,@(all,[x,y],[=>,[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]],[succeeds,[n(@=<,2),$(x),$(y)]]],[d(#=<,2),$(x),$(y)]])).
:- assert_fact(lemma,leq:int:nat,@(all,[x,y],[=>,[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat,1),$(y)]],[d(#=<,2),$(x),$(y)]],[succeeds,[n(@=<,2),$(x),$(y)]]])).
:- assert_fact(lemma,nat:zero:leq,@(all,[x],[=>,[succeeds,[n(nat,1),$(x)]],[d(#=<,2),[n(0,0)],$(x)]])).
:- assert_fact(lemma,int:zero:leq:nat,@(all,[z],[=>,[&,[succeeds,[n(int,1),$(z)]],[d(#=<,2),[n(0,0)],$(z)]],[succeeds,[n(nat,1),$(z)]]])).
