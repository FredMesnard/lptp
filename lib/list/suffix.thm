:- assert_fact(lemma,prefix:types,abst(forall,[l1,l2],[=>,[succeeds,[n(prefix,2),var(l1),var(l2)]],[succeeds,[n(list,1),var(l1)]]])).
:- assert_fact(lemma,prefix:termination:1,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l1)]],[terminates,[n(prefix,2),var(l1),var(l2)]]])).
:- assert_fact(lemma,prefix:termination:2,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l2)]],[terminates,[n(prefix,2),var(l1),var(l2)]]])).
:- assert_fact(lemma,prefix:append,abst(forall,[l1,l3],[=>,[succeeds,[n(prefix,2),var(l1),var(l3)]],abst(exists,[l2],[succeeds,[n(append,3),var(l1),var(l2),var(l3)]])])).
:- assert_fact(lemma,prefix:existence,abst(forall,[l1,l3],[=>,[succeeds,[n(prefix,2),var(l1),var(l3)]],abst(exists,[l2],[succeeds,[n(append,3),var(l1),var(l2),var(l3)]])])).
:- assert_fact(lemma,prefix:ground,abst(forall,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),var(l1),var(l2),var(l3)]],[gr,var(l3)]],[gr,var(l2)]])).
:- assert_fun([f(suf,2),var(l1),var(l3)],[succeeds,[n(prefix,2),var(l1),var(l3)]],abst(exists,[l2],[succeeds,[n(append,3),var(l1),var(l2),var(l3)]])).
:- assert_fact(corollary,suf:app,abst(forall,[l1,l2],[=>,[succeeds,[n(prefix,2),var(l1),var(l2)]],[=,[f(**,2),var(l1),[f(suf,2),var(l1),var(l2)]],var(l2)]])).
:- assert_fact(corollary,suf:types,abst(forall,[l1,l2],[=>,[&,[succeeds,[n(prefix,2),var(l1),var(l2)]],[succeeds,[n(list,1),var(l2)]]],[succeeds,[n(list,1),[f(suf,2),var(l1),var(l2)]]]])).
:- assert_fact(lemma,suffix:types,abst(forall,[l1,l2],[=>,[&,[succeeds,[n(suffix,2),var(l1),var(l2)]],[succeeds,[n(list,1),var(l2)]]],[succeeds,[n(list,1),var(l1)]]])).
:- assert_fact(lemma,suffix:termination,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l2)]],[terminates,[n(suffix,2),var(l1),var(l2)]]])).
:- assert_fact(lemma,suffix:append,abst(forall,[l2,l3],[=>,[succeeds,[n(suffix,2),var(l2),var(l3)]],abst(exists,[l1],[succeeds,[n(append,3),var(l1),var(l2),var(l3)]])])).
:- assert_fact(theorem,suffix:function,abst(forall,[l2,l3],[=>,[&,[succeeds,[n(suffix,2),var(l2),var(l3)]],[succeeds,[n(list,1),var(l3)]]],abst(exists,[l1],[&,[succeeds,[n(append,3),var(l1),var(l2),var(l3)]],abst(forall,[l4],[=>,[succeeds,[n(append,3),var(l4),var(l2),var(l3)]],[=,var(l1),var(l4)]])])])).
:- assert_fact(lemma,suffix:ground,abst(forall,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),var(l1),var(l2),var(l3)]],[gr,var(l3)]],[gr,var(l1)]])).
:- assert_fun([f(pre,2),var(l2),var(l3)],[&,[succeeds,[n(suffix,2),var(l2),var(l3)]],[succeeds,[n(list,1),var(l3)]]],abst(exists,[l1],[succeeds,[n(append,3),var(l1),var(l2),var(l3)]])).
:- assert_fact(corollary,pre:types,abst(forall,[l1,l2],[=>,[&,[succeeds,[n(suffix,2),var(l1),var(l2)]],[succeeds,[n(list,1),var(l2)]]],[succeeds,[n(list,1),[f(pre,2),var(l1),var(l2)]]]])).
:- assert_fact(corollary,pre:app,abst(forall,[l1,l2],[=>,[&,[succeeds,[n(suffix,2),var(l1),var(l2)]],[succeeds,[n(list,1),var(l2)]]],[=,[f(**,2),[f(pre,2),var(l1),var(l2)],var(l1)],var(l2)]])).
:- assert_fact(corollary,pre:app:uniqueness,abst(forall,[l1,l2,l3],[=>,[&,[succeeds,[n(suffix,2),var(l2),var(l3)]],[succeeds,[n(list,1),var(l1)]],[succeeds,[n(list,1),var(l3)]],[=,[f(**,2),var(l1),var(l2)],var(l3)]],[=,[f(pre,2),var(l2),var(l3)],var(l1)]])).
:- assert_fact(corollary,pre:nil,abst(forall,[l],[=>,[succeeds,[n(list,1),var(l)]],[=,[f(pre,2),var(l),var(l)],[n([],0)]]])).
:- assert_fact(lemma,suffix:transitive,abst(forall,[l1,l2,l3],[=>,[&,[succeeds,[n(suffix,2),var(l2),var(l3)]],[succeeds,[n(suffix,2),var(l1),var(l2)]]],[succeeds,[n(suffix,2),var(l1),var(l3)]]])).
:- assert_fact(lemma,append:prefix:suffix,abst(forall,[l1,l2,l3],[=>,[succeeds,[n(append,3),var(l1),var(l2),var(l3)]],[&,[succeeds,[n(prefix,2),var(l1),var(l3)]],[succeeds,[n(suffix,2),var(l2),var(l3)]]]])).
:- assert_fact(corollary,append:prefix,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l1)]],[succeeds,[n(prefix,2),var(l1),[f(**,2),var(l1),var(l2)]]]])).
:- assert_fact(corollary,append:suffix,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l1)]],[succeeds,[n(suffix,2),var(l2),[f(**,2),var(l1),var(l2)]]]])).
:- assert_fact(lemma,sublist1:types,abst(forall,[l1,l2],[=>,[succeeds,[n(sublist1,2),var(l1),var(l2)]],[succeeds,[n(list,1),var(l1)]]])).
:- assert_fact(lemma,sublist1:termination,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l2)]],[terminates,[n(sublist1,2),var(l1),var(l2)]]])).
:- assert_fact(lemma,sublist1:append,abst(forall,[l2,l4],[=>,[succeeds,[n(sublist1,2),var(l2),var(l4)]],abst(exists,[l1,l3],[&,[succeeds,[n(list,1),var(l1)]],[=,[f(**,2),[f(**,2),var(l1),var(l2)],var(l3)],var(l4)]])])).
:- assert_fact(lemma,append:sublist1,abst(forall,[l1,l2,l3,l4],[=>,[&,[succeeds,[n(list,1),var(l1)]],[succeeds,[n(list,1),var(l2)]],[=,[f(**,2),[f(**,2),var(l1),var(l2)],var(l3)],var(l4)]],[succeeds,[n(sublist1,2),var(l2),var(l4)]]])).
:- assert_fact(lemma,sublist2:types,abst(forall,[l1,l2],[=>,[succeeds,[n(sublist2,2),var(l1),var(l2)]],[succeeds,[n(list,1),var(l1)]]])).
:- assert_fact(lemma,sublist2:termination,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l2)]],[terminates,[n(sublist2,2),var(l1),var(l2)]]])).
:- assert_fact(lemma,sublist2:append,abst(forall,[l2,l4],[=>,[succeeds,[n(sublist2,2),var(l2),var(l4)]],abst(exists,[l1,l3],[&,[succeeds,[n(list,1),var(l1)]],[=,[f(**,2),[f(**,2),var(l1),var(l2)],var(l3)],var(l4)]])])).
:- assert_fact(lemma,append:sublist2,abst(forall,[l1,l2,l3,l4],[=>,[&,[succeeds,[n(list,1),var(l1)]],[succeeds,[n(list,1),var(l2)]],[=,[f(**,2),[f(**,2),var(l1),var(l2)],var(l3)],var(l4)]],[succeeds,[n(sublist2,2),var(l2),var(l4)]]])).
:- assert_fact(theorem,sublist:success,abst(forall,[l1,l2],[<=>,[succeeds,[n(sublist1,2),var(l1),var(l2)]],[succeeds,[n(sublist2,2),var(l1),var(l2)]]])).
:- assert_fact(theorem,sublist:failure,abst(forall,[l1,l2],[=>,[succeeds,[n(list,1),var(l2)]],[<=>,[fails,[n(sublist1,2),var(l1),var(l2)]],[fails,[n(sublist2,2),var(l1),var(l2)]]]])).
