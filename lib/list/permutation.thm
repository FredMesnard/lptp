:- assert_fact(lemma,permutation:types,@(all,[l1,l2],[=>,[succeeds,[n(permutation,2),$(l1),$(l2)]],[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]]])).
:- assert_fact(lemma,permutation:termination,@(all,[n,l1,l2],[=>,[&,[succeeds,[n(nat,1),$(n)]],[succeeds,[n(list,1),$(l1)]],[=,[f(lh,1),$(l1)],$(n)]],[terminates,[n(permutation,2),$(l1),$(l2)]]])).
:- assert_fact(theorem,permutation:termination,@(all,[l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[terminates,[n(permutation,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,member2:termination,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[terminates,[n(member2,3),$(x),$(l1),$(l2)]]])).
:- assert_fact(lemma,occ:termination,@(all,[x,l,n],[=>,[&,[succeeds,[n(list,1),$(l)]],[gr,$(l)],[gr,$(x)]],[terminates,[n(occ,3),$(x),$(l),$(n)]]])).
:- assert_fact(lemma,member2:ground,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(member2,3),$(x),$(l1),$(l2)]],[gr,$(l1)],[gr,$(l2)]],[gr,$(x)]])).
:- assert_fact(lemma,occ:ground,@(all,[x,l,n],[=>,[succeeds,[n(occ,3),$(x),$(l),$(n)]],[gr,$(n)]])).
:- assert_fact(lemma,not_same_occ:termination,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]],[gr,$(l1)],[gr,$(l2)]],[terminates,[n(not_same_occ,2),$(l1),$(l2)]]])).
:- assert_fact(theorem,same_occ:termination,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]],[gr,$(l1)],[gr,$(l2)]],[terminates,[n(same_occ,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,occ:types,@(all,[x,l,n],[=>,[succeeds,[n(occ,3),$(x),$(l),$(n)]],[&,[succeeds,[n(list,1),$(l)]],[succeeds,[n(nat,1),$(n)]]]])).
:- assert_fact(lemma,occ:existence,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],@(ex,[n],[succeeds,[n(occ,3),$(x),$(l),$(n)]])])).
:- assert_fact(lemma,occ:uniqueness,@(all,[x,l,m,n],[=>,[&,[succeeds,[n(occ,3),$(x),$(l),$(m)]],[succeeds,[n(occ,3),$(x),$(l),$(n)]]],[=,$(m),$(n)]])).
:- assert_fun([f(occ,2),$(x),$(l)],[succeeds,[n(list,1),$(l)]],@(ex,[m],[succeeds,[n(occ,3),$(x),$(l),$(m)]])).
:- assert_fact(lemma,occ:nil,@(all,[x],[=,[f(occ,2),$(x),[n([],0)]],[n(0,0)]])).
:- assert_fact(lemma,occ:cons:diff,@(all,[x,y,l],[=>,[&,[succeeds,[n(list,1),$(l)]],[<>,$(x),$(y)]],[=,[f(occ,2),$(x),[n('.',2),$(y),$(l)]],[f(occ,2),$(x),$(l)]]])).
:- assert_fact(lemma,occ:cons:eq,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],[=,[f(occ,2),$(x),[n('.',2),$(x),$(l)]],[n(s,1),[f(occ,2),$(x),$(l)]]]])).
:- assert_fact(corollary,occ:types,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],[succeeds,[n(nat,1),[f(occ,2),$(x),$(l)]]]])).
:- assert_fact(lemma,occ:app,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[=,[f(occ,2),$(x),[f(**,2),$(l1),$(l2)]],[f(@+,2),[f(occ,2),$(x),$(l1)],[f(occ,2),$(x),$(l2)]]]])).
:- assert_fact(lemma,delete:occ:diff,@(all,[x,y,l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[<>,$(x),$(y)]],[=,[f(occ,2),$(y),$(l1)],[f(occ,2),$(y),$(l2)]]])).
:- assert_fact(lemma,delete:occ:eq,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(delete,3),$(x),$(l1),$(l2)]]],[=,[f(occ,2),$(x),$(l1)],[n(s,1),[f(occ,2),$(x),$(l2)]]]])).
:- assert_fact(theorem,permutation:occ,@(all,[l1,l2],[=>,[succeeds,[n(permutation,2),$(l1),$(l2)]],@(all,[x],[=,[f(occ,2),$(x),$(l1)],[f(occ,2),$(x),$(l2)]])])).
:- assert_fact(theorem,permutation:soundness,@(all,[l1,l2],[=>,[&,[succeeds,[n(permutation,2),$(l1),$(l2)]],[gr,$(l1)],[gr,$(l2)]],[succeeds,[n(same_occ,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,occ:zero,@(all,[l],[=>,[&,[succeeds,[n(list,1),$(l)]],@(all,[x],[=,[f(occ,2),$(x),$(l)],[n(0,0)]])],[=,$(l),[n([],0)]]])).
:- assert_fact(lemma,occ:successor,@(all,[x,l1,n],[=>,[&,[succeeds,[n(list,1),$(l1)]],[=,[f(occ,2),$(x),$(l1)],[n(s,1),$(n)]]],@(ex,[l2],[succeeds,[n(delete,3),$(x),$(l1),$(l2)]])])).
:- assert_fact(lemma,permutation:completeness,@(all,[l2],[=>,[succeeds,[n(list,1),$(l2)]],@(all,[l1],[=>,[&,[succeeds,[n(list,1),$(l1)]],@(all,[x],[=,[f(occ,2),$(x),$(l1)],[f(occ,2),$(x),$(l2)]])],[succeeds,[n(permutation,2),$(l1),$(l2)]]])])).
:- assert_fact(theorem,occ:permutation,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l2)]],[succeeds,[n(list,1),$(l1)]],@(all,[x],[=,[f(occ,2),$(x),$(l1)],[f(occ,2),$(x),$(l2)]])],[succeeds,[n(permutation,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,occ:member,@(all,[x,l],[=>,[&,[succeeds,[n(list,1),$(l)]],[fails,[n(member,2),$(x),$(l)]]],[=,[f(occ,2),$(x),$(l)],[n(0,0)]]])).
:- assert_fact(lemma,same_occ:success,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]],[succeeds,[n(same_occ,2),$(l1),$(l2)]]],@(all,[x],[=,[f(occ,2),$(x),$(l1)],[f(occ,2),$(x),$(l2)]])])).
:- assert_fact(theorem,permutation:completeness,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]],[succeeds,[n(same_occ,2),$(l1),$(l2)]]],[succeeds,[n(permutation,2),$(l1),$(l2)]]])).
:- assert_fact(theorem,permutation:reflexive,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],[succeeds,[n(permutation,2),$(l),$(l)]]])).
:- assert_fact(theorem,permutation:symmetric,@(all,[l1,l2],[=>,[succeeds,[n(permutation,2),$(l1),$(l2)]],[succeeds,[n(permutation,2),$(l2),$(l1)]]])).
:- assert_fact(theorem,permutation:transitive,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(permutation,2),$(l1),$(l2)]],[succeeds,[n(permutation,2),$(l2),$(l3)]]],[succeeds,[n(permutation,2),$(l1),$(l3)]]])).
:- assert_fact(theorem,permutation:app,@(all,[l1,l2,l3,l4],[=>,[&,[succeeds,[n(permutation,2),$(l1),$(l3)]],[succeeds,[n(permutation,2),$(l2),$(l4)]]],[succeeds,[n(permutation,2),[f(**,2),$(l1),$(l2)],[f(**,2),$(l3),$(l4)]]]])).
:- assert_fact(theorem,permutation:app:commutative,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[succeeds,[n(permutation,2),[f(**,2),$(l1),$(l2)],[f(**,2),$(l2),$(l1)]]]])).
:- assert_fact(lemma,permutation:nat_list,@(all,[l1,l2],[=>,[&,[succeeds,[n(permutation,2),$(l1),$(l2)]],[succeeds,[n(nat_list,1),$(l1)]]],[succeeds,[n(nat_list,1),$(l2)]]])).
:- assert_fact(lemma,occ:member:success,@(all,[x,l,n],[=>,[&,[succeeds,[n(list,1),$(l)]],[succeeds,[n(occ,3),$(x),$(l),[n(s,1),$(n)]]]],[succeeds,[n(member,2),$(x),$(l)]]])).
:- assert_fact(corollary,occ:member:success,@(all,[x,l,n],[=>,[&,[succeeds,[n(list,1),$(l)]],[=,[f(occ,2),$(x),$(l)],[n(s,1),$(n)]]],[succeeds,[n(member,2),$(x),$(l)]]])).
:- assert_fact(lemma,member:occ:success,@(all,[x,l],[=>,[&,[succeeds,[n(list,1),$(l)]],[succeeds,[n(member,2),$(x),$(l)]]],@(ex,[n],[=,[f(occ,2),$(x),$(l)],[n(s,1),$(n)]])])).
:- assert_fact(theorem,permutation:member,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(permutation,2),$(l1),$(l2)]],[succeeds,[n(member,2),$(x),$(l1)]]],[succeeds,[n(member,2),$(x),$(l2)]]])).
:- assert_fact(theorem,permutation:cons,@(all,[x,l1,l2],[=>,[succeeds,[n(permutation,2),[n('.',2),$(x),$(l1)],[n('.',2),$(x),$(l2)]]],[succeeds,[n(permutation,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,permutation:nil,@(all,[l],[=>,[succeeds,[n(permutation,2),[n([],0)],$(l)]],[=,$(l),[n([],0)]]])).
:- assert_fact(lemma,permutation:ground,@(all,[l1,l2],[=>,[&,[succeeds,[n(permutation,2),$(l1),$(l2)]],[gr,$(l1)]],[gr,$(l2)]])).
:- assert_fact(lemma,permutation:length,@(all,[l1,l2],[=>,[succeeds,[n(permutation,2),$(l1),$(l2)]],[=,[f(lh,1),$(l1)],[f(lh,1),$(l2)]]])).
