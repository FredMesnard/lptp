:- assert_fact(lemma,list:1,@(all,[x],[succeeds,[n(list,1),[n('.',2),$(x),[n([],0)]]]])).
:- assert_fact(lemma,list:2,@(all,[x,y],[succeeds,[n(list,1),[n('.',2),$(x),[n('.',2),$(y),[n([],0)]]]]])).
:- assert_fact(lemma,list:3,@(all,[x,y,z],[succeeds,[n(list,1),[n('.',2),$(x),[n('.',2),$(y),[n('.',2),$(z),[n([],0)]]]]]])).
:- assert_fact(lemma,list:cons,@(all,[x,l],[=>,[succeeds,[n(list,1),[n('.',2),$(x),$(l)]]],[succeeds,[n(list,1),$(l)]]])).
:- assert_fact(lemma,list:termination,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],[terminates,[n(list,1),$(l)]]])).
:- assert_fact(lemma,member:termination,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],[terminates,[n(member,2),$(x),$(l)]]])).
:- assert_fact(corollary,member:termination,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],[\/,[succeeds,[n(member,2),$(x),$(l)]],[fails,[n(member,2),$(x),$(l)]]]])).
:- assert_fact(lemma,member:ground,@(all,[x,l],[=>,[&,[succeeds,[n(member,2),$(x),$(l)]],[gr,$(l)]],[gr,$(x)]])).
:- assert_fact(lemma,member:cons,@(all,[x,y,z,l],[=>,[&,[succeeds,[n(member,2),$(x),[n('.',2),$(y),$(l)]]],[<>,$(x),$(y)]],[succeeds,[n(member,2),$(x),$(l)]]])).
:- assert_fact(lemma,append:types:1,@(all,[l1,l2,l3],[=>,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l1)]]])).
:- assert_fact(lemma,append:types:2,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l2)]]],[succeeds,[n(list,1),$(l3)]]])).
:- assert_fact(lemma,append:types:3,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[succeeds,[n(list,1),$(l2)]]])).
:- assert_fact(lemma,append:types:4,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]]])).
:- assert_fact(lemma,append:termination:1,@(all,[l1,l2,l3],[=>,[succeeds,[n(list,1),$(l1)]],[terminates,[n(append,3),$(l1),$(l2),$(l3)]]])).
:- assert_fact(lemma,append:termination:2,@(all,[l1,l2,l3],[=>,[succeeds,[n(list,1),$(l3)]],[terminates,[n(append,3),$(l1),$(l2),$(l3)]]])).
:- assert_fact(lemma,append:ground:1,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[gr,$(l1)],[gr,$(l2)]],[gr,$(l3)]])).
:- assert_fact(lemma,append:ground:2,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[gr,$(l3)]],[&,[gr,$(l1)],[gr,$(l2)]]])).
:- assert_fact(lemma,append:existence,@(all,[l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],@(ex,[l3],[succeeds,[n(append,3),$(l1),$(l2),$(l3)]])])).
:- assert_fact(lemma,append:uniqueness,@(all,[l1,l2,l3,l4],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(append,3),$(l1),$(l2),$(l4)]]],[=,$(l3),$(l4)]])).
:- assert_fun([f(**,2),$(l1),$(l2)],[succeeds,[n(list,1),$(l1)]],@(ex,[l3],[succeeds,[n(append,3),$(l1),$(l2),$(l3)]])).
:- assert_fact(corollary,app:nil,@(all,[l],[=,[f(**,2),[n([],0)],$(l)],$(l)])).
:- assert_fact(corollary,app:cons,@(all,[x,l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[=,[f(**,2),[n('.',2),$(x),$(l1)],$(l2)],[n('.',2),$(x),[f(**,2),$(l1),$(l2)]]]])).
:- assert_fact(corollary,app:types:1,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[succeeds,[n(list,1),[f(**,2),$(l1),$(l2)]]]])).
:- assert_fact(corollary,app:types:2,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),[f(**,2),$(l1),$(l2)]]]],[succeeds,[n(list,1),$(l2)]]])).
:- assert_fact(corollary,app:ground:1,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[gr,$(l1)],[gr,$(l2)]],[gr,[f(**,2),$(l1),$(l2)]]])).
:- assert_fact(corollary,app:ground:2,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[gr,[f(**,2),$(l1),$(l2)]]],[&,[gr,$(l1)],[gr,$(l2)]]])).
:- assert_fact(theorem,app:associative,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[=,[f(**,2),[f(**,2),$(l1),$(l2)],$(l3)],[f(**,2),$(l1),[f(**,2),$(l2),$(l3)]]]])).
:- assert_fact(lemma,app:nil,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],[=,[f(**,2),$(l),[n([],0)]],$(l)]])).
:- assert_fact(lemma,length:types,@(all,[l,n],[=>,[succeeds,[n(length,2),$(l),$(n)]],[&,[succeeds,[n(list,1),$(l)]],[succeeds,[n(nat,1),$(n)]]]])).
:- assert_fact(lemma,length:termination,@(all,[l,n],[=>,[succeeds,[n(list,1),$(l)]],[terminates,[n(length,2),$(l),$(n)]]])).
:- assert_fact(lemma,length:ground,@(all,[l,n],[=>,[succeeds,[n(length,2),$(l),$(n)]],[gr,$(n)]])).
:- assert_fact(lemma,length:existence,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],@(ex,[n],[succeeds,[n(length,2),$(l),$(n)]])])).
:- assert_fact(lemma,length:uniqueness,@(all,[l,m,n],[=>,[&,[succeeds,[n(length,2),$(l),$(m)]],[succeeds,[n(length,2),$(l),$(n)]]],[=,$(m),$(n)]])).
:- assert_fun([f(lh,1),$(l)],[succeeds,[n(list,1),$(l)]],@(ex,[n],[succeeds,[n(length,2),$(l),$(n)]])).
:- assert_fact(corollary,lh:nil,[=,[f(lh,1),[n([],0)]],[n(0,0)]]).
:- assert_fact(corollary,lh:cons,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],[=,[f(lh,1),[n('.',2),$(x),$(l)]],[n(s,1),[f(lh,1),$(l)]]]])).
:- assert_fact(corollary,lh:types,@(all,[l],[=>,[succeeds,[n(list,1),$(l)]],[succeeds,[n(nat,1),[f(lh,1),$(l)]]]])).
:- assert_fact(corollary,lh:zero,@(all,[l],[=>,[&,[succeeds,[n(list,1),$(l)]],[=,[f(lh,1),$(l)],[n(0,0)]]],[=,$(l),[n([],0)]]])).
:- assert_fact(corollary,lh:successor,@(all,[n,l1],[=>,[&,[succeeds,[n(list,1),$(l1)]],[=,[f(lh,1),$(l1)],[n(s,1),$(n)]]],@(ex,[x,l2],[=,$(l1),[n('.',2),$(x),$(l2)]])])).
:- assert_fact(theorem,app:lh,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[=,[f(lh,1),[f(**,2),$(l1),$(l2)]],[f(@+,2),[f(lh,1),$(l1)],[f(lh,1),$(l2)]]]])).
:- assert_fact(corollary,app:lh:leq:first,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[succeeds,[n(@=<,2),[f(lh,1),$(l1)],[f(lh,1),[f(**,2),$(l1),$(l2)]]]]])).
:- assert_fact(corollary,app:lh:leq:second,@(all,[l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]]],[succeeds,[n(@=<,2),[f(lh,1),$(l2)],[f(lh,1),[f(**,2),$(l1),$(l2)]]]]])).
:- assert_fact(corollary,lh:cons:leq,@(all,[x,l],[=>,[succeeds,[n(list,1),$(l)]],[succeeds,[n(@=<,2),[f(lh,1),$(l)],[f(lh,1),[n('.',2),$(x),$(l)]]]]])).
:- assert_fact(corollary,append:lh,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[=,[f(@+,2),[f(lh,1),$(l1)],[f(lh,1),$(l2)]],[f(lh,1),$(l3)]]])).
:- assert_fact(corollary,append:lh:leq:first,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[succeeds,[n(@=<,2),[f(lh,1),$(l1)],[f(lh,1),$(l3)]]]])).
:- assert_fact(corollary,append:lh:leq:second,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[succeeds,[n(@=<,2),[f(lh,1),$(l2)],[f(lh,1),$(l3)]]]])).
:- assert_pred([d(sub,2),$(l1),$(l2)],@(all,[x],[=>,[succeeds,[n(member,2),$(x),$(l1)]],[succeeds,[n(member,2),$(x),$(l2)]]])).
:- assert_fact(lemma,sub:cons,@(all,[x,i],[d(sub,2),$(i),[n('.',2),$(x),$(i)]])).
:- assert_fact(lemma,sub:reflexive,@(all,[l],[d(sub,2),$(l),$(l)])).
:- assert_fact(lemma,sub:transitive,@(all,[i,j,k],[=>,[&,[d(sub,2),$(i),$(j)],[d(sub,2),$(j),$(k)]],[d(sub,2),$(i),$(k)]])).
:- assert_fact(lemma,sub:nil,@(all,[l],[d(sub,2),[n([],0)],$(l)])).
:- assert_fact(lemma,sub:member,@(all,[x,i,j],[=>,[&,[d(sub,2),$(i),$(j)],[succeeds,[n(member,2),$(x),$(j)]]],[d(sub,2),[n('.',2),$(x),$(i)],$(j)]])).
:- assert_fact(lemma,sub:cons:both,@(all,[x,i,j],[=>,[d(sub,2),$(i),$(j)],[d(sub,2),[n('.',2),$(x),$(i)],[n('.',2),$(x),$(j)]]])).
:- assert_fact(lemma,member:append,@(all,[x,l3],[=>,[succeeds,[n(member,2),$(x),$(l3)]],@(ex,[l1,l2],[succeeds,[n(append,3),$(l1),[n('.',2),$(x),$(l2)],$(l3)]])])).
:- assert_fact(lemma,append:member:1,@(all,[x,l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(member,2),$(x),$(l1)]]],[succeeds,[n(member,2),$(x),$(l3)]]])).
:- assert_fact(lemma,append:member:2,@(all,[x,l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(member,2),$(x),$(l2)]]],[succeeds,[n(member,2),$(x),$(l3)]]])).
:- assert_fact(corollary,app:member:1,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(member,2),$(x),$(l1)]],[succeeds,[n(list,1),$(l1)]]],[succeeds,[n(member,2),$(x),[f(**,2),$(l1),$(l2)]]]])).
:- assert_fact(corollary,app:member:2,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(member,2),$(x),$(l2)]],[succeeds,[n(list,1),$(l1)]]],[succeeds,[n(member,2),$(x),[f(**,2),$(l1),$(l2)]]]])).
:- assert_fact(corollary,append:member,@(all,[x,l1,l2,l3],[=>,[succeeds,[n(append,3),$(l1),[n('.',2),$(x),$(l2)],$(l3)]],[succeeds,[n(member,2),$(x),$(l3)]]])).
:- assert_fact(lemma,append:member:3,@(all,[x,l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(member,2),$(x),$(l3)]]],[\/,[succeeds,[n(member,2),$(x),$(l1)]],[succeeds,[n(member,2),$(x),$(l2)]]]])).
:- assert_fact(corollary,app:member:3,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(member,2),$(x),[f(**,2),$(l1),$(l2)]]]],[\/,[succeeds,[n(member,2),$(x),$(l1)]],[succeeds,[n(member,2),$(x),$(l2)]]]])).
:- assert_fact(lemma,sub:app:1,@(all,[l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[d(sub,2),$(l1),[f(**,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,sub:app:2,@(all,[l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[d(sub,2),$(l2),[f(**,2),$(l1),$(l2)]]])).
:- assert_fact(lemma,append:cons:different,@(all,[x,l1,l2,l3],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[<>,$(l2),[n('.',2),$(x),$(l3)]]])).
:- assert_fact(lemma,append:equal:nil,@(all,[l1,l2],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l2)]],[succeeds,[n(list,1),$(l2)]]],[=,$(l1),[n([],0)]]])).
:- assert_fact(lemma,append:uniqueness:1,@(all,[l1,l2,l3,l4],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(append,3),$(l4),$(l2),$(l3)]],[succeeds,[n(list,1),$(l3)]]],[=,$(l1),$(l4)]])).
:- assert_fact(corollary,app:uniqueness:1,@(all,[l1,l2,l3],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]],[succeeds,[n(list,1),$(l3)]],[=,[f(**,2),$(l1),$(l3)],[f(**,2),$(l2),$(l3)]]],[=,$(l1),$(l2)]])).
:- assert_fact(lemma,append:uniqueness:2,@(all,[l1,l2,l3,l4],[=>,[&,[succeeds,[n(append,3),$(l1),$(l2),$(l3)]],[succeeds,[n(append,3),$(l1),$(l4),$(l3)]]],[=,$(l2),$(l4)]])).
:- assert_fact(lemma,nat_list:list,@(all,[l],[=>,[succeeds,[n(nat_list,1),$(l)]],[succeeds,[n(list,1),$(l)]]])).
:- assert_fact(lemma,nat_list:termination,@(all,[l],[=>,[succeeds,[n(nat_list,1),$(l)]],[terminates,[n(nat_list,1),$(l)]]])).
:- assert_fact(lemma,nat_list:ground,@(all,[x],[=>,[succeeds,[n(nat_list,1),$(x)]],[gr,$(x)]])).
:- assert_fact(lemma,lh:cons:first,@(all,[x,l1,l2,n],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]],[succeeds,[n(@<,2),[f(@+,2),[f(lh,1),[n('.',2),$(x),$(l1)]],[f(lh,1),$(l2)]],[n(s,1),$(n)]]]],[succeeds,[n(@<,2),[f(@+,2),[f(lh,1),$(l1)],[f(lh,1),$(l2)]],$(n)]]])).
:- assert_fact(lemma,lh:cons:second,@(all,[l1,y,l2,n],[=>,[&,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(list,1),$(l2)]],[succeeds,[n(@<,2),[f(@+,2),[f(lh,1),$(l1)],[f(lh,1),[n('.',2),$(y),$(l2)]]],[n(s,1),$(n)]]]],[succeeds,[n(@<,2),[f(@+,2),[f(lh,1),$(l1)],[f(lh,1),$(l2)]],$(n)]]])).
:- assert_fact(lemma,delete:termination:1,@(all,[x,l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[terminates,[n(delete,3),$(x),$(l1),$(l2)]]])).
:- assert_fact(lemma,delete:termination:2,@(all,[x,l1,l2],[=>,[succeeds,[n(list,1),$(l2)]],[terminates,[n(delete,3),$(x),$(l1),$(l2)]]])).
:- assert_fact(lemma,delete:types:1,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(list,1),$(l1)]]],[succeeds,[n(list,1),$(l2)]]])).
:- assert_fact(lemma,delete:types:2,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(list,1),$(l2)]]],[succeeds,[n(list,1),$(l1)]]])).
:- assert_fact(theorem,delete:length,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(list,1),$(l1)]]],[=,[f(lh,1),$(l1)],[n(s,1),[f(lh,1),$(l2)]]]])).
:- assert_fact(theorem,delete:app:1,@(all,[x,l1,l2],[=>,[succeeds,[n(list,1),$(l1)]],[succeeds,[n(delete,3),$(x),[f(**,2),$(l1),[n('.',2),$(x),$(l2)]],[f(**,2),$(l1),$(l2)]]]])).
:- assert_fact(theorem,delete:app:2,@(all,[x,l1,l2],[=>,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],@(ex,[l3,l4],[&,[succeeds,[n(list,1),$(l3)]],[=,$(l1),[f(**,2),$(l3),[n('.',2),$(x),$(l4)]]],[=,$(l2),[f(**,2),$(l3),$(l4)]]])])).
:- assert_fact(lemma,delete:nat_list,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(nat_list,1),$(l1)]]],[&,[succeeds,[n(nat,1),$(x)]],[succeeds,[n(nat_list,1),$(l2)]]]])).
:- assert_fact(lemma,delete:ground,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[gr,$(l1)]],[&,[gr,$(x)],[gr,$(l2)]]])).
:- assert_fact(lemma,delete:member:1,@(all,[x,y,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(member,2),$(y),$(l1)]]],[\/,[succeeds,[n(member,2),$(y),$(l2)]],[=,$(y),$(x)]]])).
:- assert_fact(lemma,delete:member:2,@(all,[x,l1,l2],[=>,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(member,2),$(x),$(l1)]]])).
:- assert_fact(lemma,delete:member:3,@(all,[x,y,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(member,2),$(y),$(l2)]]],[succeeds,[n(member,2),$(y),$(l1)]]])).
:- assert_fact(lemma,delete:member:existence,@(all,[x,l1],[=>,[succeeds,[n(member,2),$(x),$(l1)]],@(ex,[l2],[succeeds,[n(delete,3),$(x),$(l1),$(l2)]])])).
:- assert_fact(lemma,delete:member:different,@(all,[x,y,l1,l2],[=>,[&,[succeeds,[n(delete,3),$(x),$(l1),$(l2)]],[succeeds,[n(member,2),$(y),$(l1)]],[<>,$(x),$(y)]],[succeeds,[n(member,2),$(y),$(l2)]]])).
