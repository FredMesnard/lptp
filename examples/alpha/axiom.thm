:- assert_fact(axiom,value:ground,@(all,[v],[=>,[succeeds,[n(val,1),$(v)]],[gr,$(v)]])).
:- assert_fact(axiom,value:termination,@(all,[v],[=>,[succeeds,[n(val,1),$(v)]],[terminates,[n(val,1),$(v)]]])).
:- assert_fact(axiom,value:bot,[succeeds,[n(val,1),[n(bot,0)]]]).
:- assert_fact(axiom,value:top,[succeeds,[n(val,1),[n(top,0)]]]).
:- assert_fact(axiom,value:leq:termination,@(all,[v,w],[=>,[&,[succeeds,[n(val,1),$(v)]],[succeeds,[n(val,1),$(w)]]],[terminates,[n(#=<,2),$(v),$(w)]]])).
:- assert_fact(axiom,value:leq:total,@(all,[v,w],[=>,[&,[succeeds,[n(val,1),$(v)]],[succeeds,[n(val,1),$(w)]]],[\/,[succeeds,[n(#=<,2),$(v),$(w)]],[succeeds,[n(#=<,2),$(w),$(v)]]]])).
:- assert_fact(axiom,value:leq:transitive,@(all,[u,v,w],[=>,[&,[succeeds,[n(val,1),$(u)]],[succeeds,[n(val,1),$(v)]],[succeeds,[n(val,1),$(w)]],[succeeds,[n(#=<,2),$(u),$(v)]],[succeeds,[n(#=<,2),$(v),$(w)]]],[succeeds,[n(#=<,2),$(u),$(w)]]])).
:- assert_fact(axiom,value:leq:antisymmetric,@(all,[v,w],[=>,[&,[succeeds,[n(val,1),$(v)]],[succeeds,[n(val,1),$(w)]],[succeeds,[n(#=<,2),$(v),$(w)]],[succeeds,[n(#=<,2),$(w),$(v)]]],[=,$(v),$(w)]])).
:- assert_fact(axiom,value:leq:bot,@(all,[v],[=>,[succeeds,[n(val,1),$(v)]],[succeeds,[n(#=<,2),[n(bot,0)],$(v)]]])).
:- assert_fact(axiom,value:leq:top,@(all,[v],[=>,[succeeds,[n(val,1),$(v)]],[succeeds,[n(#=<,2),$(v),[n(top,0)]]]])).
:- assert_fact(axiom,pos:ground,@(all,[x],[=>,[succeeds,[n(pos,1),$(x)]],[gr,$(x)]])).
:- assert_fact(axiom,pos:total,@(all,[x],[=>,[succeeds,[n(pos,1),$(x)]],[\/,[succeeds,[n(and_pos,1),$(x)]],[succeeds,[n(or_pos,1),$(x)]]]])).
:- assert_fact(axiom,pos:disjoint,@(all,[x],[=>,[succeeds,[n(pos,1),$(x)]],[~,[&,[succeeds,[n(and_pos,1),$(x)]],[succeeds,[n(or_pos,1),$(x)]]]]])).
:- assert_fact(axiom,and_pos:termination,@(all,[x],[=>,[succeeds,[n(pos,1),$(x)]],[terminates,[n(and_pos,1),$(x)]]])).
:- assert_fact(axiom,or_pos:termination,@(all,[x],[=>,[succeeds,[n(pos,1),$(x)]],[terminates,[n(or_pos,1),$(x)]]])).
:- assert_fact(axiom,static_value:types,@(all,[x,v],[=>,[&,[succeeds,[n(pos,1),$(x)]],[succeeds,[n(static_value,2),$(x),$(v)]]],[succeeds,[n(val,1),$(v)]]])).
:- assert_fact(axiom,static_value:existence,@(all,[x],[=>,[succeeds,[n(pos,1),$(x)]],@(ex,[v],[succeeds,[n(static_value,2),$(x),$(v)]])])).
:- assert_fact(axiom,static_value:uniqueness,@(all,[x,v1,v2],[=>,[&,[succeeds,[n(pos,1),$(x)]],[succeeds,[n(static_value,2),$(x),$(v1)]],[succeeds,[n(static_value,2),$(x),$(v2)]]],[=,$(v1),$(v2)]])).
:- assert_fact(axiom,static_value:termination,@(all,[x,v],[=>,[succeeds,[n(pos,1),$(x)]],[terminates,[n(static_value,2),$(x),$(v)]]])).
:- assert_fun([f(sv,1),$(p)],[succeeds,[n(pos,1),$(p)]],@(ex,[v],[succeeds,[n(static_value,2),$(p),$(v)]])).
:- assert_fact(lemma,sv:types,@(all,[p],[=>,[succeeds,[n(pos,1),$(p)]],[succeeds,[n(val,1),[f(sv,1),$(p)]]]])).
:- assert_fact(axiom,moves:list:types,@(all,[x,l],[=>,[&,[succeeds,[n(pos,1),$(x)]],[succeeds,[n(moves,2),$(x),$(l)]]],[succeeds,[n(pos_list,1),$(l)]]])).
:- assert_fact(axiom,moves:existence,@(all,[x],[=>,[succeeds,[n(pos,1),$(x)]],@(ex,[l],[succeeds,[n(moves,2),$(x),$(l)]])])).
:- assert_fact(axiom,moves:uniqueness,@(all,[x,l1,l2],[=>,[&,[succeeds,[n(pos,1),$(x)]],[succeeds,[n(moves,2),$(x),$(l1)]],[succeeds,[n(moves,2),$(x),$(l2)]]],[=,$(l1),$(l2)]])).
:- assert_fact(axiom,moves:termination,@(all,[x,l],[=>,[succeeds,[n(pos,1),$(x)]],[terminates,[n(moves,2),$(x),$(l)]]])).
:- assert_fun([f(ms,1),$(p)],[succeeds,[n(pos,1),$(p)]],@(ex,[l],[succeeds,[n(moves,2),$(p),$(l)]])).
:- assert_fact(lemma,ms:types,@(all,[p],[=>,[succeeds,[n(pos,1),$(p)]],[succeeds,[n(pos_list,1),[f(ms,1),$(p)]]]])).
