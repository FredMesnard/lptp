%   Author: Guido Vogt <guido.vogt@unifr.ch>
%  Created: Fri Jun  5 11:16:09 1998 
% Filename: mgu.pr 
% Abstract: Correctness proof of a union-find based unification algorithm.

%:- compile_gr($(examples)/mgu/mgu).

:- initialize.

:- thm_file($(tmp)/mgu).
:- tex_file($(tmp)/mgu).

:- needs_gr($(examples)/mgu/mgu).

:- needs_gr($(lib)/nat/nat).
:- needs_thm($(lib)/nat/nat).

:- needs_gr($(lib)/list/list).
:- needs_thm($(lib)/list/list).

%:- set(write_dependencies).

%-----------------------------------------------------------------------
% axioms
%-----------------------------------------------------------------------

:- axiom(atomic:gr,
all x: succeeds atomic(?x) => gr(?x)
).

%-----------------------------------------------------------------------
% substitutions
%-----------------------------------------------------------------------

:- lemma(assoc:types,
all [x,s,t]: succeeds assoc(?x,?s,?t) & succeeds atomic(?x) &
 succeeds substitution(?s) => succeeds term(?t),
[induction(
  [all [x,s,t]: succeeds assoc(?x,?s,?t) => succeeds atomic(?x) &
     succeeds substitution(?s) => succeeds term(?t)],
  [step([x],
    [],
    assume(succeeds atomic(?x) & succeeds substitution([]),
     [],
     succeeds term($(?x))),
    succeeds atomic(?x) & succeeds substitution([]) => succeeds term($(?x))),
   step([x,t,0],
    [],
    assume(succeeds atomic(?x) & succeeds substitution([bind(?x,?t)|?0]),
     [def succeeds substitution([bind(?x,?t)|?0]) by completion,
      succeeds term(?t)],
     succeeds term(?t)),
    succeeds atomic(?x) & succeeds substitution([bind(?x,?t)|?0]) => 
     succeeds term(?t)),
   step([x,y,0,s,t],
    [succeeds atomic(?x) & succeeds substitution(?s) => succeeds term(?t),
     ?x <> ?y,
     succeeds assoc(?x,?s,?t)],
    assume(succeeds atomic(?x) & succeeds substitution([bind(?y,?0)|?s]),
     def succeeds substitution([bind(?y,?0)|?s]) by completion,
     succeeds term(?t)),
    succeeds atomic(?x) & succeeds substitution([bind(?y,?0)|?s]) => 
     succeeds term(?t))]),
 assume(succeeds assoc(?x,?s,?t) & succeeds atomic(?x) &
  succeeds substitution(?s),
  [succeeds atomic(?x) & succeeds substitution(?s) => succeeds term(?t),
   succeeds atomic(?x) & succeeds substitution(?s) => succeeds term(?t),
   succeeds term(?t)],
  succeeds term(?t))]
).

:- lemma(apply:applyL:types,
(all [t1,s,t2]: succeeds apply(?t1,?s,?t2) =>
   succeeds term(?t1) & succeeds substitution(?s) => succeeds term(?t2)) &
(all [tl1,s,tl2]: succeeds applyL(?tl1,?s,?tl2) =>
   succeeds termL(?tl1) & succeeds substitution(?s) => succeeds termL(?tl2)),
induction(
 [all [t1,s,t2]: succeeds apply(?t1,?s,?t2) => succeeds term(?t1) &
    succeeds substitution(?s) => succeeds term(?t2),
  all [tl1,s,tl2]: succeeds applyL(?tl1,?s,?tl2) => succeeds termL(?tl1) &
    succeeds substitution(?s) => succeeds termL(?tl2)],
 [step([x,s,t],
   [succeeds assoc(?x,?s,?t)],
   assume(succeeds term($(?x)) & succeeds substitution(?s),
    [def succeeds term($(?x)) by completion,
     succeeds term(?t) by lemma(assoc:types)],
    succeeds term(?t)),
   succeeds term($(?x)) & succeeds substitution(?s) => succeeds term(?t)),
  step([x,t1L,s,t2L],
   [succeeds termL(?t1L) & succeeds substitution(?s) => 
     succeeds termL(?t2L),
    succeeds applyL(?t1L,?s,?t2L)],
   assume(succeeds term([?x|?t1L]) & succeeds substitution(?s),
    [def succeeds term([?x|?t1L]) by completion,
     succeeds term([?x|?t2L]) by completion],
    succeeds term([?x|?t2L])),
   succeeds term([?x|?t1L]) & succeeds substitution(?s) => 
    succeeds term([?x|?t2L])),
  step([0],
   [],
   [],
   succeeds termL([]) & succeeds substitution(?0) => succeeds termL([])),
  step([t1,t1L,s,t2,t2L],
   [succeeds term(?t1) & succeeds substitution(?s) => succeeds term(?t2),
    succeeds termL(?t1L) & succeeds substitution(?s) => 
     succeeds termL(?t2L),
    succeeds apply(?t1,?s,?t2),
    succeeds applyL(?t1L,?s,?t2L)],
   assume(succeeds termL([?t1|?t1L]) & succeeds substitution(?s),
    [def succeeds termL([?t1|?t1L]) by completion,
     succeeds termL([?t2|?t2L]) by completion],
    succeeds termL([?t2|?t2L])),
   succeeds termL([?t1|?t1L]) & succeeds substitution(?s) => 
    succeeds termL([?t2|?t2L]))])
).

:- corollary(apply:types,
all [t1,s,t2]: succeeds apply(?t1,?s,?t2) & succeeds term(?t1) & 
 succeeds substitution(?s) => succeeds term(?t2),
assume(succeeds apply(?t1,?s,?t2) & succeeds term(?t1) &
 succeeds substitution(?s),
 [all [t1,s,t2]: succeeds apply(?t1,?s,?t2) => succeeds term(?t1) &
    succeeds substitution(?s) => succeeds term(?t2) by 
   lemma(apply:applyL:types),
  succeeds apply(?t1,?s,?t2) => succeeds term(?t1) &
    succeeds substitution(?s) => succeeds term(?t2),
  succeeds term(?t1) & succeeds substitution(?s) => succeeds term(?t2)],
 succeeds term(?t2))
).

:- lemma(assoc:existence,
all [x,s]: succeeds substitution(?s) & succeeds atomic(?x)   =>
  (ex t: succeeds assoc(?x,?s,?t)),
[induction(
  [all s: succeeds substitution(?s) => 
     (all x: succeeds atomic(?x) => (ex t: succeeds assoc(?x,?s,?t)))],
  [step([],
    [],
    assume(succeeds atomic(?x),
     [succeeds assoc(?x, [], $(?x)), 
      ex t: succeeds assoc(?x,[],?t)],
     ex t: succeeds assoc(?x,[],?t)),
    all x: succeeds atomic(?x) => (ex t: succeeds assoc(?x,[],?t))),
   step([x,t,s],
    [all x: succeeds atomic(?x) => (ex t: succeeds assoc(?x,?s,?t)),
     succeeds atomic(?x),
     succeeds term(?t),
     succeeds substitution(?s),
     fails domain(?x,?s)],
    assume(succeeds atomic(?y),
     [?y = ?x \/ ?y <> ?x,
      cases(?y = ?x,
       [succeeds assoc(?x,[bind(?x,?t)|?s],?t),
	succeeds assoc(?y,[bind(?x,?t)|?s],?t),
	ex t1: succeeds assoc(?y,[bind(?x,?t)|?s],?t1)],
       ?y <> ?x,
       [ex t: succeeds assoc(?y,?s,?t),
	exist(t1,
         succeeds assoc(?y,?s,?t1),
         [succeeds assoc(?y,[bind(?x,?t)|?s],?t1),
	  ex t1: succeeds assoc(?y,[bind(?x,?t)|?s],?t1)],
         ex t1: succeeds assoc(?y,[bind(?x,?t)|?s],?t1))],
       ex t1: succeeds assoc(?y,[bind(?x,?t)|?s],?t1))],
     ex t1: succeeds assoc(?y,[bind(?x,?t)|?s],?t1)),
    all y: succeeds atomic(?y) => 
      (ex t1: succeeds assoc(?y,[bind(?x,?t)|?s],?t1)))]),
 assume(succeeds substitution(?s) & succeeds atomic(?x),
  [all x: succeeds atomic(?x) => (ex t: succeeds assoc(?x,?s,?t)),
   succeeds atomic(?x) => (ex t: succeeds assoc(?x,?s,?t)),
   ex t: succeeds assoc(?x,?s,?t)],
  ex t: succeeds assoc(?x,?s,?t))]
).

:- lemma(apply:applyL:existence,
all s: succeeds substitution(?s) =>
  (all t1: succeeds term(?t1) => (ex t2: succeeds apply(?t1,?s,?t2))) &
  (all tl1: succeeds termL(?tl1) => (ex tl2: succeeds applyL(?tl1,?s,?tl2))),
assume(succeeds substitution(?s),
 induction(
  [all t1: succeeds term(?t1) => (ex t2: succeeds apply(?t1,?s,?t2)),
   all tl1: succeeds termL(?tl1) => 
     (ex tl2: succeeds applyL(?tl1,?s,?tl2))],
  [step([x],
    [succeeds atomic(?x)],
    [ex t2: succeeds assoc(?x,?s,?t2) by lemma(assoc:existence),
     exist(t2,
      succeeds assoc(?x,?s,?t2),
      [succeeds apply($(?x),?s,?t2) by sld,
       ex t2: succeeds apply($(?x),?s,?t2)],
      ex t2: succeeds apply($(?x),?s,?t2))],
    ex t2: succeeds apply($(?x),?s,?t2)),
   step([x,tL],
    [ex tl2: succeeds applyL(?tL,?s,?tl2),
     succeeds atomic(?x),
     succeeds termL(?tL)],
    exist(tl2,
     succeeds applyL(?tL,?s,?tl2),
     [succeeds apply([?x|?tL],?s,[?x|?tl2]) by sld,
      ex t2: succeeds apply([?x|?tL],?s,?t2)],
     ex t2: succeeds apply([?x|?tL],?s,?t2)),
    ex t2: succeeds apply([?x|?tL],?s,?t2)),
   step([],
    [],
    [succeeds applyL([],?s,[]),
     ex tl2: succeeds applyL([],?s,?tl2)],
    ex tl2: succeeds applyL([],?s,?tl2)),
   step([t,tL],
    [ex t2: succeeds apply(?t,?s,?t2),
     ex tl2: succeeds applyL(?tL,?s,?tl2),
     succeeds term(?t),
     succeeds termL(?tL)],
    exist(t2,
     succeeds apply(?t,?s,?t2),
     exist(tl2,
      succeeds applyL(?tL,?s,?tl2),
      [succeeds applyL([?t|?tL],?s,[?t2|?tl2]) by sld,
       ex tl2: succeeds applyL([?t|?tL],?s,?tl2)],
      ex tl2: succeeds applyL([?t|?tL],?s,?tl2)),
     ex tl2: succeeds applyL([?t|?tL],?s,?tl2)),
    ex tl2: succeeds applyL([?t|?tL],?s,?tl2))]),
 (all t1: succeeds term(?t1) => (ex t2: succeeds apply(?t1,?s,?t2))) &
 (all tl1: succeeds termL(?tl1) => (ex tl2: succeeds applyL(?tl1,?s,?tl2))))
).

:- corollary(apply:existence,
all [t1,s]: succeeds term(?t1) & succeeds substitution(?s) =>
  (ex t2: succeeds apply(?t1,?s,?t2)),
assume(succeeds term(?t1) & succeeds substitution(?s),
 [def succeeds term(?t1) by completion,
  (all t1: succeeds term(?t1) => (ex t2: succeeds apply(?t1,?s,?t2))) &
  (all tl1: succeeds termL(?tl1) => 
     (ex tl2: succeeds applyL(?tl1,?s,?tl2))) by 
   lemma(apply:applyL:existence)],
 ex t2: succeeds apply(?t1,?s,?t2))
).

:- lemma(assoc:uniqueness,
all [x,s,t1,t2]: succeeds assoc(?x,?s,?t1) & succeeds atomic(?x) &
 succeeds substitution(?s) & succeeds assoc(?x,?s,?t2) => ?t1 = ?t2,
[induction(
  [all [x,s,t1]: succeeds assoc(?x,?s,?t1) => 
     (all t2: succeeds atomic(?x) & succeeds substitution(?s) &
       succeeds assoc(?x,?s,?t2) => ?t1 = ?t2)],
  [step([x],
    [],
    assume(succeeds atomic(?x) & succeeds substitution([]) &
     succeeds assoc(?x,[],?t2),
     [def succeeds assoc(?x,[],?t2) by completion],
     $(?x) = ?t2),
    all t2: succeeds atomic(?x) & succeeds substitution([]) &
     succeeds assoc(?x,[],?t2) => $(?x) = ?t2),
   step([x,t,0],
    [],
    assume(succeeds atomic(?x) & succeeds substitution([bind(?x,?t)|?0]) &
     succeeds assoc(?x,[bind(?x,?t)|?0],?t2),
     [def succeeds assoc(?x,[bind(?x,?t)|?0],?t2) by completion,
      cases(?t = ?t2,
       [],
       ?x <> ?x & succeeds assoc(?x,?0,?t2),
       [],
       ?t = ?t2)],
     ?t = ?t2),
    all t2: succeeds atomic(?x) & succeeds substitution([bind(?x,?t)|?0]) &
     succeeds assoc(?x,[bind(?x,?t)|?0],?t2) => ?t = ?t2),
   step([x,y,0,s,t],
    [all t2: succeeds atomic(?x) & succeeds substitution(?s) &
      succeeds assoc(?x,?s,?t2) => ?t = ?t2,
     ?x <> ?y,
     succeeds assoc(?x,?s,?t)],
    assume(succeeds atomic(?x) & succeeds substitution([bind(?y,?0)|?s]) &
     succeeds assoc(?x,[bind(?y,?0)|?s],?t2),
     [def succeeds assoc(?x,[bind(?y,?0)|?s],?t2) by completion,
      cases(?x = ?y & ?0 = ?t2,
       [],
       ?x <> ?y & succeeds assoc(?x,?s,?t2),
       [def succeeds substitution([bind(?y,?0)|?s]) by completion,
	?t = ?t2],
       ?t = ?t2)],
     ?t = ?t2),
    all t2: succeeds atomic(?x) & succeeds substitution([bind(?y,?0)|?s]) &
     succeeds assoc(?x,[bind(?y,?0)|?s],?t2) => ?t = ?t2)]),
 assume(succeeds assoc(?x,?s,?t1) & succeeds atomic(?x) &
  succeeds substitution(?s) & succeeds assoc(?x,?s,?t2),
  [all t2: succeeds atomic(?x) & succeeds substitution(?s) &
    succeeds assoc(?x,?s,?t2) => ?t1 = ?t2,
   succeeds atomic(?x) & succeeds substitution(?s) &
   succeeds assoc(?x,?s,?t2) => ?t1 = ?t2,
   ?t1 = ?t2],
  ?t1 = ?t2)]
).

:- lemma(apply:applyL:uniqueness,
(all [t1,s,t2]: succeeds apply(?t1,?s,?t2) =>
   (all t3: succeeds term(?t1) & succeeds substitution(?s) &
     succeeds apply(?t1,?s,?t3) => ?t2 = ?t3)) &
(all [tl1,s,tl2]: succeeds applyL(?tl1,?s,?tl2) =>
   (all tl3: succeeds termL(?tl1) & succeeds substitution(?s) &
     succeeds applyL(?tl1,?s,?tl3) => ?tl2 = ?tl3)), 
induction(
 [all [t1,s,t2]: succeeds apply(?t1,?s,?t2) => 
    (all t3: succeeds term(?t1) & succeeds substitution(?s) &
      succeeds apply(?t1,?s,?t3) => ?t2 = ?t3),
  all [tl1,s,tl2]: succeeds applyL(?tl1,?s,?tl2) => 
    (all tl3: succeeds termL(?tl1) & succeeds substitution(?s) &
      succeeds applyL(?tl1,?s,?tl3) => ?tl2 = ?tl3)],
 [step([x,s,t],
   [succeeds assoc(?x,?s,?t)],
   assume(succeeds term($(?x)) & succeeds substitution(?s) &
    succeeds apply($(?x),?s,?t3),
    [def succeeds apply($(?x),?s,?t3) by completion,
     succeeds assoc(?x,?s,?t3),
     def succeeds term($(?x)) by completion,
     succeeds atomic(?x),
     ?t = ?t3 by lemma(assoc:uniqueness)],
    ?t = ?t3),
   all t3: succeeds term($(?x)) & succeeds substitution(?s) &
    succeeds apply($(?x),?s,?t3) => ?t = ?t3),
  step([x,t1L,s,t2L],
   [all tl3: succeeds termL(?t1L) & succeeds substitution(?s) &
     succeeds applyL(?t1L,?s,?tl3) => ?t2L = ?tl3,
    succeeds applyL(?t1L,?s,?t2L)],
   assume(succeeds term([?x|?t1L]) & succeeds substitution(?s) &
    succeeds apply([?x|?t1L],?s,?t3),
    [def succeeds apply([?x|?t1L],?s,?t3) by completion,
     exist(0,
      ?t3 = [?x|?0] & succeeds applyL(?t1L,?s,?0),
      [def succeeds term([?x|?t1L]) by completion,
       ?t2L = ?0,
       [?x|?t2L] = ?t3],
      [?x|?t2L] = ?t3)],
    [?x|?t2L] = ?t3),
   all t3: succeeds term([?x|?t1L]) & succeeds substitution(?s) &
    succeeds apply([?x|?t1L],?s,?t3) => [?x|?t2L] = ?t3),
  step([0],
   [],
   assume(succeeds termL([]) & succeeds substitution(?0) &
    succeeds applyL([],?0,?tl3),
    [def succeeds applyL([],?0,?tl3) by completion,
     [] = ?tl3],
    [] = ?tl3),
   all tl3: succeeds termL([]) & succeeds substitution(?0) &
    succeeds applyL([],?0,?tl3) => [] = ?tl3),
  step([t1,t1L,s,t2,t2L],
   [all t3: succeeds term(?t1) & succeeds substitution(?s) &
     succeeds apply(?t1,?s,?t3) => ?t2 = ?t3,
    all tl3: succeeds termL(?t1L) & succeeds substitution(?s) &
     succeeds applyL(?t1L,?s,?tl3) => ?t2L = ?tl3,
    succeeds apply(?t1,?s,?t2),
    succeeds applyL(?t1L,?s,?t2L)],
   assume(succeeds termL([?t1|?t1L]) & succeeds substitution(?s) &
    succeeds applyL([?t1|?t1L],?s,?tl3),
    [def succeeds applyL([?t1|?t1L],?s,?tl3) by completion,
     exist([0,1],
      ?tl3 = [?0|?1] & succeeds apply(?t1,?s,?0) &
      succeeds applyL(?t1L,?s,?1),
      [def succeeds termL([?t1|?t1L]) by completion,?t2 = ?0,
       ?t2L = ?1,
       [?t2|?t2L] = ?tl3],
      [?t2|?t2L] = ?tl3)],
    [?t2|?t2L] = ?tl3),
   all tl3: succeeds termL([?t1|?t1L]) & succeeds substitution(?s) &
    succeeds applyL([?t1|?t1L],?s,?tl3) => [?t2|?t2L] = ?tl3)])
).

:- corollary(apply:uniqueness,
all [t1,t2,t3,s]: succeeds apply(?t1,?s,?t2) & succeeds term(?t1) &
 succeeds substitution(?s) & succeeds apply(?t1,?s,?t3) => ?t2 = ?t3,
assume(succeeds apply(?t1,?s,?t2) & succeeds term(?t1) &
 succeeds substitution(?s) & succeeds apply(?t1,?s,?t3),
 [all [t1,s,t2]: succeeds apply(?t1,?s,?t2) => 
    (all t3: succeeds term(?t1) & succeeds substitution(?s) &
      succeeds apply(?t1,?s,?t3) => ?t2 = ?t3) by 
   lemma(apply:applyL:uniqueness),
  succeeds apply(?t1,?s,?t2) => 
    (all t3: succeeds term(?t1) & succeeds substitution(?s) &
      succeeds apply(?t1,?s,?t3) => ?t2 = ?t3),
  all t3: succeeds term(?t1) & succeeds substitution(?s) &
      succeeds apply(?t1,?s,?t3) => ?t2 = ?t3,
  ?t2 = ?t3 ],
 ?t2 = ?t3)
).

% The definition of application. We write (?t // ?s) for the application
% of substitution ?s to the term ?t.

:- definition_fun(//,2,
all [t1,s,t2]: succeeds term(?t1) & succeeds substitution(?s) =>
  (?t1 // ?s = ?t2 <=> succeeds apply(?t1,?s,?t2)),
existence by corollary(apply:existence),
uniqueness by corollary(apply:uniqueness)
).

:- corollary(apply:substitution:types,
all [t,s]: succeeds term(?t) & succeeds substitution(?s) =>
  succeeds term(?t // ?s),
assume(succeeds term(?t) & succeeds substitution(?s),
 [succeeds apply(?t,?s,?t // ?s) by existence(//,2),
  succeeds term(?t // ?s) by corollary(apply:types)],
 succeeds term(?t // ?s))
).

:- lemma(unifier:characterization:1,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds substitution(?s) & ?t1 // ?s = ?t2 // ?s =>
  succeeds unifier(?t1,?t2,?s),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds substitution(?s) &
 ?t1 // ?s = ?t2 // ?s,
 [succeeds apply(?t1,?s,?t1 // ?s) by existence(//,2),
  succeeds apply(?t2,?s,?t2 // ?s) by existence(//,2),
  succeeds apply(?t2,?s,?t1 // ?s),
  succeeds unifier(?t1,?t2,?s) by sld],
 succeeds unifier(?t1,?t2,?s))
).

:- lemma(unifier:characterization:2,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s) =>
  ?t1 // ?s = ?t2 // ?s,
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds substitution(?s) &
 succeeds unifier(?t1,?t2,?s),
 [def succeeds unifier(?t1,?t2,?s) by completion,
  exist(t3,
   succeeds apply(?t1,?s,?t3) & succeeds apply(?t2,?s,?t3),
   [?t3 = ?t1 // ?s by uniqueness(//,2),
    ?t3 = ?t2 // ?s by uniqueness(//,2),
    ?t1 // ?s = ?t2 // ?s],
   ?t1 // ?s = ?t2 // ?s)],
 ?t1 // ?s = ?t2 // ?s)
).

:- lemma(substitution:types,
all s: succeeds substitution(?s) => succeeds list(?s),
induction([all s: succeeds substitution(?s) => succeeds list(?s)],
 [step([],[],[],succeeds list([])),
  step([x,t,s],
   [succeeds list(?s),
    succeeds atomic(?x),
    succeeds term(?t),
    succeeds substitution(?s),
    fails domain(?x,?s)],
   [],
   succeeds list([bind(?x,?t)|?s]))])
).

:- lemma(domain:termination,
all [x,s]: succeeds substitution(?s) =>
  terminates domain(?x,?s),
assume(succeeds substitution(?s),
 [succeeds list(?s) by lemma(substitution:types),
  terminates member(bind(?x,?0),?s) by lemma(member:termination),
  all 0: terminates member(bind(?x,?0),?s),
  terminates domain(?x,?s) by completion],
 terminates domain(?x,?s))
).

:- definition_pred(composition,3,
all [s1,s2,s3]: composition(?s1,?s2,?s3) <=>
 (all x: succeeds atomic(?x) => $(?x) // ?s1 // ?s2 = $(?x) // ?s3)
).

:- lemma(apply:applyL:nil,
(all t: succeeds term(?t) => succeeds apply(?t,[],?t)) &
(all tl: succeeds termL(?tl) => succeeds applyL(?tl,[],?tl)),
induction(
 [all t: succeeds term(?t) => succeeds apply(?t,[],?t),
  all tl: succeeds termL(?tl) => succeeds applyL(?tl,[],?tl)],
 [step([x],[succeeds atomic(?x)],[],succeeds apply($(?x),[],$(?x))),
  step([x,tL],
   [succeeds applyL(?tL,[],?tL),
    succeeds atomic(?x),
    succeeds termL(?tL)],
   [],
   succeeds apply([?x|?tL],[],[?x|?tL])),
  step([],
   [],
   [],
   succeeds applyL([],[],[])),
  step([t,tL],
   [succeeds apply(?t,[],?t),
    succeeds applyL(?tL,[],?tL),
    succeeds term(?t),
    succeeds termL(?tL)],
   [],
   succeeds applyL([?t|?tL],[],[?t|?tL]))]) 
).

:- corollary(apply:nil,
all t: succeeds term(?t) => ?t // [] = ?t,
assume(succeeds term(?t),
 [succeeds apply(?t,[],?t) by lemma(apply:applyL:nil),
  ?t // [] = ?t by uniqueness(//,2)],
 ?t // [] = ?t)
).

:- lemma(composition:neutral:left,
all s: succeeds substitution(?s) => composition([],?s,?s),
assume(succeeds substitution(?s),
 [assume(succeeds atomic(?x),
   [succeeds term($(?x)) by sld,
    $(?x) // [] = $(?x) by corollary(apply:nil),
    $(?x) // [] // ?s = $(?x) // ?s],
   $(?x) // [] // ?s = $(?x) // ?s),
  composition([],?s,?s) by introduction(composition,3)],
 composition([],?s,?s))
).

:- lemma(composition:neutral:right,
all s: succeeds substitution(?s) => composition(?s,[],?s),
assume(succeeds substitution(?s),
 [assume(succeeds atomic(?x),
   [succeeds term($(?x)) by sld,
    succeeds term($(?x) // ?s) by corollary(apply:substitution:types),
    $(?x) // ?s // [] = $(?x) // ?s by corollary(apply:nil)],
   $(?x) // ?s // [] = $(?x) // ?s),
  composition(?s,[],?s) by introduction(composition,3)],
 composition(?s,[],?s))
).


:- lemma(composition:term:termL,
all [s1,s2,s3]: succeeds substitution(?s1) &
 succeeds substitution(?s2) & succeeds substitution(?s3) &
 composition(?s1,?s2,?s3) =>
  (all t1: succeeds term(?t1) =>
     (all [t2,t3]: succeeds apply(?t1,?s1,?t2) &
       succeeds apply(?t2,?s2,?t3) => succeeds apply(?t1,?s3,?t3))) &
  (all tl1: succeeds termL(?tl1) =>
     (all [tl2,tl3]: succeeds applyL(?tl1,?s1,?tl2) &
       succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL(?tl1,?s3,?tl3))),
assume(succeeds substitution(?s1) & succeeds substitution(?s2) &
 succeeds substitution(?s3) & composition(?s1,?s2,?s3),
 induction(
  [all t1: succeeds term(?t1) => 
     (all [t2,t3]: succeeds apply(?t1,?s1,?t2) & 
       succeeds apply(?t2,?s2,?t3) => succeeds apply(?t1,?s3,?t3)),
   all tl1: succeeds termL(?tl1) => 
     (all [tl2,tl3]: succeeds applyL(?tl1,?s1,?tl2) &
       succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL(?tl1,?s3,?tl3))],
  [step([x],
    [succeeds atomic(?x)],
    assume(succeeds apply($(?x),?s1,?t2) & succeeds apply(?t2,?s2,?t3),
     [all x: succeeds atomic(?x) => $(?x) // ?s1 // ?s2 = $(?x) // ?s3 by 
       elimination(composition,3),
      $(?x) // ?s1 // ?s2 = $(?x) // ?s3,
      ?t2 = $(?x) // ?s1 by uniqueness(//,2),
      succeeds term($(?x)) by sld,
      succeeds term(?t2) by corollary(apply:types),
      ?t3 = ?t2 // ?s2 by uniqueness(//,2),
      ?t3 = $(?x) // ?s1 // ?s2,
      ?t3 = $(?x) // ?s3,
      succeeds apply($(?x),?s3,$(?x) // ?s3) by existence(//,2),
      succeeds apply($(?x),?s3,?t3)],
     succeeds apply($(?x),?s3,?t3)),
    all [t2,t3]: succeeds apply($(?x),?s1,?t2) & 
     succeeds apply(?t2,?s2,?t3) => succeeds apply($(?x),?s3,?t3)),
   step([x,tL],
    [all [tl2,tl3]: succeeds applyL(?tL,?s1,?tl2) &
      succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL(?tL,?s3,?tl3),
     succeeds atomic(?x),
     succeeds termL(?tL)],
    assume(succeeds apply([?x|?tL],?s1,?t2) & succeeds apply(?t2,?s2,?t3),
     [def succeeds apply([?x|?tL],?s1,?t2) by completion,
      exist(t2L,
       ?t2 = [?x|?t2L] & succeeds applyL(?tL,?s1,?t2L),
       [def succeeds apply([?x|?t2L],?s2,?t3) by completion,
	exist(1,
         ?t3 = [?x|?1] & succeeds applyL(?t2L,?s2,?1),
         [succeeds applyL(?tL,?s3,?1),
	  succeeds apply([?x|?tL],?s3,[?x|?1]) by sld,
	  succeeds apply([?x|?tL],?s3,?t3)],
         succeeds apply([?x|?tL],?s3,?t3))],
       succeeds apply([?x|?tL],?s3,?t3))],
     succeeds apply([?x|?tL],?s3,?t3)),
    all [t2,t3]: succeeds apply([?x|?tL],?s1,?t2) &
     succeeds apply(?t2,?s2,?t3) => succeeds apply([?x|?tL],?s3,?t3)),
   step([],
    [],
    assume(succeeds applyL([],?s1,?tl2) & succeeds applyL(?tl2,?s2,?tl3),
     [def succeeds applyL([],?s1,?tl2) by completion,
      ?tl2 = [],
      def succeeds applyL([],?s2,?tl3) by completion,
      ?tl3 = [],
      succeeds applyL([],?s3,[]) by sld,
      succeeds applyL([],?s3,?tl3)],
     succeeds applyL([],?s3,?tl3)),
    all [tl2,tl3]: succeeds applyL([],?s1,?tl2) &
     succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL([],?s3,?tl3)),
   step([t,tL],
    [all [t2,t3]: succeeds apply(?t,?s1,?t2) & succeeds apply(?t2,?s2,?t3) =>
       succeeds apply(?t,?s3,?t3),
     all [tl2,tl3]: succeeds applyL(?tL,?s1,?tl2) &
      succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL(?tL,?s3,?tl3),
     succeeds term(?t),
     succeeds termL(?tL)],
    assume(succeeds applyL([?t|?tL],?s1,?tl2) &
     succeeds applyL(?tl2,?s2,?tl3),
     [def succeeds applyL([?t|?tL],?s1,?tl2) by completion,
      exist([t2,t2L],
       ?tl2 = [?t2|?t2L] & succeeds apply(?t,?s1,?t2) &
       succeeds applyL(?tL,?s1,?t2L),
       [def succeeds applyL([?t2|?t2L],?s2,?tl3) by completion,
	exist([0,1],
         ?tl3 = [?0|?1] & succeeds apply(?t2,?s2,?0) &
         succeeds applyL(?t2L,?s2,?1),
         [succeeds apply(?t,?s3,?0),
	  succeeds applyL(?tL,?s3,?1),
	  succeeds applyL([?t|?tL],?s3,[?0|?1]) by sld,
	  succeeds applyL([?t|?tL],?s3,?tl3)],
         succeeds applyL([?t|?tL],?s3,?tl3))],
       succeeds applyL([?t|?tL],?s3,?tl3))],
     succeeds applyL([?t|?tL],?s3,?tl3)),
    all [tl2,tl3]: succeeds applyL([?t|?tL],?s1,?tl2) &
     succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL([?t|?tL],?s3,?tl3))]),
 (all t1: succeeds term(?t1) => 
    (all [t2,t3]: succeeds apply(?t1,?s1,?t2) & succeeds apply(?t2,?s2,?t3) =>
       succeeds apply(?t1,?s3,?t3))) &
 (all tl1: succeeds termL(?tl1) => 
    (all [tl2,tl3]: succeeds applyL(?tl1,?s1,?tl2) &
      succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL(?tl1,?s3,?tl3))))
).

:- corollary(composition:term,
all [t,s1,s2,s3]: succeeds substitution(?s1) &
 succeeds substitution(?s2) & succeeds substitution(?s3) &
 composition(?s1,?s2,?s3) & succeeds term(?t) =>
  ?t // ?s1 // ?s2 = ?t // ?s3,
assume(succeeds substitution(?s1) & succeeds substitution(?s2) &
 succeeds substitution(?s3) & composition(?s1,?s2,?s3) & succeeds term(?t),
 [(all t1: succeeds term(?t1) => 
     (all [t2,t3]: succeeds apply(?t1,?s1,?t2) & 
       succeeds apply(?t2,?s2,?t3) => succeeds apply(?t1,?s3,?t3))) &
  (all tl1: succeeds termL(?tl1) => 
     (all [tl2,tl3]: succeeds applyL(?tl1,?s1,?tl2) &
       succeeds applyL(?tl2,?s2,?tl3) => succeeds applyL(?tl1,?s3,?tl3))) by
   lemma(composition:term:termL),
  all [t2,t3]: succeeds apply(?t,?s1,?t2) & 
   succeeds apply(?t2,?s2,?t3) => succeeds apply(?t,?s3,?t3),
  succeeds apply(?t,?s1,?t // ?s1) by existence(//,2),
  succeeds term(?t // ?s1) by corollary(apply:types),
  succeeds apply(?t // ?s1,?s2,?t // ?s1 // ?s2) by existence(//,2),
  succeeds apply(?t,?s3,?t // ?s1 // ?s2),
  ?t // ?s1 // ?s2 = ?t // ?s3 by uniqueness(//,2)],
 ?t // ?s1 // ?s2 = ?t // ?s3)
).

:- lemma(apply:var:bind:1,
all [x,t,s]: succeeds substitution([bind(?x,?t)|?s]) =>
  $(?x) // [bind(?x,?t)|?s] = ?t,
assume(succeeds substitution([bind(?x,?t)|?s]),
 [succeeds assoc(?x,[bind(?x,?t)|?s],?t) by sld,
  succeeds apply($(?x),[bind(?x,?t)|?s],?t) by sld,
  def succeeds substitution([bind(?x,?t)|?s]) by completion,
  succeeds term($(?x)),
  $(?x) // [bind(?x,?t)|?s] = ?t by uniqueness(//,2)],
 $(?x) // [bind(?x,?t)|?s] = ?t)
).

:- lemma(apply:var:bind:2,
all [x,y,t,s]: succeeds substitution([bind(?x,?t)|?s]) &
 succeeds atomic(?y) & ?x <> ?y =>
  $(?y) // [bind(?x,?t)|?s] = $(?y) // ?s,
assume(succeeds substitution([bind(?x,?t)|?s]) & succeeds atomic(?y) &
 ?x <> ?y,
 [def succeeds substitution([bind(?x,?t)|?s]) by completion,
  succeeds substitution(?s),
  succeeds apply($(?y),?s,$(?y) // ?s) by existence(//,2),
  def succeeds apply($(?y),?s,$(?y) // ?s) by completion,
  succeeds assoc(?y,[bind(?x,?t)|?s],$(?y) // ?s) by sld,
  succeeds apply($(?y),[bind(?x,?t)|?s],$(?y) // ?s) by sld,
  $(?y) // [bind(?x,?t)|?s] = $(?y) // ?s by uniqueness(//,2)],
 $(?y) // [bind(?x,?t)|?s] = $(?y) // ?s)
).

:- lemma(assoc:bind:substitution,
all [x,s,t]: succeeds substitution(?s) & succeeds member(bind(?x,?t),?s) =>
  succeeds assoc(?x,?s,?t),
[induction(
  [all s: succeeds substitution(?s) => 
     (all [x,t]: succeeds member(bind(?x,?t),?s) => 
        succeeds assoc(?x,?s,?t))],
  [step([],
    [],
    assume(succeeds member(bind(?x,?t),[]),
     [def succeeds member(bind(?x,?t),[]) by completion,ff],
     succeeds assoc(?x,[],?t)),
    all [x,t]: succeeds member(bind(?x,?t),[]) => succeeds assoc(?x,[],?t)),
   step([x,t,s],
    [all [x,t]: succeeds member(bind(?x,?t),?s) => succeeds assoc(?x,?s,?t),
     succeeds atomic(?x),
     succeeds term(?t),
     succeeds substitution(?s),
     fails domain(?x,?s)],
    assume(succeeds member(bind(?x1,?t1),[bind(?x,?t)|?s]),
     [def succeeds member(bind(?x1,?t1),[bind(?x,?t)|?s]) by completion,
      cases(?x1 = ?x & ?t1 = ?t,
       [],
       succeeds member(bind(?x1,?t1),?s),
       [succeeds assoc(?x1,?s,?t1),
	contra(?x1 = ?x,
	 [succeeds domain(?x1,?s) by sld,
	  succeeds domain(?x,?s),
	  ff]),
	?x1 <> ?x,
	succeeds assoc(?x1,[bind(?x,?t)|?s],?t1) by sld],
       succeeds assoc(?x1,[bind(?x,?t)|?s],?t1))],
     succeeds assoc(?x1,[bind(?x,?t)|?s],?t1)),
    all [x1,t1]: succeeds member(bind(?x1,?t1),[bind(?x,?t)|?s]) => 
      succeeds assoc(?x1,[bind(?x,?t)|?s],?t1))]),
 assume(succeeds substitution(?s) & succeeds member(bind(?x,?t),?s),
  [all [x,t]: succeeds member(bind(?x,?t),?s) => succeeds assoc(?x,?s,?t),
   succeeds member(bind(?x,?t),?s) => succeeds assoc(?x,?s,?t),
   succeeds assoc(?x,?s,?t)],
  succeeds assoc(?x,?s,?t))]
).

:- lemma(assoc:success,
all [x,s,t]: succeeds assoc(?x,?s,?t) =>
  succeeds member(bind(?x,?t),?s) \/ ?t = $(?x),
induction(
 [all [x,s,t]: succeeds assoc(?x,?s,?t) => succeeds member(bind(?x,?t),?s) \/
    ?t = $(?x)],
 [step([x],[],[],succeeds member(bind(?x,$(?x)),[]) \/ $(?x) = $(?x)),
  step([x,t,0],
   [],
   [],
   succeeds member(bind(?x,?t),[bind(?x,?t)|?0]) \/ ?t = $(?x)),
  step([x,y,0,s,t],
   [succeeds member(bind(?x,?t),?s) \/ ?t = $(?x),
    ?x <> ?y,
    succeeds assoc(?x,?s,?t)],
   cases(succeeds member(bind(?x,?t),?s),
    [],
    ?t = $(?x),
    [],
    succeeds member(bind(?x,?t),[bind(?y,?0)|?s]) \/ ?t = $(?x)),
   succeeds member(bind(?x,?t),[bind(?y,?0)|?s]) \/ ?t = $(?x))])
).

:- lemma(assoc:domain,
all [x,s]: succeeds substitution(?s) & succeeds atomic(?x) &
 fails domain(?x,?s) =>
  succeeds assoc(?x,?s,$(?x)),
assume(succeeds substitution(?s) & succeeds atomic(?x) & 
 fails domain(?x,?s),
 [ex t: succeeds assoc(?x,?s,?t) by lemma(assoc:existence),
  exist(t,
   succeeds assoc(?x,?s,?t),
   [succeeds member(bind(?x,?t),?s) \/ ?t = $(?x) by lemma(assoc:success),
    cases(succeeds member(bind(?x,?t),?s),
     [succeeds domain(?x,?s) by sld,
      ff],
     ?t = $(?x),
     [],
     succeeds assoc(?x,?s,$(?x)))],
   succeeds assoc(?x,?s,$(?x)))],
 succeeds assoc(?x,?s,$(?x)))
).

%-----------------------------------------------------------------------
% subterms
%-----------------------------------------------------------------------

:- definition_pred(subterms_term,2,
all [t,l]: subterms_term(?t,?l) <=>
 (all t1: succeeds subterm(?t1,?t) => succeeds member(?t1,?l))
).

:- definition_pred(subterms_termL,2,
all [tl,l]: subterms_termL(?tl,?l) <=>
 (all t1: succeeds subtermL(?t1,?tl) => succeeds member(?t1,?l))
).

:- definition_pred(subterms_closed,1,
all tl: subterms_closed(?tl) <=>
 succeeds termL(?tl) & subterms_termL(?tl,?tl)
).

:- definition_pred(subterms_class,2,
all [c,l]: subterms_class(?c,?l) <=>
 (all t: succeeds class_member(?t,?c) => subterms_term(?t,?l))
).

:- definition_pred(subterms_partition,2,
all [p,l]: subterms_partition(?p,?l) <=>
 (all t: succeeds partition_member(?t,?p) => subterms_term(?t,?l))
).

:- lemma(subterms_term:monotonic,
all [t,l1,l2]: subterms_term(?t,?l1) & sub(?l1,?l2) =>
  subterms_term(?t,?l2),
assume(subterms_term(?t,?l1) & sub(?l1,?l2),
 [all t1: succeeds subterm(?t1,?t) => succeeds member(?t1,?l1) by 
   elimination(subterms_term,2),
  all x: succeeds member(?x,?l1) => succeeds member(?x,?l2) by 
   elimination(sub,2),
  assume(succeeds subterm(?t1,?t),[],succeeds member(?t1,?l2)),
  subterms_term(?t,?l2) by introduction(subterms_term,2)],
 subterms_term(?t,?l2))
).

:- lemma(subterms_termL:monotonic,
all [tl,l1,l2]: subterms_termL(?tl,?l1) & sub(?l1,?l2) =>
  subterms_termL(?tl,?l2),
assume(subterms_termL(?tl,?l1) & sub(?l1,?l2),
 [assume(succeeds subtermL(?t1,?tl),
   [all t1: succeeds subtermL(?t1,?tl) => succeeds member(?t1,?l1) by 
     elimination(subterms_termL,2),
    all x: succeeds member(?x,?l1) => succeeds member(?x,?l2) by 
     elimination(sub,2)],
   succeeds member(?t1,?l2)),
  subterms_termL(?tl,?l2) by introduction(subterms_termL,2)],
 subterms_termL(?tl,?l2))
).

:- lemma(subterms_class:monotonic,
all [c,l1,l2]: subterms_class(?c,?l1) & sub(?l1,?l2)
  => subterms_class(?c,?l2),
assume(subterms_class(?c,?l1) & sub(?l1,?l2),
 [assume(succeeds class_member(?t,?c),
   [all t: succeeds class_member(?t,?c) => subterms_term(?t,?l1) by 
     elimination(subterms_class,2),
    subterms_term(?t,?l2) by lemma(subterms_term:monotonic)],
   subterms_term(?t,?l2)),
  subterms_class(?c,?l2) by introduction(subterms_class,2)],
 subterms_class(?c,?l2))
).

:- lemma(subterms_partition:monotonic,
all [p,l1,l2]: subterms_partition(?p,?l1) & sub(?l1,?l2)
  => subterms_partition(?p,?l2),
assume(subterms_partition(?p,?l1) & sub(?l1,?l2),
 [assume(succeeds partition_member(?t,?p),
   [all t: succeeds partition_member(?t,?p) => subterms_term(?t,?l1) by 
     elimination(subterms_partition,2),
    subterms_term(?t,?l2) by lemma(subterms_term:monotonic)],
   subterms_term(?t,?l2)),
  subterms_partition(?p,?l2) by introduction(subterms_partition,2)],
 subterms_partition(?p,?l2))
).

:- lemma(termL:list,
all tl: succeeds termL(?tl) => succeeds list(?tl),
induction([all tl: succeeds termL(?tl) => succeeds list(?tl)],
 [step([],[],[],succeeds list([])),
  step([t,tL],
   [succeeds list(?tL),
    succeeds term(?t),
    succeeds termL(?tL)],
   [],
   succeeds list([?t|?tL]))])
).

:- lemma(termL:app,
all [l1,l2,l3]: succeeds append(?l1,?l2,?l3) &
 succeeds termL(?l1) & succeeds termL(?l2) => succeeds termL(?l3),
[induction(
  [all [l1,l2,l3]: succeeds append(?l1,?l2,?l3) => succeeds termL(?l1) &
     succeeds termL(?l2) => succeeds termL(?l3)],
  [step([l],
    [],
    assume(succeeds termL([]) & succeeds termL(?l),
     [],
     succeeds termL(?l)),
    succeeds termL([]) & succeeds termL(?l) => succeeds termL(?l)),
   step([x,l1,l2,l3],
    [succeeds termL(?l1) & succeeds termL(?l2) => succeeds termL(?l3),
     succeeds append(?l1,?l2,?l3)],
    assume(succeeds termL([?x|?l1]) & succeeds termL(?l2),
     [def succeeds termL([?x|?l1]) by completion,
      succeeds termL(?l3),
      succeeds termL([?x|?l3])],
     succeeds termL([?x|?l3])),
    succeeds termL([?x|?l1]) & succeeds termL(?l2) => 
     succeeds termL([?x|?l3]))]),
 assume(succeeds append(?l1,?l2,?l3) & succeeds termL(?l1) &
  succeeds termL(?l2),
  [succeeds termL(?l1) & succeeds termL(?l2) => succeeds termL(?l3),
   succeeds termL(?l1) & succeeds termL(?l2) => succeeds termL(?l3),
   succeeds termL(?l3)],
  succeeds termL(?l3))]
).

:- corollary(termL:app,
all [l1,l2]: succeeds termL(?l1) & succeeds termL(?l2) =>
  succeeds termL(?l1 ** ?l2),
assume(succeeds termL(?l1) & succeeds termL(?l2),
 [succeeds list(?l1) by lemma(termL:list),
  succeeds append(?l1,?l2,?l1 ** ?l2) by existence(**,2),
  succeeds termL(?l1 ** ?l2) by lemma(termL:app)],
 succeeds termL(?l1 ** ?l2))
).

:- lemma(subterms_termL:app,
all [l1,l2,l3,l]: subterms_termL(?l1,?l) & subterms_termL(?l2,?l) &
 succeeds append(?l1,?l2,?l3) => subterms_termL(?l3,?l),
assume(subterms_termL(?l1,?l) & subterms_termL(?l2,?l) &
 succeeds append(?l1,?l2,?l3),
 [assume(succeeds subtermL(?t1,?l3),
   [def succeeds subtermL(?t1,?l3) by completion,
    exist(t2,
     succeeds member(?t2,?l3) & succeeds subterm(?t1,?t2),
     [succeeds member(?t2,?l1) \/ succeeds member(?t2,?l2) by 
       lemma(append:member:3),
      cases(succeeds member(?t2,?l1),
       [all t1: succeeds subtermL(?t1,?l1) => succeeds member(?t1,?l) by 
         elimination(subterms_termL,2),
        succeeds member(?t1,?l)],
       succeeds member(?t2,?l2),
       [all t1: succeeds subtermL(?t1,?l2) => succeeds member(?t1,?l) by 
         elimination(subterms_termL,2),
        succeeds member(?t1,?l)],
       succeeds member(?t1,?l))],
     succeeds member(?t1,?l))],
   succeeds member(?t1,?l)),
  subterms_termL(?l3,?l) by introduction(subterms_termL,2)],
 subterms_termL(?l3,?l))
).

:- lemma(subterms_closed:app,
all [l1,l2]: subterms_closed(?l1) & subterms_closed(?l2) =>
  subterms_closed(?l1 ** ?l2),
assume(subterms_closed(?l1) & subterms_closed(?l2),
 [succeeds termL(?l1) & subterms_termL(?l1,?l1) by 
   elimination(subterms_closed,1),
  succeeds termL(?l2) & subterms_termL(?l2,?l2) by 
   elimination(subterms_closed,1),
  succeeds termL(?l1 ** ?l2) by corollary(termL:app),
  succeeds list(?l1) by lemma(termL:list),
  succeeds list(?l2) by lemma(termL:list),
  sub(?l1,?l1 ** ?l2) by lemma(sub:app:1),
  subterms_termL(?l1,?l1 ** ?l2) by lemma(subterms_termL:monotonic),
  sub(?l2,?l1 ** ?l2) by lemma(sub:app:2),
  subterms_termL(?l2,?l1 ** ?l2) by lemma(subterms_termL:monotonic),
  succeeds append(?l1,?l2,?l1 ** ?l2) by existence(**,2),
  subterms_termL(?l1 ** ?l2,?l1 ** ?l2) by lemma(subterms_termL:app),
  subterms_closed(?l1 ** ?l2) by introduction(subterms_closed,1)],
 subterms_closed(?l1 ** ?l2))
).

:- lemma(subterms_closed:atomic,
all x: succeeds atomic(?x) => subterms_closed([$(?x)]) &
  subterms_term($(?x),[$(?x)]),
assume(succeeds atomic(?x),
 [assume(succeeds subterm(?t1,$(?x)),
   [def succeeds subterm(?t1,$(?x)) by completion,
    succeeds member(?t1,[$(?x)])],
   succeeds member(?t1,[$(?x)])),
  subterms_term($(?x),[$(?x)]) by introduction(subterms_term,2),
  assume(succeeds subtermL(?t1,[$(?x)]),
   [def succeeds subtermL(?t1,[$(?x)]) by completion,
    exist(t2,
     succeeds member(?t2,[$(?x)]) & succeeds subterm(?t1,?t2),
     [def succeeds member(?t2,[$(?x)]) by completion,
      cases(?t2 = $(?x),
       [],
       succeeds member(?t2,[]),
       [def succeeds member(?t2,[]) by completion,ff],
       succeeds member(?t1,[$(?x)]))],
     succeeds member(?t1,[$(?x)]))],
   succeeds member(?t1,[$(?x)])),
  subterms_termL([$(?x)],[$(?x)]) by introduction(subterms_termL,2),
  subterms_closed([$(?x)]) by introduction(subterms_closed,1)],
 subterms_closed([$(?x)]) & subterms_term($(?x),[$(?x)]))
).

:- lemma(subterms_closed:compound,
all [l,tl,x]: subterms_closed(?l) & subterms_termL(?tl,?l) &
 succeeds atomic(?x) & succeeds termL(?tl) =>
  subterms_closed([[?x|?tl]|?l]) & subterms_term([?x|?tl],[[?x|?tl]|?l]),
assume(subterms_closed(?l) & subterms_termL(?tl,?l) & succeeds atomic(?x) &
 succeeds termL(?tl),
 [assume(succeeds subterm(?t1,[?x|?tl]),
   [def succeeds subterm(?t1,[?x|?tl]) by completion,
    cases(?t1 = [?x|?tl],
     [],
     succeeds subtermL(?t1,?tl),
     [all t1: succeeds subtermL(?t1,?tl) => succeeds member(?t1,?l) by 
       elimination(subterms_termL,2),
      succeeds member(?t1,[[?x|?tl]|?l])],
     succeeds member(?t1,[[?x|?tl]|?l]))],
   succeeds member(?t1,[[?x|?tl]|?l])),
  subterms_term([?x|?tl],[[?x|?tl]|?l]) by introduction(subterms_term,2),
  succeeds term([?x|?tl]) by sld,
  succeeds termL(?l) & subterms_termL(?l,?l) by 
   elimination(subterms_closed,1),
  succeeds termL([[?x|?tl]|?l]),
  assume(succeeds subtermL(?t1,[[?x|?tl]|?l]),
   [def succeeds subtermL(?t1,[[?x|?tl]|?l]) by completion,
    exist(t2,
     succeeds member(?t2,[[?x|?tl]|?l]) & succeeds subterm(?t1,?t2),
     [def succeeds member(?t2,[[?x|?tl]|?l]) by completion,
      cases(?t2 = [?x|?tl],
       [],
       succeeds member(?t2,?l),
       [all t1: succeeds subtermL(?t1,?l) => succeeds member(?t1,?l) by 
         elimination(subterms_termL,2),
        succeeds member(?t1,[[?x|?tl]|?l])],
       succeeds member(?t1,[[?x|?tl]|?l]))],
     succeeds member(?t1,[[?x|?tl]|?l]))],
   succeeds member(?t1,[[?x|?tl]|?l])),
  subterms_termL([[?x|?tl]|?l],[[?x|?tl]|?l]) by 
   introduction(subterms_termL,2),
  subterms_closed([[?x|?tl]|?l]) by introduction(subterms_closed,1)],
 subterms_closed([[?x|?tl]|?l]) & subterms_term([?x|?tl],[[?x|?tl]|?l]))
).

:- lemma(subterms_closed:nil,
subterms_closed([]) & subterms_termL([],[]),
[assume(succeeds subtermL(?t1,[]),
  [def succeeds subtermL(?t1,[]) by completion,
   exist(t2,
    succeeds member(?t2,[]) & succeeds subterm(?t1,?t2),
    [def succeeds member(?t2,[]) by completion,ff],
    ff)],
  succeeds member(?t1,[])),
 subterms_termL([],[]) by introduction(subterms_termL,2),
 subterms_closed([]) by introduction(subterms_closed,1)]
).

:- lemma(subterms_term:subterms_termL,
all [t,tl,l]: subterms_term(?t,?l) & subterms_termL(?tl,?l) =>
 subterms_termL([?t|?tl],?l),
assume(subterms_term(?t,?l) & subterms_termL(?tl,?l),
 [assume(succeeds subtermL(?t1,[?t|?tl]),
   [def succeeds subtermL(?t1,[?t|?tl]) by completion,
    exist(t2,
     succeeds member(?t2,[?t|?tl]) & succeeds subterm(?t1,?t2),
     [def succeeds member(?t2,[?t|?tl]) by completion,
      cases(?t2 = ?t,
       [all t1: succeeds subterm(?t1,?t) => succeeds member(?t1,?l) by 
         elimination(subterms_term,2),
        succeeds member(?t1,?l)],
       succeeds member(?t2,?tl),
       [all t1: succeeds subtermL(?t1,?tl) => succeeds member(?t1,?l) by 
         elimination(subterms_termL,2),
        succeeds member(?t1,?l)],
       succeeds member(?t1,?l))],
     succeeds member(?t1,?l))],
   succeeds member(?t1,?l)),
  subterms_termL([?t|?tl],?l) by introduction(subterms_termL,2)],
 subterms_termL([?t|?tl],?l))
).

:- lemma(subterms_closed:existence,
(all t: succeeds term(?t) =>
   (ex l: subterms_closed(?l) & subterms_term(?t,?l))) &
(all tl: succeeds termL(?tl) =>
   (ex l: subterms_closed(?l) & subterms_termL(?tl,?l))),
induction(
 [all t: succeeds term(?t) => 
    (ex l: subterms_closed(?l) & subterms_term(?t,?l)),
  all tl: succeeds termL(?tl) => 
    (ex l: subterms_closed(?l) & subterms_termL(?tl,?l))],
 [step([x],
   [succeeds atomic(?x)],
   [subterms_closed([$(?x)]) & subterms_term($(?x),[$(?x)]) by 
     lemma(subterms_closed:atomic),
    ex l: subterms_closed(?l) & subterms_term($(?x),?l)],
   ex l: subterms_closed(?l) & subterms_term($(?x),?l)),
  step([x,tL],
   [ex l: subterms_closed(?l) & subterms_termL(?tL,?l),
    succeeds atomic(?x),
    succeeds termL(?tL)],
   exist(l,
    subterms_closed(?l) & subterms_termL(?tL,?l),
    [subterms_closed([[?x|?tL]|?l]) & subterms_term([?x|?tL],[[?x|?tL]|?l]) by
      lemma(subterms_closed:compound),
     ex l: subterms_closed(?l) & subterms_term([?x|?tL],?l)],
    ex l: subterms_closed(?l) & subterms_term([?x|?tL],?l)),
   ex l: subterms_closed(?l) & subterms_term([?x|?tL],?l)),
  step([],
   [],
   [subterms_closed([]) & subterms_termL([],[]) by 
     lemma(subterms_closed:nil),
    ex l: subterms_closed(?l) & subterms_termL([],?l)],
   ex l: subterms_closed(?l) & subterms_termL([],?l)),
  step([t,tL],
   [ex l: subterms_closed(?l) & subterms_term(?t,?l),
    ex l: subterms_closed(?l) & subterms_termL(?tL,?l),
    succeeds term(?t),
    succeeds termL(?tL)],
   exist(l1,
    subterms_closed(?l1) & subterms_term(?t,?l1),
    exist(l2,
     subterms_closed(?l2) & subterms_termL(?tL,?l2),
     [subterms_closed(?l1 ** ?l2) by lemma(subterms_closed:app),
      succeeds termL(?l1) & subterms_termL(?l1,?l1) by 
       elimination(subterms_closed,1),
      succeeds list(?l1) by lemma(termL:list),
      succeeds termL(?l2) & subterms_termL(?l2,?l2) by 
       elimination(subterms_closed,1),
      succeeds list(?l2) by lemma(termL:list),
      sub(?l1,?l1 ** ?l2) by lemma(sub:app:1),
      subterms_term(?t,?l1 ** ?l2) by lemma(subterms_term:monotonic),
      sub(?l2,?l1 ** ?l2) by lemma(sub:app:2),
      subterms_termL(?tL,?l1 ** ?l2) by lemma(subterms_termL:monotonic),
      subterms_termL([?t|?tL],?l1 ** ?l2) by 
       lemma(subterms_term:subterms_termL),
      ex l: subterms_closed(?l) & subterms_termL([?t|?tL],?l)],
     ex l: subterms_closed(?l) & subterms_termL([?t|?tL],?l)),
    ex l: subterms_closed(?l) & subterms_termL([?t|?tL],?l)),
   ex l: subterms_closed(?l) & subterms_termL([?t|?tL],?l))])
).

:- corollary(subterms_term:list:existence,
all t: succeeds term(?t) => 
  (ex l: succeeds list(?l) & subterms_term(?t,?l)),
assume(succeeds term(?t),
 [ex l: subterms_closed(?l) & subterms_term(?t,?l) by 
   lemma(subterms_closed:existence),
  exist(l,
   subterms_closed(?l) & subterms_term(?t,?l),
   [succeeds termL(?l) & subterms_termL(?l,?l) by 
     elimination(subterms_closed,1),
    succeeds list(?l) by lemma(termL:list),
    ex l: succeeds list(?l) & subterms_term(?t,?l)],
   ex l: succeeds list(?l) & subterms_term(?t,?l))],
 ex l: succeeds list(?l) & subterms_term(?t,?l))
).

:- corollary(subterms_termL:list:existence,
all tl: succeeds termL(?tl) =>
   (ex l: succeeds list(?l) & subterms_termL(?tl,?l)),
assume(succeeds termL(?tl),
 [ex l: subterms_closed(?l) & subterms_termL(?tl,?l) by 
   lemma(subterms_closed:existence),
  exist(l,
   subterms_closed(?l) & subterms_termL(?tl,?l),
   [succeeds termL(?l) & subterms_termL(?l,?l) by 
     elimination(subterms_closed,1),
    succeeds list(?l) by lemma(termL:list),
    ex l: succeeds list(?l) & subterms_termL(?tl,?l)],
   ex l: succeeds list(?l) & subterms_termL(?tl,?l))],
 ex l: succeeds list(?l) & subterms_termL(?tl,?l))
).

:- lemma(subterms_class:subterms_partition:existence,
(all c: succeeds class(?c) =>
   (ex l: succeeds list(?l) & subterms_class(?c,?l))) &
(all p: succeeds partition(?p) =>
   (ex l: succeeds list(?l) & subterms_partition(?p,?l))),
induction(
 [all c: succeeds class(?c) => 
    (ex l: succeeds list(?l) & subterms_class(?c,?l)),
  all p: succeeds partition(?p) => 
    (ex l: succeeds list(?l) & subterms_partition(?p,?l))],
 [step([t,p],
   [ex l: succeeds list(?l) & subterms_partition(?p,?l),
    succeeds term(?t),
    succeeds partition(?p),
    fails partition_member(?t,?p),
    fails not_var_class(?t,?p)],
   exist(l1,
    succeeds list(?l1) & subterms_partition(?p,?l1),
    [ex l2: succeeds list(?l2) & subterms_term(?t,?l2) by 
      corollary(subterms_term:list:existence),
     exist(l2,
      succeeds list(?l2) & subterms_term(?t,?l2),
      [succeeds list(?l1 ** ?l2) by corollary(app:types:1),
       all t: succeeds partition_member(?t,?p) => subterms_term(?t,?l1) by 
	elimination(subterms_partition,2),
       assume(succeeds class_member(?s,cl(?t,?p)),
	[def succeeds class_member(?s,cl(?t,?p)) by completion,
         cases(?s = ?t,
          [sub(?l2,?l1 ** ?l2) by lemma(sub:app:2),
	   subterms_term(?t,?l1 ** ?l2) by lemma(subterms_term:monotonic),
	   subterms_term(?s,?l1 ** ?l2)],
          succeeds partition_member(?s,?p),
          [subterms_term(?s,?l1),
	   sub(?l1,?l1 ** ?l2) by lemma(sub:app:1),
	   subterms_term(?s,?l1 ** ?l2) by lemma(subterms_term:monotonic)],
          subterms_term(?s,?l1 ** ?l2))],
	subterms_term(?s,?l1 ** ?l2)),
       subterms_class(cl(?t,?p),?l1 ** ?l2) by 
	introduction(subterms_class,2),
       ex l: succeeds list(?l) & subterms_class(cl(?t,?p),?l)],
      ex l: succeeds list(?l) & subterms_class(cl(?t,?p),?l))],
    ex l: succeeds list(?l) & subterms_class(cl(?t,?p),?l)),
   ex l: succeeds list(?l) & subterms_class(cl(?t,?p),?l)),
  step([],
   [],
   [assume(succeeds partition_member(?t,[]),
     [def succeeds partition_member(?t,[]) by completion,ff],
     subterms_term(?t,[])),
    subterms_partition([],[]) by introduction(subterms_partition,2),
    succeeds list([]),
    ex l: succeeds list(?l) & subterms_partition([],?l)],
   ex l: succeeds list(?l) & subterms_partition([],?l)),
  step([c,p],
   [ex l: succeeds list(?l) & subterms_class(?c,?l),
    ex l: succeeds list(?l) & subterms_partition(?p,?l),
    succeeds class(?c),
    succeeds partition(?p),
    succeeds disjoint(?c,?p)],
   exist(l1,
    succeeds list(?l1) & subterms_class(?c,?l1),
    exist(l2,
     succeeds list(?l2) & subterms_partition(?p,?l2),
     [succeeds list(?l1 ** ?l2) by corollary(app:types:1),
      all t: succeeds class_member(?t,?c) => subterms_term(?t,?l1) by 
       elimination(subterms_class,2),
      all t: succeeds partition_member(?t,?p) => subterms_term(?t,?l2) by
       elimination(subterms_partition,2),
      assume(succeeds partition_member(?t,[?c|?p]),
       [def succeeds partition_member(?t,[?c|?p]) by completion,
        cases(succeeds class_member(?t,?c),
         [subterms_term(?t,?l1),
	  sub(?l1,?l1 ** ?l2) by lemma(sub:app:1),
	  subterms_term(?t,?l1 ** ?l2) by lemma(subterms_term:monotonic)],
         succeeds partition_member(?t,?p),
         [subterms_term(?t,?l2),
	  sub(?l2,?l1 ** ?l2) by lemma(sub:app:2),
	  subterms_term(?t,?l1 ** ?l2) by lemma(subterms_term:monotonic)],
         subterms_term(?t,?l1 ** ?l2))],
       subterms_term(?t,?l1 ** ?l2)),
      subterms_partition([?c|?p],?l1 ** ?l2) by 
       introduction(subterms_partition,2),
      ex l: succeeds list(?l) & subterms_partition([?c|?p],?l)],
     ex l: succeeds list(?l) & subterms_partition([?c|?p],?l)),
    ex l: succeeds list(?l) & subterms_partition([?c|?p],?l)),
   ex l: succeeds list(?l) & subterms_partition([?c|?p],?l))])
).

:- lemma(subterms_closed:sub,
all [f,tl,l]: subterms_closed(?l) & succeeds member([?f|?tl],?l) =>
  sub(?tl,?l),
assume(subterms_closed(?l) & succeeds member([?f|?tl],?l),
 [assume(succeeds member(?x,?tl),
   [succeeds termL(?l) & subterms_termL(?l,?l) by 
     elimination(subterms_closed,1),
    all t1: succeeds subtermL(?t1,?l) => succeeds member(?t1,?l) by 
     elimination(subterms_termL,2),
    succeeds subterm(?x,?x) by sld,
    succeeds subtermL(?x,?tl) by sld,
    succeeds subterm(?x,[?f|?tl]) by sld,
    succeeds subtermL(?x,?l) by sld,
    succeeds member(?x,?l)],
   succeeds member(?x,?l)),
  sub(?tl,?l) by introduction(sub,2)],
 sub(?tl,?l))
).

:- lemma(subterms_termL:sub,
all [tl,l]: subterms_termL(?tl,?l) => sub(?tl,?l),
assume(subterms_termL(?tl,?l),
 [assume(succeeds member(?x,?tl),
   [all t1: succeeds subtermL(?t1,?tl) => succeeds member(?t1,?l) by 
     elimination(subterms_termL,2),
    succeeds subterm(?x,?x) by sld,
    succeeds subtermL(?x,?tl) by sld,
    succeeds member(?x,?l)],
   succeeds member(?x,?l)),
  sub(?tl,?l) by introduction(sub,2)],
 sub(?tl,?l))
).

%-----------------------------------------------------------------------
% part1
%-----------------------------------------------------------------------

:- lemma(termL:member:types,
all [t,tl]: succeeds termL(?tl) & succeeds member(?t,?tl) =>
  succeeds term(?t),
[induction(
  [all tl: succeeds termL(?tl) => 
     (all t: succeeds member(?t,?tl) => succeeds term(?t))],
  [step([],
    [],
    assume(succeeds member(?t,[]),
     [def succeeds member(?t,[]) by completion,
      (ex x: ?t = $(?x) & succeeds atomic(?x)) \/
      (ex [x,tL]: ?t = [?x|?tL] & succeeds atomic(?x) & 
	succeeds termL(?tL)),
      succeeds term(?t) by completion],
     succeeds term(?t)),
    all t: succeeds member(?t,[]) => succeeds term(?t)),
   step([t,tL],
    [all t: succeeds member(?t,?tL) => succeeds term(?t),
     succeeds term(?t),
     succeeds termL(?tL)],
    assume(succeeds member(?0,[?t|?tL]),
     [def succeeds member(?0,[?t|?tL]) by completion,
      cases(?0 = ?t,
       [],
       succeeds member(?0,?tL),
       [],
       succeeds term(?0))],
     succeeds term(?0)),
    all 0: succeeds member(?0,[?t|?tL]) => succeeds term(?0))]),
 assume(succeeds termL(?tl) & succeeds member(?t,?tl),
  [all t: succeeds member(?t,?tl) => succeeds term(?t),
   succeeds member(?t,?tl) => succeeds term(?t),
   succeeds term(?t)],
  succeeds term(?t))]
).

:- lemma(subterm:subtermL:types,
(all [t1,t2]: succeeds subterm(?t1,?t2) =>
   (succeeds term(?t2) => succeeds term(?t1))) &
(all [t,tl]: succeeds subtermL(?t,?tl) =>
   (succeeds termL(?tl) => succeeds term(?t))),
induction(
 [all [t1,t2]: succeeds subterm(?t1,?t2) => succeeds term(?t2) => 
     succeeds term(?t1),
  all [t,tl]: succeeds subtermL(?t,?tl) => succeeds termL(?tl) => 
     succeeds term(?t)],
 [step([t],[],[],succeeds term(?t) => succeeds term(?t)),
  step([t,0,tL],
   [succeeds termL(?tL) => succeeds term(?t),
    succeeds subtermL(?t,?tL)],
   assume(succeeds term([?0|?tL]),
    [def succeeds term([?0|?tL]) by completion],
    succeeds term(?t)),
   succeeds term([?0|?tL]) => succeeds term(?t)),
  step([t1,tL,t2],
   [succeeds term(?t2) => succeeds term(?t1),
    succeeds member(?t2,?tL),
    succeeds subterm(?t1,?t2)],
   assume(succeeds termL(?tL),
    succeeds term(?t1) by lemma(termL:member:types),
    succeeds term(?t1)),
   succeeds termL(?tL) => succeeds term(?t1))])
).

:- corollary(subterm:types,
all [t1,t2]: succeeds subterm(?t1,?t2) & succeeds term(?t2) =>
  succeeds term(?t1),
assume(succeeds subterm(?t1,?t2) & succeeds term(?t2),
 [all [t1,t2]: succeeds subterm(?t1,?t2) => succeeds term(?t2) => 
     succeeds term(?t1) by lemma(subterm:subtermL:types),
  succeeds subterm(?t1,?t2) => succeeds term(?t2) => 
     succeeds term(?t1),
  succeeds term(?t2) => succeeds term(?t1),
  succeeds term(?t1)],
 succeeds term(?t1))
).

:- lemma(term:termL:gr,
(all t: succeeds term(?t) => gr(?t)) &
(all tl: succeeds termL(?tl) => gr(?tl)),
induction(
 [all t: succeeds term(?t) => gr(?t),
  all tl: succeeds termL(?tl) => gr(?tl)],
 [step([x],[succeeds atomic(?x)],gr(?x) by axiom(atomic:gr),gr($(?x))),
  step([x,tL],
   [gr(?tL),
    succeeds atomic(?x),
    succeeds termL(?tL)],
   gr(?x) by axiom(atomic:gr),
   gr([?x|?tL])),
  step([],
   [],
   [],
   gr([])),
  step([t,tL],
   [gr(?t),
    gr(?tL),
    succeeds term(?t),
    succeeds termL(?tL)],
   [],
   gr([?t|?tL]))])
).

:- corollary(term:gr,
all t: succeeds term(?t) => gr(?t),
all t: succeeds term(?t) => gr(?t) by lemma(term:termL:gr)
).

:- lemma(substitution:gr,
all s: succeeds substitution(?s) => gr(?s),
induction([all s: succeeds substitution(?s) => gr(?s)],
 [step([],[],[],gr([])),
  step([x,t,s],
   [gr(?s),
    succeeds atomic(?x),
    succeeds term(?t),
    succeeds substitution(?s),
    fails domain(?x,?s)],
   [def succeeds substitution(?s) by completion,
    gr(?x) by axiom(atomic:gr),
    gr(?t) by corollary(term:gr)],
   gr([bind(?x,?t)|?s]))])
).

:- lemma(assoc:termination,
all [x,s,t]: succeeds substitution(?s) & succeeds atomic(?x) =>
  terminates assoc(?x,?s,?t),
[induction(
  [all s: succeeds substitution(?s) => 
     (all [x,t]: succeeds atomic(?x) => terminates assoc(?x,?s,?t))],
  [step([],
    [],
    succeeds atomic(?x) => terminates assoc(?x,[],?t),
    all [x,t]: succeeds atomic(?x) => terminates assoc(?x,[],?t)),
   step([x,t,s],
    [all [x,t]: succeeds atomic(?x) => terminates assoc(?x,?s,?t),
     succeeds atomic(?x),
     succeeds term(?t),
     succeeds substitution(?s),
     fails domain(?x,?s)],
    assume(succeeds atomic(?0),
     [ex t: succeeds assoc(?0,?s,?t) by lemma(assoc:existence),
      gr(?s) by lemma(substitution:gr),
      gr(?0) by axiom(atomic:gr),
      gr(?x) by axiom(atomic:gr),
      terminates assoc(?0,[bind(?x,?t)|?s],?1) by completion],
     terminates assoc(?0,[bind(?x,?t)|?s],?1)),
    all [0,1]: succeeds atomic(?0) => 
      terminates assoc(?0,[bind(?x,?t)|?s],?1))]),
 assume(succeeds substitution(?s) & succeeds atomic(?x),
  [all [x,t]: succeeds atomic(?x) => terminates assoc(?x,?s,?t),
   succeeds atomic(?x) => terminates assoc(?x,?s,?t),
   terminates assoc(?x,?s,?t)],
  terminates assoc(?x,?s,?t))]
).

:- lemma(apply:applyL:termination,
(all t1: succeeds term(?t1) =>
   (all [s,t2]: succeeds substitution(?s) =>
    terminates apply(?t1,?s,?t2))) &
(all tl1: succeeds termL(?tl1) =>
   (all [s,tl2]: succeeds substitution(?s) =>
      terminates applyL(?tl1,?s,?tl2))),
induction(
 [all t1: succeeds term(?t1) => 
    (all [s,t2]: succeeds substitution(?s) => terminates apply(?t1,?s,?t2)),
  all tl1: succeeds termL(?tl1) => 
    (all [s,tl2]: succeeds substitution(?s) => 
       terminates applyL(?tl1,?s,?tl2))],
 [step([x],
   [succeeds atomic(?x)],
   assume(succeeds substitution(?s),
    terminates apply($(?x),?s,?t2) by lemma(assoc:termination),
    terminates apply($(?x),?s,?t2)),
   all [s,t2]: succeeds substitution(?s) => terminates apply($(?x),?s,?t2)),
  step([x,tL],
   [all [s,tl2]: succeeds substitution(?s) => 
      terminates applyL(?tL,?s,?tl2),
    succeeds atomic(?x),
    succeeds termL(?tL)],
   assume(succeeds substitution(?s),
    [?t2 = [?x|?t2L] => terminates applyL(?tL,?s,?t2L),
     terminates apply([?x|?tL],?s,?t2) by completion],
    terminates apply([?x|?tL],?s,?t2)),
   all [s,t2]: succeeds substitution(?s) => 
     terminates apply([?x|?tL],?s,?t2)),
  step([],
   [],
   succeeds substitution(?s) => terminates applyL([],?s,?tl2),
   all [s,tl2]: succeeds substitution(?s) => terminates applyL([],?s,?tl2)),
  step([t,tL],
   [all [s,t2]: succeeds substitution(?s) => terminates apply(?t,?s,?t2),
    all [s,tl2]: succeeds substitution(?s) => 
      terminates applyL(?tL,?s,?tl2),
    succeeds term(?t),
    succeeds termL(?tL)],
   assume(succeeds substitution(?s),
    [?tl2 = [?t2|?t2L] => 
      terminates (apply(?t,?s,?t2) & applyL(?tL,?s,?t2L)),
     terminates applyL([?t|?tL],?s,?tl2) by completion],
    terminates applyL([?t|?tL],?s,?tl2)),
   all [s,tl2]: succeeds substitution(?s) => 
     terminates applyL([?t|?tL],?s,?tl2))])
).

:- corollary(apply:termination,
all [t1,s,t2]: succeeds term(?t1) & succeeds substitution(?s) =>
  terminates apply(?t1,?s,?t2),
assume(succeeds term(?t1) & succeeds substitution(?s),
 [all t1: succeeds term(?t1) => 
    (all [s,t2]: succeeds substitution(?s) => terminates apply(?t1,?s,?t2)) by
   lemma(apply:applyL:termination),
  all [s,t2]: succeeds substitution(?s) => terminates apply(?t1,?s,?t2),
  terminates apply(?t1,?s,?t2)],
 terminates apply(?t1,?s,?t2))
).

:- lemma(partition:list,
all p: succeeds partition(?p) => succeeds list(?p),
induction([all p: succeeds partition(?p) => succeeds list(?p)],
 [step([],[],[],
   succeeds list([])),
  step([c,p],
   [succeeds list(?p),
    succeeds class(?c),
    succeeds partition(?p),
    succeeds disjoint(?c,?p)],
   [],
   succeeds list([?c|?p]))])
).

:- lemma(class:partition:gr,
(all c: succeeds class(?c) => gr(?c)) &
(all p: succeeds partition(?p) => gr(?p)),
induction(
 [all c: succeeds class(?c) => gr(?c),
  all p: succeeds partition(?p) => gr(?p)],
 [step([t,p],
   [gr(?p),
    succeeds term(?t),
    succeeds partition(?p),
    fails partition_member(?t,?p),
    fails not_var_class(?t,?p)],
   gr(cl(?t,?p)) by lemma(term:termL:gr),
   gr(cl(?t,?p))),
  step([],
   [],
   [],
   gr([])),
  step([c,p],
   [gr(?c),
    gr(?p),
    succeeds class(?c),
    succeeds partition(?p),
    succeeds disjoint(?c,?p)],
   [],
   gr([?c|?p]))])
).

:- corollary(class:gr,
all c: succeeds class(?c) => gr(?c),
all c: succeeds class(?c) => gr(?c) by lemma(class:partition:gr)
).

:- corollary(partition:gr,
all p: succeeds partition(?p) => gr(?p),
all p: succeeds partition(?p) => gr(?p) by lemma(class:partition:gr)
).

:- lemma(class_member:partition_member:types,
(all [t,c]: succeeds class_member(?t,?c) =>
   (succeeds class(?c) => succeeds term(?t))) &
(all [t,p]: succeeds partition_member(?t,?p) =>
   (succeeds partition(?p) => succeeds term(?t))),
induction(
 [all [t,c]: succeeds class_member(?t,?c) => succeeds class(?c) => 
     succeeds term(?t),
  all [t,p]: succeeds partition_member(?t,?p) => succeeds partition(?p) => 
     succeeds term(?t)],
 [step([t,0],
   [],
   assume(succeeds class(cl(?t,?0)),
    [def succeeds class(cl(?t,?0)) by completion,succeeds term(?t)],
    succeeds term(?t)),
   succeeds class(cl(?t,?0)) => succeeds term(?t)),
  step([t,0,p],
   [succeeds partition(?p) => succeeds term(?t),
    succeeds partition_member(?t,?p)],
   assume(succeeds class(cl(?0,?p)),
    [def succeeds class(cl(?0,?p)) by completion,succeeds term(?t)],
    succeeds term(?t)),
   succeeds class(cl(?0,?p)) => succeeds term(?t)),
  step([t,c,0],
   [succeeds class(?c) => succeeds term(?t),
    succeeds class_member(?t,?c)],
   assume(succeeds partition([?c|?0]),
    [def succeeds partition([?c|?0]) by completion,succeeds term(?t)],
    succeeds term(?t)),
   succeeds partition([?c|?0]) => succeeds term(?t)),
  step([t,0,p],
   [succeeds partition(?p) => succeeds term(?t),
    succeeds partition_member(?t,?p)],
   assume(succeeds partition([?0|?p]),
    [def succeeds partition([?0|?p]) by completion,succeeds term(?t)],
    succeeds term(?t)),
   succeeds partition([?0|?p]) => succeeds term(?t))])
).

:- corollary(class_member:types,
all [t,c]: succeeds class_member(?t,?c) & succeeds class(?c) =>
  succeeds term(?t),
assume(succeeds class_member(?t,?c) & succeeds class(?c),
 [all [t,c]: succeeds class_member(?t,?c) => succeeds class(?c) => 
     succeeds term(?t) by lemma(class_member:partition_member:types),
  succeeds class_member(?t,?c) => succeeds class(?c) => 
     succeeds term(?t),
  succeeds class(?c) => succeeds term(?t),
  succeeds term(?t)],
 succeeds term(?t))
).

:- corollary(partition_member:types,
all [t,p]: succeeds partition_member(?t,?p) & succeeds partition(?p) =>
  succeeds term(?t),
assume(succeeds partition_member(?t,?p) & succeeds partition(?p),
 [all [t,p]: succeeds partition_member(?t,?p) => succeeds partition(?p) => 
     succeeds term(?t) by lemma(class_member:partition_member:types),
  succeeds partition_member(?t,?p) => succeeds partition(?p) => 
     succeeds term(?t),
  succeeds partition(?p) => 
     succeeds term(?t),
  succeeds term(?t)],
 succeeds term(?t))
).

:- lemma(class_member:partition_member:termination,
(all c: succeeds class(?c) =>
   (all t: terminates class_member(?t,?c))) &
(all p: succeeds partition(?p) =>
   (all t: terminates partition_member(?t,?p))),
induction(
 [all c: succeeds class(?c) => (all t: terminates class_member(?t,?c)),
  all p: succeeds partition(?p) => 
    (all t: terminates partition_member(?t,?p))],
 [step([t,p],
   [all t: terminates partition_member(?t,?p),
    succeeds term(?t),
    succeeds partition(?p),
    fails partition_member(?t,?p),
    fails not_var_class(?t,?p)],
   terminates class_member(?0,cl(?t,?p)),
   all 0: terminates class_member(?0,cl(?t,?p))),
  step([],
   [],
   terminates partition_member(?t,[]),
   all t: terminates partition_member(?t,[])),
  step([c,p],
   [all t: terminates class_member(?t,?c),
    all t: terminates partition_member(?t,?p),
    succeeds class(?c),
    succeeds partition(?p),
    succeeds disjoint(?c,?p)],
   terminates partition_member(?t,[?c|?p]),
   all t: terminates partition_member(?t,[?c|?p]))])
).

:- corollary(class_member:termination,
all [t,c]: succeeds class(?c) => terminates class_member(?t,?c),
assume(succeeds class(?c),
 [all c: succeeds class(?c) => (all t: terminates class_member(?t,?c)) by
   lemma(class_member:partition_member:termination),
  all t: terminates class_member(?t,?c),
  terminates class_member(?t,?c)],
 terminates class_member(?t,?c))
).

:- corollary(partition_member:termination,
all [t,p]: succeeds partition(?p) => terminates partition_member(?t,?p),
assume(succeeds partition(?p),
 [all p: succeeds partition(?p) => 
    (all t: terminates partition_member(?t,?p)) by 
   lemma(class_member:partition_member:termination),
  all t: terminates partition_member(?t,?p),
  terminates partition_member(?t,?p)],
 terminates partition_member(?t,?p))
).

:- lemma(find:types,
all [p,t1,t2]: succeeds find(?p,?t1,?t2) & succeeds partition(?p) &
 succeeds term(?t1)  => succeeds term(?t2),
[induction(
  [all [p,t1,t2]: succeeds find(?p,?t1,?t2) => succeeds partition(?p) &
     succeeds term(?t1) => succeeds term(?t2)],
  [step([t],
    [],
    assume(succeeds partition([]) & succeeds term(?t),
     [],
     succeeds term(?t)),
    succeeds partition([]) & succeeds term(?t) => succeeds term(?t)),
   step([c,p,t1,t2,0],
    [succeeds class_member(?t1,?c),
     ?c = cl(?t2,?0)],
    assume(succeeds partition([?c|?p]) & succeeds term(?t1),
     [def succeeds partition([?c|?p]) by completion,
      succeeds class(cl(?t2,?0)),
      def succeeds class(cl(?t2,?0)) by completion,
      succeeds term(?t2)],
     succeeds term(?t2)),
    succeeds partition([?c|?p]) & succeeds term(?t1) => succeeds term(?t2)),
   step([c,p,t1,t2,0],
    [succeeds partition(?p) & succeeds term(?t1) => succeeds term(?t2),
     fails class_member(?t1,?c),
     succeeds find(?p,?t1,?t2)],
    assume(succeeds partition([?c|?p]) & succeeds term(?t1),
     [def succeeds partition([?c|?p]) by completion,
      succeeds term(?t2)],
     succeeds term(?t2)),
    succeeds partition([?c|?p]) & succeeds term(?t1) => succeeds term(?t2))]),
 assume(succeeds find(?p,?t1,?t2) & succeeds partition(?p) &
  succeeds term(?t1),
  [succeeds partition(?p) & succeeds term(?t1) => succeeds term(?t2),
   succeeds partition(?p) & succeeds term(?t1) => succeeds term(?t2),
   succeeds term(?t2)],
  succeeds term(?t2))]
).

:- lemma(find:termination,
all [p,t1,t2]: succeeds partition(?p) & gr(?t1) => terminates find(?p,?t1,?t2),
[induction(
  [all p: succeeds partition(?p) => 
     (all [t1,t2]: gr(?t1) => terminates find(?p,?t1,?t2))],
  [step([],
    [],
    gr(?t1) => terminates find([],?t1,?t2),
    all [t1,t2]: gr(?t1) => terminates find([],?t1,?t2)),
   step([c,p],
    [all [t1,t2]: gr(?t1) => terminates find(?p,?t1,?t2),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(gr(?t1),
     [terminates class_member(?t1,?c) by 
       corollary(class_member:termination),
      terminates (class_member(?t1,?c) & ?c = cl(?t2,?0)),
      gr(?c) by corollary(class:gr),
      terminates (~ class_member(?t1,?c) & find(?p,?t1,?t2)),
      terminates (class_member(?t1,?c) & ?c = cl(?t2,?0)) &
      terminates (~ class_member(?t1,?c) & find(?p,?t1,?t2)),
      all 0: terminates (class_member(?t1,?c) & ?c = cl(?t2,?0)) &
       terminates (~ class_member(?t1,?c) & find(?p,?t1,?t2)),
      terminates find([?c|?p],?t1,?t2) by completion],
     terminates find([?c|?p],?t1,?t2)),
    all [t1,t2]: gr(?t1) => terminates find([?c|?p],?t1,?t2))]),
 assume(succeeds partition(?p) & gr(?t1),
  [all [t1,t2]: gr(?t1) => terminates find(?p,?t1,?t2),
   gr(?t1) => terminates find(?p,?t1,?t2),
   terminates find(?p,?t1,?t2)],
  terminates find(?p,?t1,?t2))]
).

:- lemma(class:singleton,
all t: succeeds term(?t) => succeeds class(cl(?t,[])),
assume(succeeds term(?t),
 [?t = $(?0) => fails partition_member(?1,[]) \/ succeeds var_form(?1),
  all [0,1]: ?t = $(?0) => fails partition_member(?1,[]) \/
    succeeds var_form(?1),
  fails not_var_class(?t,[]) by completion,
  succeeds term(?t) & succeeds partition([]) & 
  fails partition_member(?t,[]) & fails not_var_class(?t,[]),
  succeeds class(cl(?t,[])) by completion],
 succeeds class(cl(?t,[])))
).

:- lemma(find_delete:termination,
all [p1,t,p2,c]: succeeds partition(?p1) & gr(?t) =>
  terminates find_delete(?p1,?t,?p2,?c),
[induction(
  [all p1: succeeds partition(?p1) => 
     (all [t,p2,c]: gr(?t) => terminates find_delete(?p1,?t,?p2,?c))],
  [step([],
    [],
    gr(?t) => terminates find_delete([],?t,?p2,?c),
    all [t,p2,c]: gr(?t) => terminates find_delete([],?t,?p2,?c)),
   step([c,p],
    [all [t,p2,c]: gr(?t) => terminates find_delete(?p,?t,?p2,?c),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(gr(?t),
     [terminates class_member(?t,?c) by 
       corollary(class_member:termination),
      terminates (class_member(?t,?c) & ?0 = ?c & ?p2 = ?p),
      terminates find_delete(?p,?t,?2,?0),
      gr(?c) by corollary(class:gr),
      terminates 
      (~ class_member(?t,?c) & find_delete(?p,?t,?2,?0) & ?p2 = [?c|?2]),
      terminates (class_member(?t,?c) & ?0 = ?c & ?p2 = ?p) &
      terminates 
      (~ class_member(?t,?c) & find_delete(?p,?t,?2,?0) & ?p2 = [?c|?2]),
      all 2: terminates (class_member(?t,?c) & ?0 = ?c & ?p2 = ?p) &
       terminates 
       (~ class_member(?t,?c) & find_delete(?p,?t,?2,?0) & ?p2 = [?c|?2]),
      terminates find_delete([?c|?p],?t,?p2,?0) by completion],
     terminates find_delete([?c|?p],?t,?p2,?0)),
    all [t,p2,0]: gr(?t) => terminates find_delete([?c|?p],?t,?p2,?0))]),
 assume(succeeds partition(?p1) & gr(?t),
  [all [t,p2,c]: gr(?t) => terminates find_delete(?p1,?t,?p2,?c),
   gr(?t) => terminates find_delete(?p1,?t,?p2,?c),
   terminates find_delete(?p1,?t,?p2,?c)],
  terminates find_delete(?p1,?t,?p2,?c))]
).


:- lemma(partition:member,
all [c,p]: succeeds partition(?p) & succeeds member(?c,?p) =>
  succeeds class(?c),
[induction(
  [all p: succeeds partition(?p) => 
     (all c: succeeds member(?c,?p) => succeeds class(?c))],
  [step([],
    [],
    assume(succeeds member(?c,[]),
     [def succeeds member(?c,[]) by completion,ff],
     succeeds class(?c)),
    all c: succeeds member(?c,[]) => succeeds class(?c)),
   step([c,p],
    [all c: succeeds member(?c,?p) => succeeds class(?c),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(succeeds member(?0,[?c|?p]),
     [def succeeds member(?0,[?c|?p]) by completion,
      cases(?0 = ?c,
       [],
       succeeds member(?0,?p),
       [],
       succeeds class(?0))],
     succeeds class(?0)),
    all 0: succeeds member(?0,[?c|?p]) => succeeds class(?0))]),
 assume(succeeds partition(?p) & succeeds member(?c,?p),
  [all c: succeeds member(?c,?p) => succeeds class(?c),
   succeeds member(?c,?p) => succeeds class(?c),
   succeeds class(?c)],
  succeeds class(?c))]
).

:- lemma(not_class_solution:termination,
all [c,s]: succeeds class(?c) & succeeds substitution(?s) =>
  terminates not_class_solution(?c,?s),
assume(succeeds class(?c) & succeeds substitution(?s),
 [terminates class_member(?t1,?c) by corollary(class_member:termination),
  assume(succeeds class_member(?t1,?c),
   [succeeds term(?t1) by corollary(class_member:types),
    terminates class_member(?t2,?c) by 
     corollary(class_member:termination),
    assume(succeeds class_member(?t2,?c),
     [succeeds term(?t2) by corollary(class_member:types),
      terminates apply(?t1,?s,?t3) by corollary(apply:termination),
      assume(succeeds apply(?t1,?s,?t3),
       [succeeds term(?t3) by corollary(apply:types),
	gr(?t3) by corollary(term:gr),
	terminates apply(?t2,?s,?t4) by corollary(apply:termination),
	assume(succeeds apply(?t2,?s,?t4),
	 [succeeds term(?t4) by corollary(apply:types),
	  gr(?t4) by corollary(term:gr)],
	 gr(?t3) & gr(?t4)),
	terminates (apply(?t2,?s,?t4) & ~ ?t3 = ?t4)],
       terminates (apply(?t2,?s,?t4) & ~ ?t3 = ?t4)),
      terminates (apply(?t1,?s,?t3) & apply(?t2,?s,?t4) & ~ ?t3 = ?t4)],
     terminates (apply(?t1,?s,?t3) & apply(?t2,?s,?t4) & ~ ?t3 = ?t4)),
    terminates 
    (class_member(?t2,?c) & apply(?t1,?s,?t3) & apply(?t2,?s,?t4) &
     ~ ?t3 = ?t4)],
   terminates 
   (class_member(?t2,?c) & apply(?t1,?s,?t3) & apply(?t2,?s,?t4) &
    ~ ?t3 = ?t4)),
  terminates 
  (class_member(?t1,?c) & class_member(?t2,?c) & apply(?t1,?s,?t3) &
   apply(?t2,?s,?t4) & ~ ?t3 = ?t4),
  all [t1,t2,t3,t4]: 
   terminates 
   (class_member(?t1,?c) & class_member(?t2,?c) & apply(?t1,?s,?t3) &
    apply(?t2,?s,?t4) & ~ ?t3 = ?t4),
  terminates not_class_solution(?c,?s) by completion],
 terminates not_class_solution(?c,?s))
).

:- lemma(class_solution:termination,
all [c,s]: succeeds class(?c) & succeeds substitution(?s) =>
  terminates class_solution(?c,?s),
assume(succeeds class(?c) & succeeds substitution(?s),
 [terminates not_class_solution(?c,?s) by 
   lemma(not_class_solution:termination),
  gr(?c) by corollary(class:gr),
  gr(?s) by lemma(substitution:gr),
  terminates not_class_solution(?c,?s) & gr(?c) & gr(?s),
  terminates class_solution(?c,?s) by completion],
 terminates class_solution(?c,?s))
).

:- lemma(partition_solution:termination,
all [p,s]: succeeds partition(?p) & succeeds substitution(?s) =>
  terminates partition_solution(?p,?s),
[induction(
  [all p: succeeds partition(?p) => 
     (all s: succeeds substitution(?s) => 
        terminates partition_solution(?p,?s))],
  [step([],
    [],
    succeeds substitution(?s) => terminates partition_solution([],?s),
    all s: succeeds substitution(?s) => 
      terminates partition_solution([],?s)),
   step([c,p],
    [all s: succeeds substitution(?s) => 
       terminates partition_solution(?p,?s),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(succeeds substitution(?s),
     [terminates class_solution(?c,?s) by 
       lemma(class_solution:termination),
      terminates partition_solution(?p,?s),
      terminates (class_solution(?c,?s) & partition_solution(?p,?s)),
      terminates partition_solution([?c|?p],?s) by completion],
     terminates partition_solution([?c|?p],?s)),
    all s: succeeds substitution(?s) => 
      terminates partition_solution([?c|?p],?s))]),
 assume(succeeds partition(?p) & succeeds substitution(?s),
  [all s: succeeds substitution(?s) => terminates partition_solution(?p,?s),
   succeeds substitution(?s) => terminates partition_solution(?p,?s),
   terminates partition_solution(?p,?s)],
  terminates partition_solution(?p,?s))]
).

:- lemma(class_solution:characterization:1,
all [c,s,t1,t2]: succeeds class(?c) & succeeds substitution(?s) &
 succeeds class_solution(?c,?s) & succeeds class_member(?t1,?c) &
 succeeds class_member(?t2,?c) => succeeds unifier(?t1,?t2,?s),
assume(succeeds class(?c) & succeeds substitution(?s) &
 succeeds class_solution(?c,?s) & succeeds class_member(?t1,?c) &
 succeeds class_member(?t2,?c),
 [succeeds term(?t1) by corollary(class_member:types),
  succeeds term(?t2) by corollary(class_member:types),
  ex s1: succeeds apply(?t1,?s,?s1) by corollary(apply:existence),
  exist(s1,
   succeeds apply(?t1,?s,?s1),
   [ex s2: succeeds apply(?t2,?s,?s2) by corollary(apply:existence),
    exist(s2,
     succeeds apply(?t2,?s,?s2),
     [def succeeds class_solution(?c,?s) by completion,
      def fails not_class_solution(?c,?s) by completion,
      fails class_member(?t1,?c) \/ fails class_member(?t2,?c) \/
      fails apply(?t1,?s,?s1) \/ fails apply(?t2,?s,?s2) \/ ?s1 = ?s2,
      cases(
       [case(fails class_member(?t1,?c),[]),
        case(fails class_member(?t2,?c),
         []),
        case(fails apply(?t1,?s,?s1),
         []),
        case(fails apply(?t2,?s,?s2),
         []),
        case(?s1 = ?s2,
         [])],
       ?s1 = ?s2),
      succeeds apply(?t2,?s,?s1),
      succeeds unifier(?t1,?t2,?s) by sld],
     succeeds unifier(?t1,?t2,?s))],
   succeeds unifier(?t1,?t2,?s))],
 succeeds unifier(?t1,?t2,?s))
).

:- lemma(class_solution:characterization:2,
all [c,s]: succeeds class(?c) & succeeds substitution(?s) &
 (all [t1,t2]: succeeds class_member(?t1,?c) &
   succeeds class_member(?t2,?c) => succeeds unifier(?t1,?t2,?s)) =>
  succeeds class_solution(?c,?s),
assume(succeeds class(?c) & succeeds substitution(?s) &
 (all [t1,t2]: succeeds class_member(?t1,?c) & 
   succeeds class_member(?t2,?c) => succeeds unifier(?t1,?t2,?s)),
 [terminates not_class_solution(?c,?s) by 
   lemma(not_class_solution:termination),
  succeeds not_class_solution(?c,?s) \/ fails not_class_solution(?c,?s),
  cases(succeeds not_class_solution(?c,?s),
   [def succeeds not_class_solution(?c,?s) by completion,
    exist([t1,t2,t3,t4],
     succeeds class_member(?t1,?c) & succeeds class_member(?t2,?c) &
     succeeds apply(?t1,?s,?t3) & succeeds apply(?t2,?s,?t4) & ?t3 <> ?t4,
     [succeeds unifier(?t1,?t2,?s),
      def succeeds unifier(?t1,?t2,?s) by completion,
      exist(0,
       succeeds apply(?t1,?s,?0) & succeeds apply(?t2,?s,?0),
       [succeeds term(?t1) by corollary(class_member:types),
	?0 = ?t3 by corollary(apply:uniqueness),
	succeeds term(?t2) by corollary(class_member:types),
	?0 = ?t4 by corollary(apply:uniqueness),
	?t3 = ?t4,
	ff],
       ff)],
     ff)],
   fails not_class_solution(?c,?s),
   [],
   succeeds class_solution(?c,?s))],
 succeeds class_solution(?c,?s))
).

:- lemma(partition_solution:member,
all [c,p,s]: succeeds partition_solution(?p,?s) &
 succeeds member(?c,?p) => succeeds class_solution(?c,?s),
[induction(
  [all [p,s]: succeeds partition_solution(?p,?s) => 
     (all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s))],
  [step([0],
    [],
    assume(succeeds member(?c,[]),
     [def succeeds member(?c,[]) by completion,ff],
     succeeds class_solution(?c,?0)),
    all c: succeeds member(?c,[]) => succeeds class_solution(?c,?0)),
   step([c,p,s],
    [all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s),
     succeeds class_solution(?c,?s),
     succeeds partition_solution(?p,?s)],
    assume(succeeds member(?c1,[?c|?p]),
     [def succeeds member(?c1,[?c|?p]) by completion,
      cases(?c1 = ?c,
       [],
       succeeds member(?c1,?p),
       [],
       succeeds class_solution(?c1,?s))],
     succeeds class_solution(?c1,?s)),
    all c1: succeeds member(?c1,[?c|?p]) => succeeds class_solution(?c1,?s))]),
 assume(succeeds partition_solution(?p,?s) & succeeds member(?c,?p),
  [all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s),
   succeeds member(?c,?p) => succeeds class_solution(?c,?s),
   succeeds class_solution(?c,?s)],
  succeeds class_solution(?c,?s))]
).

:- lemma(partition_member:member:class_member,
all [t,c,p]: succeeds member(?c,?p) & succeeds class_member(?t,?c) =>
  succeeds partition_member(?t,?p),
[induction(
  [all [c,p]: succeeds member(?c,?p) => 
     (all t: succeeds class_member(?t,?c) => 
        succeeds partition_member(?t,?p))],
  [step([x,l],
    [],
    assume(succeeds class_member(?t,?x),
     [],
     succeeds partition_member(?t,[?x|?l])),
    all t: succeeds class_member(?t,?x) => 
      succeeds partition_member(?t,[?x|?l])),
   step([x,y,l],
    [all t: succeeds class_member(?t,?x) => 
       succeeds partition_member(?t,?l),
     succeeds member(?x,?l)],
    assume(succeeds class_member(?t,?x),
     [],
     succeeds partition_member(?t,[?y|?l])),
    all t: succeeds class_member(?t,?x) => 
      succeeds partition_member(?t,[?y|?l]))]),
 assume(succeeds member(?c,?p) & succeeds class_member(?t,?c),
  [all t: succeeds class_member(?t,?c) => succeeds partition_member(?t,?p),
   succeeds class_member(?t,?c) => succeeds partition_member(?t,?p),
   succeeds partition_member(?t,?p)],
  succeeds partition_member(?t,?p))]
).

:- lemma(class_solution:member,
all [c,p,s,t]: succeeds class(cl(?t,?p)) & succeeds substitution(?s) &
 succeeds class_solution(cl(?t,?p),?s) & succeeds member(?c,?p) =>
  succeeds class_solution(?c,?s),
assume(succeeds class(cl(?t,?p)) & succeeds substitution(?s) &
 succeeds class_solution(cl(?t,?p),?s) & succeeds member(?c,?p),
 [def succeeds class(cl(?t,?p)) by completion,
  succeeds class(?c) by lemma(partition:member),
  assume(succeeds class_member(?t1,?c) & succeeds class_member(?t2,?c),
   [succeeds partition_member(?t1,?p) by 
     lemma(partition_member:member:class_member),
    succeeds class_member(?t1,cl(?t,?p)) by sld,
    succeeds partition_member(?t2,?p) by 
     lemma(partition_member:member:class_member),
    succeeds class_member(?t2,cl(?t,?p)) by sld,
    succeeds unifier(?t1,?t2,?s) by 
     lemma(class_solution:characterization:1)],
   succeeds unifier(?t1,?t2,?s)),
  succeeds class_solution(?c,?s) by 
   lemma(class_solution:characterization:2)],
 succeeds class_solution(?c,?s))
).

:- lemma(partition_solution:characterization,
all [p,s]: succeeds partition(?p) & succeeds substitution(?s) &
 (all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s)) =>
  succeeds partition_solution(?p,?s),
[induction(
  [all p: succeeds partition(?p) => 
     (all s: succeeds substitution(?s) &
       (all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s)) =>
        succeeds partition_solution(?p,?s))],
  [step([],
    [],
    succeeds substitution(?s) &
    (all c: succeeds member(?c,[]) => succeeds class_solution(?c,?s)) => 
     succeeds partition_solution([],?s),
    all s: succeeds substitution(?s) &
     (all c: succeeds member(?c,[]) => succeeds class_solution(?c,?s)) => 
      succeeds partition_solution([],?s)),
   step([c,p],
    [all s: succeeds substitution(?s) &
      (all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s)) =>
       succeeds partition_solution(?p,?s),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(succeeds substitution(?s) &
     (all c1: succeeds member(?c1,[?c|?p]) =>
	succeeds class_solution(?c1,?s)),
     [succeeds member(?c,[?c|?p]) by sld,
      succeeds class_solution(?c,?s),
      assume(succeeds member(?c1,?p),
       [succeeds member(?c1,[?c|?p]) by sld,
	succeeds class_solution(?c1,?s)],
       succeeds class_solution(?c1,?s)),
      succeeds partition_solution(?p,?s),
      succeeds partition_solution([?c|?p],?s) by sld],
     succeeds partition_solution([?c|?p],?s)),
    all s: succeeds substitution(?s) &
     (all c1: succeeds member(?c1,[?c|?p]) =>
	succeeds class_solution(?c1,?s)) =>
      succeeds partition_solution([?c|?p],?s))]),
 assume(succeeds partition(?p) & succeeds substitution(?s) &
  (all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s)),
  [all s: succeeds substitution(?s) &
    (all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s)) => 
     succeeds partition_solution(?p,?s),
   succeeds substitution(?s) &
   (all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s)) => 
    succeeds partition_solution(?p,?s),
   succeeds partition_solution(?p,?s)],
  succeeds partition_solution(?p,?s))]
).

:- lemma(class_solution:partition_solution,
all [p,s,t]: succeeds class(cl(?t,?p)) & succeeds substitution(?s) &
 succeeds class_solution(cl(?t,?p),?s) =>
  succeeds partition_solution(?p,?s),
assume(succeeds class(cl(?t,?p)) & succeeds substitution(?s) &
 succeeds class_solution(cl(?t,?p),?s),
 [assume(succeeds member(?c,?p),
   succeeds class_solution(?c,?s) by lemma(class_solution:member),
   succeeds class_solution(?c,?s)),
  all c: succeeds member(?c,?p) => succeeds class_solution(?c,?s),
  def succeeds class(cl(?t,?p)) by completion,
  succeeds partition_solution(?p,?s) by 
   lemma(partition_solution:characterization)],
 succeeds partition_solution(?p,?s))
).

%-----------------------------------------------------------------------
% part2
%-----------------------------------------------------------------------

:- lemma(not_disjoint:termination,
all [c,p]: succeeds class(?c) & succeeds partition(?p) =>
  terminates not_disjoint(?c,?p),
assume(succeeds class(?c) & succeeds partition(?p),
 [terminates class_member(?t,?c) by corollary(class_member:termination),
  terminates partition_member(?t,?p) by 
   corollary(partition_member:termination),
  terminates (class_member(?t,?c) & partition_member(?t,?p)),
  terminates not_disjoint(?c,?p) by completion],
 terminates not_disjoint(?c,?p))
).

:- lemma(disjoint:termination,
all [c,p]: succeeds class(?c) & succeeds partition(?p) =>
  terminates disjoint(?c,?p),
assume(succeeds class(?c) & succeeds partition(?p),
 [terminates not_disjoint(?c,?p) by lemma(not_disjoint:termination),
  gr(?c) by corollary(class:gr),
  gr(?p) by corollary(partition:gr),
  terminates disjoint(?c,?p) by completion],
 terminates disjoint(?c,?p))
).

:- lemma(disjoint:characterization:1,
all [c,p]: succeeds class(?c) & succeeds partition(?p) &
 succeeds disjoint(?c,?p) =>
  ~ (ex t: succeeds class_member(?t,?c) & succeeds partition_member(?t,?p)),
assume(succeeds class(?c) & succeeds partition(?p) &
 succeeds disjoint(?c,?p),
 contra(
  ex t: succeeds class_member(?t,?c) & succeeds partition_member(?t,?p),
  exist(t,
   succeeds class_member(?t,?c) & succeeds partition_member(?t,?p),
   [succeeds not_disjoint(?c,?p),
    fails disjoint(?c,?p),
    ff],
   ff)),
 ~ (ex t: succeeds class_member(?t,?c) & succeeds partition_member(?t,?p)))
).

:- lemma(disjoint:characterization:2,
all [c,p]: succeeds class(?c) & succeeds partition(?p) &
  ~ (ex t: succeeds class_member(?t,?c) & succeeds partition_member(?t,?p)) =>
  succeeds disjoint(?c,?p),
assume(succeeds class(?c) & succeeds partition(?p) &
 ~ (ex t: succeeds class_member(?t,?c) & succeeds partition_member(?t,?p)),
 [terminates disjoint(?c,?p) by lemma(disjoint:termination),
  succeeds disjoint(?c,?p) \/ fails disjoint(?c,?p),
  cases(succeeds disjoint(?c,?p),
   [],
   fails disjoint(?c,?p),
   [def fails disjoint(?c,?p) by completion,
    def succeeds not_disjoint(?c,?p) by completion,
    ff],
   succeeds disjoint(?c,?p))],
 succeeds disjoint(?c,?p))
).

:- lemma(disjoint:class_member,
all [c,p,t]: succeeds disjoint(?c,?p) & succeeds class_member(?t,?c) =>
  fails partition_member(?t,?p),
assume(succeeds disjoint(?c,?p) & succeeds class_member(?t,?c),
 [def succeeds disjoint(?c,?p) by completion,
  def fails not_disjoint(?c,?p) by completion,
  fails class_member(?t,?c) \/ fails partition_member(?t,?p),
  cases(fails class_member(?t,?c),
   [],
   fails partition_member(?t,?p),
   [],
   fails partition_member(?t,?p))],
 fails partition_member(?t,?p))
).

:- lemma(disjoint:partition_member,
all [c,p,t]: succeeds disjoint(?c,?p) & succeeds partition_member(?t,?p) =>
  fails class_member(?t,?c),
assume(succeeds disjoint(?c,?p) & succeeds partition_member(?t,?p),
 [def succeeds disjoint(?c,?p) by completion,
  def fails not_disjoint(?c,?p) by completion,
  fails class_member(?t,?c) \/ fails partition_member(?t,?p),
  cases(fails class_member(?t,?c),
   [],
   fails partition_member(?t,?p),
   [],
   fails class_member(?t,?c))],
 fails class_member(?t,?c))
).

:- lemma(find_delete:partition_member,
all [p1,t1,t2,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) &
 succeeds partition_member(?t2,?p2) => succeeds partition_member(?t2,?p1),
[induction(
  [all [p1,t1,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) => 
     (all t2: succeeds partition_member(?t2,?p2) => 
        succeeds partition_member(?t2,?p1))],
  [step([t],
    [],
    succeeds partition_member(?t2,[]) => succeeds partition_member(?t2,[]),
    all t2: succeeds partition_member(?t2,[]) => 
      succeeds partition_member(?t2,[])),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds partition_member(?t2,?p3),
     [],
     succeeds partition_member(?t2,[?c1|?p1])),
    all t2: succeeds partition_member(?t2,?p3) => 
      succeeds partition_member(?t2,[?c1|?p1])),
   step([c1,p1,t,p3,c2,p2],
    [all t2: succeeds partition_member(?t2,?p2) => 
       succeeds partition_member(?t2,?p1),
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds partition_member(?t2,?p3),
     [def succeeds partition_member(?t2,?p3) by completion,
      cases(ex [c,0]: ?p3 = [?c|?0] & succeeds class_member(?t2,?c),
       exist([c,0],
        ?p3 = [?c|?0] & succeeds class_member(?t2,?c),
        [],
        succeeds partition_member(?t2,[?c1|?p1])),
       ex [0,p]: ?p3 = [?0|?p] & succeeds partition_member(?t2,?p),
       exist([0,p],
        ?p3 = [?0|?p] & succeeds partition_member(?t2,?p),
        [],
        succeeds partition_member(?t2,[?c1|?p1])),
       succeeds partition_member(?t2,[?c1|?p1]))],
     succeeds partition_member(?t2,[?c1|?p1])),
    all t2: succeeds partition_member(?t2,?p3) => 
      succeeds partition_member(?t2,[?c1|?p1]))]),
 assume(succeeds find_delete(?p1,?t1,?p2,?c) &
  succeeds partition_member(?t2,?p2),
  [all t2: succeeds partition_member(?t2,?p2) => 
     succeeds partition_member(?t2,?p1),
   succeeds partition_member(?t2,?p2) => succeeds partition_member(?t2,?p1),
   succeeds partition_member(?t2,?p1)],
  succeeds partition_member(?t2,?p1))]
).

:- lemma(find_delete:types,
all [p1,t,p2,c]:succeeds find_delete(?p1,?t,?p2,?c) &
 succeeds partition(?p1) & succeeds term(?t) =>
  succeeds partition(?p2) & succeeds class(?c),
[induction(
  [all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) => 
     succeeds partition(?p1) & succeeds term(?t) => succeeds partition(?p2) &
      succeeds class(?c)],
  [step([t],
    [],
    assume(succeeds partition([]) & succeeds term(?t),
     succeeds class(cl(?t,[])) by lemma(class:singleton),
     succeeds partition([]) & succeeds class(cl(?t,[]))),
    succeeds partition([]) & succeeds term(?t) => succeeds partition([]) &
     succeeds class(cl(?t,[]))),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds partition([?c1|?p1]) & succeeds term(?t),
     [def succeeds partition([?c1|?p1]) by completion,
      succeeds partition(?p3),
      succeeds class(?c2)],
     succeeds partition(?p3) & succeeds class(?c2)),
    succeeds partition([?c1|?p1]) & succeeds term(?t) => 
     succeeds partition(?p3) & succeeds class(?c2)),
   step([c1,p1,t,p3,c2,p2],
    [succeeds partition(?p1) & succeeds term(?t) => succeeds partition(?p2) &
      succeeds class(?c2),
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds partition([?c1|?p1]) & succeeds term(?t),
     [def succeeds partition([?c1|?p1]) by completion,
      succeeds partition(?p2) &
      succeeds class(?c2),
      contra(
       ex t: succeeds class_member(?t,?c1) &
        succeeds partition_member(?t,?p2),
       exist(t1,
        succeeds class_member(?t1,?c1) & succeeds partition_member(?t1,?p2),
        [succeeds partition_member(?t1,?p1) by 
          lemma(find_delete:partition_member),
	 ex t1: succeeds class_member(?t1,?c1) &
	  succeeds partition_member(?t1,?p1),
	 ~ 
         (ex t1: succeeds class_member(?t1,?c1) &
           succeeds partition_member(?t1,?p1)) by 
          lemma(disjoint:characterization:1),
	 ff],
        ff)),
      succeeds disjoint(?c1,?p2) by lemma(disjoint:characterization:2),
      succeeds partition([?c1|?p2]) by completion,
      succeeds partition(?p3),
      succeeds class(?c2)],
     succeeds partition(?p3) & succeeds class(?c2)),
    succeeds partition([?c1|?p1]) & succeeds term(?t) => 
     succeeds partition(?p3) & succeeds class(?c2))]),
 assume(succeeds find_delete(?p1,?t,?p2,?c) & succeeds partition(?p1) &
  succeeds term(?t),
  [succeeds partition(?p1) & succeeds term(?t) => succeeds partition(?p2) &
    succeeds class(?c),
   succeeds partition(?p1) & succeeds term(?t) => succeeds partition(?p2) &
    succeeds class(?c),
   succeeds partition(?p2) & succeeds class(?c)],
  succeeds partition(?p2) & succeeds class(?c))]
).

:- lemma(find_delete:class_member,
all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) =>
  succeeds class_member(?t,?c),
induction(
 [all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) => 
    succeeds class_member(?t,?c)],
 [step([t],[],[],succeeds class_member(?t,cl(?t,[]))),
  step([c1,p1,t,p3,c2,p2],
   [succeeds class_member(?t,?c1),
    ?c2 = ?c1,
    ?p3 = ?p1],
   [],
   succeeds class_member(?t,?c2)),
  step([c1,p1,t,p3,c2,p2],
   [succeeds class_member(?t,?c2),
    fails class_member(?t,?c1),
    succeeds find_delete(?p1,?t,?p2,?c2),
    ?p3 = [?c1|?p2]],
   [],
   succeeds class_member(?t,?c2))])
).
:- lemma(find_delete:member,
all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) =>
  succeeds partition_member(?t,?p1) & succeeds member(?c,?p1) \/
  fails partition_member(?t,?p1) & ?c = cl(?t,[]),
induction(
 [all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) => 
    succeeds partition_member(?t,?p1) & succeeds member(?c,?p1) \/
    fails partition_member(?t,?p1) & ?c = cl(?t,[])],
 [step([t],
   [],
   [],
   succeeds partition_member(?t,[]) & succeeds member(cl(?t,[]),[]) \/
   fails partition_member(?t,[]) & cl(?t,[]) = cl(?t,[])),
  step([c1,p1,t,p3,c2,p2],
   [succeeds class_member(?t,?c1),
    ?c2 = ?c1,
    ?p3 = ?p1],
   [],
   succeeds partition_member(?t,[?c1|?p1]) & succeeds member(?c2,[?c1|?p1]) \/
   fails partition_member(?t,[?c1|?p1]) & ?c2 = cl(?t,[])),
  step([c1,p1,t,p3,c2,p2],
   [succeeds partition_member(?t,?p1) & succeeds member(?c2,?p1) \/
    fails partition_member(?t,?p1) & ?c2 = cl(?t,[]),
    fails class_member(?t,?c1),
    succeeds find_delete(?p1,?t,?p2,?c2),
    ?p3 = [?c1|?p2]],
   cases(succeeds partition_member(?t,?p1) & succeeds member(?c2,?p1),
    [],
    fails partition_member(?t,?p1) & ?c2 = cl(?t,[]),
    [],
    succeeds partition_member(?t,[?c1|?p1]) & 
    succeeds member(?c2,[?c1|?p1]) \/
    fails partition_member(?t,[?c1|?p1]) & ?c2 = cl(?t,[])),
   succeeds partition_member(?t,[?c1|?p1]) & succeeds member(?c2,[?c1|?p1]) \/
   fails partition_member(?t,[?c1|?p1]) & ?c2 = cl(?t,[]))])
).

:- lemma(disjoint:nil,
all c: succeeds class(?c) => succeeds disjoint(?c,[]),
assume(succeeds class(?c),
 [fails class_member(?t,?c) \/ fails partition_member(?t,[]),
  fails not_disjoint(?c,[]) by completion,
  succeeds disjoint(?c,[]) by completion],
 succeeds disjoint(?c,[]))
).

:- lemma(class_member:member:partition_member,
all [t,c,p]: succeeds member(?c,?p) & succeeds class_member(?t,?c) =>
  succeeds partition_member(?t,?p),
[induction(
  [all [c,p]: succeeds member(?c,?p) => 
     (all t: succeeds class_member(?t,?c) => 
        succeeds partition_member(?t,?p))],
  [step([x,l],
    [],
    assume(succeeds class_member(?t,?x),
     [],
     succeeds partition_member(?t,[?x|?l])),
    all t: succeeds class_member(?t,?x) => 
      succeeds partition_member(?t,[?x|?l])),
   step([x,y,l],
    [all t: succeeds class_member(?t,?x) => 
       succeeds partition_member(?t,?l),
     succeeds member(?x,?l)],
    assume(succeeds class_member(?t,?x),
     [],
     succeeds partition_member(?t,[?y|?l])),
    all t: succeeds class_member(?t,?x) => 
      succeeds partition_member(?t,[?y|?l]))]),
 assume(succeeds member(?c,?p) & succeeds class_member(?t,?c),
  [all t: succeeds class_member(?t,?c) => succeeds partition_member(?t,?p),
   succeeds class_member(?t,?c) => succeeds partition_member(?t,?p),
   succeeds partition_member(?t,?p)],
  succeeds partition_member(?t,?p))]
).

:- lemma(find_delete:disjoint,
all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) &
  succeeds partition(?p1) & succeeds term(?t) =>
  succeeds disjoint(?c,?p2),
[induction(
  [all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) => 
     succeeds partition(?p1) & succeeds term(?t) => 
      succeeds disjoint(?c,?p2)],
  [step([t],
    [],
    assume(succeeds partition([]) & succeeds term(?t),
     [fails class_member(?0,cl(?t,[])) \/ fails partition_member(?0,[]),
      all 0: fails class_member(?0,cl(?t,[])) \/
       fails partition_member(?0,[]),
      fails not_disjoint(cl(?t,[]),[]) by completion,
      succeeds disjoint(cl(?t,[]),[]) by completion],
     succeeds disjoint(cl(?t,[]),[])),
    succeeds partition([]) & succeeds term(?t) => 
     succeeds disjoint(cl(?t,[]),[])),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds partition([?c1|?p1]) & succeeds term(?t),
     [def succeeds partition([?c1|?p1]) by completion,
      succeeds disjoint(?c2,?p3)],
     succeeds disjoint(?c2,?p3)),
    succeeds partition([?c1|?p1]) & succeeds term(?t) => 
     succeeds disjoint(?c2,?p3)),
   step([c1,p1,t,p3,c2,p2],
    [succeeds partition(?p1) & succeeds term(?t) => 
      succeeds disjoint(?c2,?p2),
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds partition([?c1|?p1]) & succeeds term(?t),
     [def succeeds partition([?c1|?p1]) by completion,
      succeeds partition(?p2) & succeeds class(?c2) by 
       lemma(find_delete:types),
      succeeds disjoint(?c2,?p2),
      succeeds find_delete([?c1|?p1],?t,?p3,?c2),
      succeeds partition(?p3) & succeeds class(?c2) by 
       lemma(find_delete:types),
      contra(
       ex t1: succeeds class_member(?t1,?c2) &
        succeeds partition_member(?t1,?p3),
       exist(t1,
        succeeds class_member(?t1,?c2) & succeeds partition_member(?t1,?p3),
        [def succeeds partition_member(?t1,[?c1|?p2]) by completion,
	 cases(succeeds class_member(?t1,?c1),
          [succeeds partition_member(?t,?p1) & succeeds member(?c2,?p1) \/
           fails partition_member(?t,?p1) & ?c2 = cl(?t,[]) by 
            lemma(find_delete:member),
	   cases(succeeds partition_member(?t,?p1) &
            succeeds member(?c2,?p1),
            [succeeds partition_member(?t1,?p1) by 
              lemma(class_member:member:partition_member),
	     succeeds not_disjoint(?c1,?p1),
	     fails disjoint(?c1,?p1),
	     ff],
            fails partition_member(?t,?p1) & ?c2 = cl(?t,[]),
            [def succeeds class_member(?t1,cl(?t,[])) by completion,
	     cases(?t1 = ?t,
              [succeeds class_member(?t,?c1),
	       ff],
              succeeds partition_member(?t1,[]),
              [def succeeds partition_member(?t1,[]) by completion,ff],
              ff)],
            ff)],
          succeeds partition_member(?t1,?p2),
          [succeeds not_disjoint(?c2,?p2) by sld,
	   fails disjoint(?c2,?p2),
	   ff],
          ff)],
        ff)),
      succeeds disjoint(?c2,?p3) by lemma(disjoint:characterization:2)],
     succeeds disjoint(?c2,?p3)),
    succeeds partition([?c1|?p1]) & succeeds term(?t) => 
     succeeds disjoint(?c2,?p3))]),
 assume(succeeds find_delete(?p1,?t,?p2,?c) & succeeds partition(?p1) &
  succeeds term(?t),
  [succeeds partition(?p1) & succeeds term(?t) => succeeds disjoint(?c,?p2),
   succeeds partition(?p1) & succeeds term(?t) => succeeds disjoint(?c,?p2),
   succeeds disjoint(?c,?p2)],
  succeeds disjoint(?c,?p2))]
).

:- definition_pred(disjoint_classes,2,
all [c1,c2]: disjoint_classes(?c1,?c2) <=>
 ~ (ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2))
).

:- lemma(disjoint_classes:symmetric,
all [c1,c2]: disjoint_classes(?c1,?c2) => disjoint_classes(?c2,?c1),
assume(disjoint_classes(?c1,?c2),
 [contra(
   ex t: succeeds class_member(?t,?c2) & succeeds class_member(?t,?c1),
   exist(t,
    succeeds class_member(?t,?c2) & succeeds class_member(?t,?c1),
    [succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
     ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
     ~ 
     (ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2)) by
      elimination(disjoint_classes,2)],
    ff)),
  disjoint_classes(?c2,?c1) by introduction(disjoint_classes,2)],
 disjoint_classes(?c2,?c1))
).

:- lemma(disjoint_classes:member,
all [c1,c2,p]: succeeds class(?c1) & succeeds class(?c2) &
 succeeds partition(?p) & succeeds disjoint(?c1,?p) &
 succeeds member(?c2,?p) =>
  disjoint_classes(?c1,?c2),
assume(succeeds class(?c1) & succeeds class(?c2) & succeeds partition(?p) &
 succeeds disjoint(?c1,?p) & succeeds member(?c2,?p),
 [contra(
   ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
   exist(t,
    succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
    [succeeds partition_member(?t,?p) by 
      lemma(class_member:member:partition_member),
     succeeds not_disjoint(?c1,?p),
     fails disjoint(?c1,?p),
     ff],
    ff)),
  disjoint_classes(?c1,?c2) by introduction(disjoint_classes,2)],
 disjoint_classes(?c1,?c2))
).

:- lemma(class_member:disjoint_classes,
all [t,c]: succeeds class(?c) & fails class_member(?t,?c) =>
disjoint_classes(?c,cl(?t,[])),
assume(succeeds class(?c) & fails class_member(?t,?c),
 [contra(
   ex t1: succeeds class_member(?t1,?c) &
    succeeds class_member(?t1,cl(?t,[])),
   exist(t1,
    succeeds class_member(?t1,?c) & succeeds class_member(?t1,cl(?t,[])),
    [def succeeds class_member(?t1,cl(?t,[])) by completion,
     cases(?t1 = ?t,
      [succeeds class_member(?t,?c),
       ff],
      succeeds partition_member(?t1,[]),
      [def succeeds partition_member(?t1,[]) by completion,ff],
      ff)],
    ff)),
  disjoint_classes(?c,cl(?t,[])) by introduction(disjoint_classes,2)],
 disjoint_classes(?c,cl(?t,[])))
).

:- lemma(find_delete:twice:disjoint_classes,
all [c1,c2,p1,p2,p3,t1,t2]: succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) & succeeds term(?t1) &
 succeeds term(?t2) & succeeds partition(?p1) &
 fails class_member(?t2,?c1) =>
  disjoint_classes(?c1,?c2),
assume(succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) & succeeds term(?t1) &
 succeeds term(?t2) & succeeds partition(?p1)& fails class_member(?t2,?c1),
 [succeeds partition(?p2) & succeeds class(?c1) by 
   lemma(find_delete:types),
  succeeds disjoint(?c1,?p2) by lemma(find_delete:disjoint),
  succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2) \/
  fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]) by 
   lemma(find_delete:member),
  succeeds partition(?p3) & succeeds class(?c2) by 
   lemma(find_delete:types),
  cases(succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2),
   disjoint_classes(?c1,?c2) by lemma(disjoint_classes:member),
   fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]),
   [disjoint_classes(?c1,cl(?t2,[])) by 
     lemma(class_member:disjoint_classes),
    disjoint_classes(?c1,?c2) ],
   disjoint_classes(?c1,?c2))],
 disjoint_classes(?c1,?c2))
).

:- lemma(not_var_class:termination,
all [t,p]: succeeds partition(?p) => terminates not_var_class(?t,?p),
assume(succeeds partition(?p),
 [gr(?p) by corollary(partition:gr),
  assume(?t = $(?0),
   [terminates partition_member(?2,?p) by 
     corollary(partition_member:termination),
    assume(succeeds partition_member(?2,?p),
     [succeeds term(?2) by corollary(partition_member:types),
      gr(?2) by corollary(term:gr)],
     terminates var_form(?2) & gr(?2)),
    terminates (partition_member(?2,?p) & ~ var_form(?2))],
   terminates (partition_member(?2,?p) & ~ var_form(?2))),
  all [0,2]: ?t = $(?0) => 
    terminates (partition_member(?2,?p) & ~ var_form(?2)),
  terminates not_var_class(?t,?p) by completion],
 terminates not_var_class(?t,?p))
).

:- lemma(disjoint:find_delete:disjoint,
all [c1,c2,p1,p2,t]: succeeds class(?c1) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t,?p2,?c2) & succeeds disjoint(?c1,?p1) &
  succeeds term(?t) =>
  succeeds disjoint(?c1,?p2),
assume(succeeds class(?c1) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t,?p2,?c2) & succeeds disjoint(?c1,?p1) &
 succeeds term(?t),
 [contra(
   ex s: succeeds class_member(?s,?c1) & succeeds partition_member(?s,?p2),
   exist(s,
    succeeds class_member(?s,?c1) & succeeds partition_member(?s,?p2),
    [succeeds partition_member(?s,?p1) by 
      lemma(find_delete:partition_member),
     succeeds not_disjoint(?c1,?p1),
     fails disjoint(?c1,?p1),
     ff],
    ff)),
  succeeds partition(?p2) & succeeds class(?c2) by 
   lemma(find_delete:types),
  succeeds disjoint(?c1,?p2) by lemma(disjoint:characterization:2)],
 succeeds disjoint(?c1,?p2))
).
 
:- lemma(not_var_class:failure,
all [t,p]: succeeds term(?t) & fails var_form(?t) =>
  fails not_var_class(?t,?p),
assume(succeeds term(?t) & fails var_form(?t),
 [def succeeds term(?t) by completion,
  cases(ex x: ?t = $(?x) & succeeds atomic(?x),
   exist(x,
    ?t = $(?x) & succeeds atomic(?x),
    [succeeds var_form($(?x)) by sld,
     succeeds var_form(?t),
     ff],
    fails not_var_class(?t,?p)),
   ex [x,tL]: ?t = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
   exist([x,tL],
    ?t = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
    [fails not_var_class([?x|?tL],?p),
     fails not_var_class(?t,?p)],
    fails not_var_class(?t,?p)),
   fails not_var_class(?t,?p))],
 fails not_var_class(?t,?p))
).

:- lemma(var_form:partition,
all [c1,c2,t1,t2,q1,q2,p]: succeeds class(?c1) & succeeds class(?c2) &
 succeeds partition(?p) & disjoint_classes(?c1,?c2) &
 succeeds disjoint(?c1,?p) & succeeds disjoint(?c2,?p) &
 ?c1 = cl(?t1,?q1) & ?c2 = cl(?t2,?q2) &
 succeeds var_form(?t1) => succeeds partition([cl(?t2,[?c1|?q2])|?p]),
assume(succeeds class(?c1) & succeeds class(?c2) & succeeds partition(?p) &
 disjoint_classes(?c1,?c2) & succeeds disjoint(?c1,?p) &
 succeeds disjoint(?c2,?p) & ?c1 = cl(?t1,?q1) & ?c2 = cl(?t2,?q2) &
 succeeds var_form(?t1),
 [~ (ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2)) by
   elimination(disjoint_classes,2),
  ~ (ex t: succeeds class_member(?t,?c1) &
    succeeds partition_member(?t,?p)) by lemma(disjoint:characterization:1),
  ~ (ex t: succeeds class_member(?t,?c2) &
    succeeds partition_member(?t,?p)) by lemma(disjoint:characterization:1),
  def succeeds class(cl(?t2,?q2)) by completion,
  succeeds partition(?q2),
  contra(
   ex t: succeeds class_member(?t,?c1) & succeeds partition_member(?t,?q2),
   exist(t,
    succeeds class_member(?t,?c1) & succeeds partition_member(?t,?q2),
    [succeeds class_member(?t,cl(?t2,?q2)) by sld,
     succeeds class_member(?t,?c2),
     ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
     ff],
    ff)),
  succeeds disjoint(?c1,?q2) by lemma(disjoint:characterization:2),
  succeeds partition([?c1|?q2]) by sld,
  succeeds class_member(?t2,cl(?t2,?q2)) by sld,
  succeeds class_member(?t2,?c2),
  terminates class_member(?t2,?c1) by corollary(class_member:termination),
  succeeds class_member(?t2,?c1) \/ fails class_member(?t2,?c1),
  cases(succeeds class_member(?t2,?c1),
   [ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
    ff],
   fails class_member(?t2,?c1),
   [],
   fails class_member(?t2,?c1)),
  fails class_member(?t2,?c1) & fails partition_member(?t2,?q2),
  fails partition_member(?t2,[?c1|?q2]) by completion,
  terminates not_var_class(?t2,[?c1|?q2]) by 
   lemma(not_var_class:termination),
  succeeds not_var_class(?t2,[?c1|?q2]) \/
  fails not_var_class(?t2,[?c1|?q2]),
  cases(succeeds not_var_class(?t2,[?c1|?q2]),
   [def succeeds not_var_class(?t2,[?c1|?q2]) by completion,
    exist([x,t],
     ?t2 = $(?x) & succeeds partition_member(?t,[?c1|?q2]) &
     fails var_form(?t),
     [def succeeds partition_member(?t,[?c1|?q2]) by completion,
      cases(succeeds class_member(?t,?c1),
       [succeeds class_member(?t,cl(?t1,?q1)),
	def succeeds class_member(?t,cl(?t1,?q1)) by completion,
	cases(?t = ?t1,
	 [fails var_form(?t1),
	  ff],
	 succeeds partition_member(?t,?q1),
	 [def succeeds var_form(?t1) by completion,
	  exist(y,?t1 = $(?y),
	   [succeeds not_var_class($(?y),?q1) by sld,
	    succeeds not_var_class(?t1,?q1),
	    def succeeds class(cl(?t1,?q1)) by completion,
	    ff],
	   ff)],
	 ff)],
       succeeds partition_member(?t,?q2),
       [succeeds not_var_class($(?x),?q2) by sld,
	succeeds not_var_class(?t2,?q2),
	def succeeds class(cl(?t2,?q2)) by completion,
	ff],
       fails not_var_class(?t2,[?c1|?q2]))],
     fails not_var_class(?t2,[?c1|?q2]))],
   fails not_var_class(?t2,[?c1|?q2]),
   [],
   fails not_var_class(?t2,[?c1|?q2])),
  succeeds class(cl(?t2,[?c1|?q2])) by sld,
  contra(
   ex t: succeeds class_member(?t,cl(?t2,[?c1|?q2])) &
    succeeds partition_member(?t,?p),
   exist(t,
    succeeds class_member(?t,cl(?t2,[?c1|?q2])) &
    succeeds partition_member(?t,?p),
    [def succeeds class_member(?t,cl(?t2,[?c1|?q2])) by completion,
     cases(?t = ?t2,
      [succeeds class_member(?t,?c2),
       ex t: succeeds class_member(?t,?c2) &
	succeeds partition_member(?t,?p),
       ff],
      succeeds partition_member(?t,[?c1|?q2]),
      [def succeeds partition_member(?t,[?c1|?q2]) by completion,
       cases(succeeds class_member(?t,?c1),
        [ex t: succeeds class_member(?t,?c1) &
	  succeeds partition_member(?t,?p),
	 ff],
        succeeds partition_member(?t,?q2),
        [succeeds class_member(?t,cl(?t2,?q2)) by sld,
	 succeeds class_member(?t,?c2),
	 ex t: succeeds class_member(?t,?c2) &
	  succeeds partition_member(?t,?p),
	 ff],
        ff)],
      ff)],
    ff)),
  succeeds disjoint(cl(?t2,[?c1|?q2]),?p) by 
   lemma(disjoint:characterization:2),
  succeeds partition([cl(?t2,[?c1|?q2])|?p]) by sld],
 succeeds partition([cl(?t2,[?c1|?q2])|?p]))
).

:- lemma(find_delete:twice:partition,
all [t1,t2,t3,t4,p1,p2,p3,c1,c2,q1,q2,x,tl1,tl2]: succeeds term(?t1) &
 succeeds term(?t2) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) &
 fails class_member(?t2,?c1) & ?c1 = cl(?t3,?q1) &
 ?c2 = cl(?t4,?q2) & fails var_form(?t4) &
 ?t3 = [?x|?tl1] & ?t4 = [?x|?tl2] =>
  succeeds termL(?tl1) & succeeds termL(?tl2) &
  succeeds partition([cl(?t4,[?c1|?q2])|?p3]),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) & fails class_member(?t2,?c1) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & fails var_form(?t4) &
 ?t3 = [?x|?tl1] & ?t4 = [?x|?tl2],
 [succeeds partition(?p2) & succeeds class(?c1) by 
   lemma(find_delete:types),
  succeeds partition(?p3) & succeeds class(?c2) by 
   lemma(find_delete:types),
  succeeds disjoint(?c1,?p2) by lemma(find_delete:disjoint),
  succeeds disjoint(?c2,?p3) by lemma(find_delete:disjoint),
  ~ (ex t: succeeds class_member(?t,?c2) &
    succeeds partition_member(?t,?p3))
   by lemma(disjoint:characterization:1),
  succeeds disjoint(?c1,?p3) by lemma(disjoint:find_delete:disjoint),
  ~ (ex t: succeeds class_member(?t,?c1) &
    succeeds partition_member(?t,?p3))
   by lemma(disjoint:characterization:1),
  succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2) \/
  fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]) by 
   lemma(find_delete:member),
  cases(succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2),
   disjoint_classes(?c1,?c2) by lemma(disjoint_classes:member),
   fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]),
   [disjoint_classes(?c1,cl(?t2,[])) by 
     lemma(class_member:disjoint_classes),
    disjoint_classes(?c1,?c2)],
   disjoint_classes(?c1,?c2)),     
  def succeeds class(cl(?t4,?q2)) by completion,
  ~ (ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2)) by
   elimination(disjoint_classes,2),
  contra(
   ex t: succeeds class_member(?t,?c1) & succeeds partition_member(?t,?q2),
   exist(t,
    succeeds class_member(?t,?c1) & succeeds partition_member(?t,?q2),
    [succeeds class_member(?t,cl(?t4,?q2)) by sld,
     succeeds class_member(?t,?c2),
     ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
     ff],
    ff)),
  succeeds disjoint(?c1,?q2) by lemma(disjoint:characterization:2),
  succeeds partition([?c1|?q2]) by sld,
  succeeds class_member(?t4,cl(?t4,?q2)) by sld,
  succeeds class_member(?t4,?c2),
  terminates class_member(?t4,?c1) by corollary(class_member:termination),
  succeeds class_member(?t4,?c1) \/ fails class_member(?t4,?c1),
  cases(succeeds class_member(?t4,?c1),
   [ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
    ff],
   fails class_member(?t4,?c1),
   [],
   fails class_member(?t4,?c1)),
  fails class_member(?t4,?c1) & fails partition_member(?t4,?q2),
  fails partition_member(?t4,[?c1|?q2]) by completion,
  fails not_var_class(?t4,[?c1|?q2]) by lemma(not_var_class:failure),
  succeeds class(cl(?t4,[?c1|?q2])) by sld,
  contra(
   ex t: succeeds class_member(?t,cl(?t4,[?c1|?q2])) &
    succeeds partition_member(?t,?p3),
   exist(t,
    succeeds class_member(?t,cl(?t4,[?c1|?q2])) &
    succeeds partition_member(?t,?p3),
    [def succeeds class_member(?t,cl(?t4,[?c1|?q2])) by completion,
     cases(?t = ?t4,
      [succeeds class_member(?t,?c2),
       ex t: succeeds class_member(?t,?c2) &
	succeeds partition_member(?t,?p3),
       ff],
      succeeds partition_member(?t,[?c1|?q2]),
      [def succeeds partition_member(?t,[?c1|?q2]) by completion,
       cases(succeeds class_member(?t,?c1),
        [ex t: succeeds class_member(?t,?c1) &
	  succeeds partition_member(?t,?p3),
	 ff],
        succeeds partition_member(?t,?q2),
        [succeeds class_member(?t,cl(?t4,?q2)) by sld,
	 succeeds class_member(?t,?c2),
	 ex t: succeeds class_member(?t,?c2) &
	  succeeds partition_member(?t,?p3),
	 ff],
        ff)],
      ff)],
    ff)),
  succeeds disjoint(cl(?t4,[?c1|?q2]),?p3) by 
   lemma(disjoint:characterization:2),
  succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by sld,
  def succeeds class(cl(?t3,?q1)) by completion,
  def succeeds term([?x|?tl1]) by completion,
  succeeds termL(?tl1),
  def succeeds class(cl(?t4,?q2)) by completion,
  def succeeds term([?x|?tl2]) by completion,
  succeeds termL(?tl2)],
 succeeds termL(?tl1) & succeeds termL(?tl2) &
 succeeds partition([cl(?t4,[?c1|?q2])|?p3]))
).

:- lemma(union_find:union_findL:types,
(all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) =>
   (succeeds term(?t1) & succeeds term(?t2) &
    succeeds partition(?p1) =>
     succeeds partition(?p2))) &
(all [tl1,tl2,p1,p2]: succeeds union_findL(?tl1,?tl2,?p1,?p2) =>
   (succeeds termL(?tl1) & succeeds termL(?tl2) &
    succeeds partition(?p1) =>
     succeeds partition(?p2))),
induction(
 [all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) => 
    succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
     succeeds partition(?p2),
  all [tl1,tl2,p1,p2]: succeeds union_findL(?tl1,?tl2,?p1,?p2) => 
    succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p1) =>
     succeeds partition(?p2)],
 [step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    succeeds class_member(?t2,?c1),
    ?p4 = ?p1],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [],
    succeeds partition(?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    succeeds partition(?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    succeeds var_form(?t3),
    ?p4 = [cl(?t4,[?c1|?q2])|?p3]],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [succeeds partition(?p2) & succeeds class(?c1) by 
      lemma(find_delete:types),
     succeeds partition(?p3) & succeeds class(?c2) by 
      lemma(find_delete:types),
     succeeds disjoint(?c2,?p3) by lemma(find_delete:disjoint),
     succeeds disjoint(?c1,?p2) by lemma(find_delete:disjoint),
     succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2) \/
     fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]) by 
      lemma(find_delete:member),
     cases(succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2),
      disjoint_classes(?c1,?c2) by lemma(disjoint_classes:member),
      fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]),
      [disjoint_classes(?c1,cl(?t2,[])) by 
        lemma(class_member:disjoint_classes),
       disjoint_classes(?c1,?c2)],
      disjoint_classes(?c1,?c2)),     
     succeeds disjoint(?c1,?p3) by lemma(disjoint:find_delete:disjoint), 
     succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
      lemma(var_form:partition),
     succeeds partition(?p4)],
    succeeds partition(?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    succeeds partition(?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    succeeds var_form(?t4),
    ?p4 = [cl(?t3,[?c2|?q1])|?p3]],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [succeeds partition(?p2) & succeeds class(?c1) by 
      lemma(find_delete:types),
     succeeds partition(?p3) & succeeds class(?c2) by 
      lemma(find_delete:types),
     succeeds disjoint(?c2,?p3) by lemma(find_delete:disjoint),
     succeeds disjoint(?c1,?p2) by lemma(find_delete:disjoint),
     succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2) \/
     fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]) by 
      lemma(find_delete:member),
     cases(succeeds partition_member(?t2,?p2) & succeeds member(?c2,?p2),
      disjoint_classes(?c1,?c2) by lemma(disjoint_classes:member),
      fails partition_member(?t2,?p2) & ?c2 = cl(?t2,[]),
      [disjoint_classes(?c1,cl(?t2,[])) by 
        lemma(class_member:disjoint_classes),
       disjoint_classes(?c1,?c2)],
      disjoint_classes(?c1,?c2)),    
     disjoint_classes(?c2,?c1) by lemma(disjoint_classes:symmetric),     
     succeeds disjoint(?c1,?p3) by lemma(disjoint:find_delete:disjoint),
     succeeds partition([cl(?t3,[?c2|?q1])|?p3]) by 
      lemma(var_form:partition),
     succeeds partition(?p4)],
    succeeds partition(?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    succeeds partition(?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds termL(?t1L) & succeeds termL(?t2L) &
    succeeds partition([cl(?t4,[?c1|?q2])|?p3]) => succeeds partition(?p4),
    succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    fails var_form(?t4),
    ?t3 = [?tag|?t1L],
    ?t4 = [?tag|?t2L],
    succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [succeeds termL(?t1L) & succeeds termL(?t2L) &
     succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
      lemma(find_delete:twice:partition),
     succeeds partition(?p4)],
    succeeds partition(?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    succeeds partition(?p4)),
  step([p],
   [],
   assume(succeeds termL([]) & succeeds termL([]) & succeeds partition(?p),
    [],
    succeeds partition(?p)),
   succeeds termL([]) & succeeds termL([]) & succeeds partition(?p) => 
    succeeds partition(?p)),
  step([t1,t1L,t2,t2L,p1,p3,p2],
   [succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
     succeeds partition(?p2),
    succeeds termL(?t1L) & succeeds termL(?t2L) & succeeds partition(?p2) =>
     succeeds partition(?p3),
    succeeds union_find(?t1,?t2,?p1,?p2),
    succeeds union_findL(?t1L,?t2L,?p2,?p3)],
   assume(succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
    succeeds partition(?p1),
    [def succeeds termL([?t1|?t1L]) by completion,
     def succeeds termL([?t2|?t2L]) by completion,
     succeeds partition(?p2),
     succeeds partition(?p3)],
    succeeds partition(?p3)),
   succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
   succeeds partition(?p1) => succeeds partition(?p3))])
).

:- corollary(union_find:types,
all [t1,t2,p1,p2]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds partition(?p1) & succeeds union_find(?t1,?t2,?p1,?p2) => 
  succeeds partition(?p2),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
 succeeds union_find(?t1,?t2,?p1,?p2),
 [succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
   succeeds partition(?p2) by lemma(union_find:union_findL:types),
  succeeds partition(?p2)],
 succeeds partition(?p2))
).

:- corollary(unify_terms_part:types,
all [t1,t2,p]:  succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_part(?t1,?t2,?p) =>
  succeeds partition(?p),
assume(succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_part(?t1,?t2,?p),
 [def succeeds unify_terms_part(?t1,?t2,?p) by completion,
  succeeds partition([]) by sld,
  succeeds partition(?p) by corollary(union_find:types)],
 succeeds partition(?p))
).

%-----------------------------------------------------------------------
% part3
%-----------------------------------------------------------------------

:- lemma(partition:disjoint,
all [p,c1,c2,t]: succeeds partition(?p) & succeeds member(?c1,?p) &
 succeeds member(?c2,?p) & succeeds class_member(?t,?c1) &
 succeeds class_member(?t,?c2) => ?c1 = ?c2,
[induction(
  [all p: succeeds partition(?p) => 
     (all [c1,c2,t]: succeeds member(?c1,?p) & succeeds member(?c2,?p) &
       succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2) => 
        ?c1 = ?c2)],
  [step([],
    [],
    assume(succeeds member(?c1,[]) & succeeds member(?c2,[]) &
     succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
     [def succeeds member(?c1,[]) by completion,?c1 = ?c2],
     ?c1 = ?c2),
    all [c1,c2,t]: succeeds member(?c1,[]) & succeeds member(?c2,[]) &
     succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2) => 
      ?c1 = ?c2),
   step([c,p],
    [all [c1,c2,t]: succeeds member(?c1,?p) & succeeds member(?c2,?p) &
      succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2) => 
       ?c1 = ?c2,
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(succeeds member(?c1,[?c|?p]) & succeeds member(?c2,[?c|?p]) &
     succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
     [def succeeds member(?c1,[?c|?p]) by completion,
      cases(?c1 = ?c,
       [def succeeds member(?c2,[?c|?p]) by completion,
        cases(?c2 = ?c,
         [],
         succeeds member(?c2,?p),
         [succeeds disjoint(?c1,?p),
	  succeeds class(?c1),
	  succeeds class(?c2) by lemma(partition:member),
	  disjoint_classes(?c1,?c2) by lemma(disjoint_classes:member),
	  ~ 
	  (ex t: succeeds class_member(?t,?c1) &
	    succeeds class_member(?t,?c2)) by 
	   elimination(disjoint_classes,2),
	  ex t: succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2),
	  ff],
         ?c1 = ?c2)],
       succeeds member(?c1,?p),
       [def succeeds member(?c2,[?c|?p]) by completion,
        cases(?c2 = ?c,
         [succeeds disjoint(?c2,?p),
	  succeeds class(?c1) by lemma(partition:member),
	  succeeds class(?c2),
	  disjoint_classes(?c2,?c1) by lemma(disjoint_classes:member),
	  ~ 
	  (ex t: succeeds class_member(?t,?c2) &
	    succeeds class_member(?t,?c1)) by 
	   elimination(disjoint_classes,2),
	  ex t: succeeds class_member(?t,?c2) & succeeds class_member(?t,?c1),
	  ff],
         succeeds member(?c2,?p),
         [],
         ?c1 = ?c2)],
       ?c1 = ?c2)],
     ?c1 = ?c2),
    all [c1,c2,t]: succeeds member(?c1,[?c|?p]) &
     succeeds member(?c2,[?c|?p]) & succeeds class_member(?t,?c1) &
     succeeds class_member(?t,?c2) => ?c1 = ?c2)]),
 assume(succeeds partition(?p) & succeeds member(?c1,?p) &
  succeeds member(?c2,?p) & succeeds class_member(?t,?c1) &
  succeeds class_member(?t,?c2),
  [all [c1,c2,t]: succeeds member(?c1,?p) & succeeds member(?c2,?p) &
    succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2) => 
     ?c1 = ?c2,
   succeeds member(?c1,?p) & succeeds member(?c2,?p) &
   succeeds class_member(?t,?c1) & succeeds class_member(?t,?c2) => 
    ?c1 = ?c2,
   ?c1 = ?c2],
  ?c1 = ?c2)]
).

:- lemma(find:characterization:1,
all [p,t1,t2]: succeeds find(?p,?t1,?t2) =>
  (ex [c,q]: succeeds member(?c,?p) &
    succeeds class_member(?t1,?c) & ?c = cl(?t2,?q)) \/
  (fails partition_member(?t1,?p) & ?t1 = ?t2),
[induction(
  [all [p,t1,t2]: succeeds find(?p,?t1,?t2) => 
     (ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
       ?c = cl(?t2,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t2],
  [step([t],
    [],
    [],
    (ex [c,q]: succeeds member(?c,[]) & succeeds class_member(?t,?c) &
      ?c = cl(?t,?q)) \/ fails partition_member(?t,[]) & ?t = ?t),
   step([c,p,t1,t2,0],
    [succeeds class_member(?t1,?c),
     ?c = cl(?t2,?0)],
    [succeeds member(?c,[?c|?p]),
     (ex [1,q]: succeeds member(?1,[?c|?p]) & succeeds class_member(?t1,?1) &
       ?1 = cl(?t2,?q)) ],
    (ex [1,q]: succeeds member(?1,[?c|?p]) & succeeds class_member(?t1,?1) &
      ?1 = cl(?t2,?q)) \/ fails partition_member(?t1,[?c|?p]) & ?t1 = ?t2),
   step([c,p,t1,t2,0],
    [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
       ?c = cl(?t2,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t2,
     fails class_member(?t1,?c),
     succeeds find(?p,?t1,?t2)],
    cases(
     ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
      ?c = cl(?t2,?q),
     exist([0,q],
      succeeds member(?0,?p) & succeeds class_member(?t1,?0) &
      ?0 = cl(?t2,?q),
      [succeeds member(?0,[?c|?p]),
       (ex [1,q]: succeeds member(?1,[?c|?p]) & 
	 succeeds class_member(?t1,?1) & ?1 = cl(?t2,?q))],
      (ex [1,q]: succeeds member(?1,[?c|?p]) & 
        succeeds class_member(?t1,?1) & ?1 = cl(?t2,?q)) \/
      fails partition_member(?t1,[?c|?p]) & ?t1 = ?t2),
     fails partition_member(?t1,?p) & ?t1 = ?t2,
     [],
     (ex [1,q]: succeeds member(?1,[?c|?p]) & succeeds class_member(?t1,?1) &
       ?1 = cl(?t2,?q)) \/ fails partition_member(?t1,[?c|?p]) & ?t1 = ?t2),
    (ex [1,q]: succeeds member(?1,[?c|?p]) & succeeds class_member(?t1,?1) &
      ?1 = cl(?t2,?q)) \/ fails partition_member(?t1,[?c|?p]) & ?t1 = ?t2)]),
 assume(succeeds find(?p,?t1,?t2),
  [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
     ?c = cl(?t2,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t2,
   (ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
     ?c = cl(?t2,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t2],
  (ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
    ?c = cl(?t2,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t2)]
).

:- lemma(find:characterization:2,
all [t1,p,c,t2,q]: succeeds member(?c,?p) & succeeds partition(?p) &
 succeeds class_member(?t1,?c) & ?c = cl(?t2,?q) =>
  succeeds find(?p,?t1,?t2),
[induction(
  [all [c,p]: succeeds member(?c,?p) => 
     (all [t1,t2,q]: succeeds partition(?p) & succeeds class_member(?t1,?c) &
       ?c = cl(?t2,?q) => succeeds find(?p,?t1,?t2))],
  [step([x,l],
    [],
    assume(succeeds partition([?x|?l]) & succeeds class_member(?t1,?x) &
     ?x = cl(?t2,?q),
     [],
     succeeds find([?x|?l],?t1,?t2)),
    all [t1,t2,q]: succeeds partition([?x|?l]) &
     succeeds class_member(?t1,?x) & ?x = cl(?t2,?q) => 
      succeeds find([?x|?l],?t1,?t2)),
   step([x,y,l],
    [all [t1,t2,q]: succeeds partition(?l) & succeeds class_member(?t1,?x) &
      ?x = cl(?t2,?q) => succeeds find(?l,?t1,?t2),
     succeeds member(?x,?l)],
    assume(succeeds partition([?y|?l]) & succeeds class_member(?t1,?x) &
     ?x = cl(?t2,?q),
     [def succeeds partition([?y|?l]) by completion,
      succeeds disjoint(?y,?l),
      terminates class_member(?t1,?y) by 
       corollary(class_member:termination),
      succeeds class_member(?t1,?y) \/ fails class_member(?t1,?y),
      cases(succeeds class_member(?t1,?y),
       [succeeds partition_member(?t1,?l) by 
         lemma(class_member:member:partition_member),
	ex t1: succeeds class_member(?t1,?y) &
	 succeeds partition_member(?t1,?l),
	~ 
        (ex t1: succeeds class_member(?t1,?y) &
          succeeds partition_member(?t1,?l)) by 
         lemma(disjoint:characterization:1),
	ff],
       fails class_member(?t1,?y),
       [],
       fails class_member(?t1,?y)),
      succeeds find(?l,?t1,?t2),
      succeeds find([?y|?l],?t1,?t2)],
     succeeds find([?y|?l],?t1,?t2)),
    all [t1,t2,q]: succeeds partition([?y|?l]) &
     succeeds class_member(?t1,?x) & ?x = cl(?t2,?q) => 
      succeeds find([?y|?l],?t1,?t2))]),
 assume(succeeds member(?c,?p) & succeeds partition(?p) &
  succeeds class_member(?t1,?c) & ?c = cl(?t2,?q),
  [all [t1,t2,q]: succeeds partition(?p) & succeeds class_member(?t1,?c) &
    ?c = cl(?t2,?q) => succeeds find(?p,?t1,?t2),
   succeeds partition(?p) & succeeds class_member(?t1,?c) & ?c = cl(?t2,?q) =>
    succeeds find(?p,?t1,?t2),
   succeeds find(?p,?t1,?t2)],
  succeeds find(?p,?t1,?t2))]
).

:- lemma(find:characterization:3,
all [t,p]: succeeds partition(?p) & fails partition_member(?t,?p) =>
  succeeds find(?p,?t,?t),
[induction(
  [all p: succeeds partition(?p) => 
     (all t: fails partition_member(?t,?p) => succeeds find(?p,?t,?t))],
  [step([],
    [],
    fails partition_member(?t,[]) => succeeds find([],?t,?t),
    all t: fails partition_member(?t,[]) => succeeds find([],?t,?t)),
   step([c,p],
    [all t: fails partition_member(?t,?p) => succeeds find(?p,?t,?t),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(fails partition_member(?t,[?c|?p]),
     [def fails partition_member(?t,[?c|?p]) by completion,
      succeeds find(?p,?t,?t),
      succeeds find([?c|?p],?t,?t) by sld],
     succeeds find([?c|?p],?t,?t)),
    all t: fails partition_member(?t,[?c|?p]) => 
      succeeds find([?c|?p],?t,?t))]),
 assume(succeeds partition(?p) & fails partition_member(?t,?p),
  [all t: fails partition_member(?t,?p) => succeeds find(?p,?t,?t),
   fails partition_member(?t,?p) => succeeds find(?p,?t,?t),
   succeeds find(?p,?t,?t)],
  succeeds find(?p,?t,?t))]
).

:- lemma(find:existence,
all [p,t1]: succeeds partition(?p) => (ex t2: succeeds find(?p,?t1,?t2)),
[induction(
  [all p: succeeds partition(?p) => 
     (all t1: ex t2: succeeds find(?p,?t1,?t2))],
  [step([],
    [],
    [fails class_member(?t1,[]) & succeeds find([],?t1,?t1),
     ex t2: succeeds find([],?t1,?t2)],
    all t1: ex t2: succeeds find([],?t1,?t2)),
   step([c,p],
    [all t1: ex t2: succeeds find(?p,?t1,?t2),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    [def succeeds class(?c) by completion,
     exist([t,0],
      ?c = cl(?t,?0) & succeeds term(?t) & succeeds partition(?0) &
      fails partition_member(?t,?0) & fails not_var_class(?t,?0),
      [terminates class_member(?t1,?c) by 
        corollary(class_member:termination),
       succeeds class_member(?t1,?c) \/ fails class_member(?t1,?c),
       cases(succeeds class_member(?t1,?c),
	[succeeds find([?c|?p],?t1,?t),
	 ex t2: succeeds find([?c|?p],?t1,?t2)],
	fails class_member(?t1,?c),
	[ex t2: succeeds find(?p,?t1,?t2),
	 exist(t2,
          succeeds find(?p,?t1,?t2),
          [succeeds find([?c|?p],?t1,?t2),
	   ex t2: succeeds find([?c|?p],?t1,?t2)],
          ex t2: succeeds find([?c|?p],?t1,?t2))],
	ex t2: succeeds find([?c|?p],?t1,?t2))],
      ex t2: succeeds find([?c|?p],?t1,?t2))],
    all t1: ex t2: succeeds find([?c|?p],?t1,?t2))]),
 assume(succeeds partition(?p),
  [all t1: ex t2: succeeds find(?p,?t1,?t2),
   ex t2: succeeds find(?p,?t1,?t2)],
  ex t2: succeeds find(?p,?t1,?t2))]
).

:- lemma(find:uniqueness,
all [p,t,t1,t2]: succeeds find(?p,?t,?t1) &
 succeeds find(?p,?t,?t2) => ?t1 = ?t2,
[induction(
  [all [p,t,t1]: succeeds find(?p,?t,?t1) => 
     (all t2: succeeds find(?p,?t,?t2) => ?t1 = ?t2)],
  [step([t],
    [],
    assume(succeeds find([],?t,?t2),
      [def succeeds find([],?t,?t2) by completion,?t = ?t2],
     ?t = ?t2),
    all t2: succeeds find([],?t,?t2) => ?t = ?t2),
   step([c,p,t1,t2,0],
    [succeeds class_member(?t1,?c),
     ?c = cl(?t2,?0)],
    assume(succeeds find([?c|?p],?t1,?1),
      [def succeeds find([?c|?p],?t1,?1) by completion,
       exist(2,
        succeeds class_member(?t1,?c) & ?c = cl(?1,?2) \/
        fails class_member(?t1,?c) & succeeds find(?p,?t1,?1),
        cases(succeeds class_member(?t1,?c) & ?c = cl(?1,?2),
         [],
         fails class_member(?t1,?c) & succeeds find(?p,?t1,?1),
         [],
         ?t2 = ?1),
        ?t2 = ?1)],
     ?t2 = ?1),
    all 1: succeeds find([?c|?p],?t1,?1) => ?t2 = ?1),
   step([c,p,t1,t2,0],
    [all 1: succeeds find(?p,?t1,?1) => ?t2 = ?1,
     fails class_member(?t1,?c),
     succeeds find(?p,?t1,?t2)],
    assume(succeeds find([?c|?p],?t1,?1),
     [def succeeds find([?c|?p],?t1,?1) by completion,
       exist(0,
        succeeds class_member(?t1,?c) & ?c = cl(?1,?0) \/
        fails class_member(?t1,?c) & succeeds find(?p,?t1,?1),
        cases(succeeds class_member(?t1,?c) & ?c = cl(?1,?0),
         [],
         fails class_member(?t1,?c) & succeeds find(?p,?t1,?1),
         [],
         ?t2 = ?1),
        ?t2 = ?1)],
     ?t2 = ?1),
    all 1: succeeds find([?c|?p],?t1,?1) => ?t2 = ?1)]),
 assume(succeeds find(?p,?t,?t1) & succeeds find(?p,?t,?t2),
  [all t2: succeeds find(?p,?t,?t2) => ?t1 = ?t2,
   succeeds find(?p,?t,?t2) => ?t1 = ?t2,
   ?t1 = ?t2],
  ?t1 = ?t2)]
).

:- lemma(equivalent:characterization:1,
all [t1,t2,p]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds partition(?p) & succeeds equivalent(?t1,?t2,?p) =>
  ?t1 = ?t2 \/
  (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
    succeeds class_member(?t2,?c)),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p) &
 succeeds equivalent(?t1,?t2,?p),
 [def succeeds equivalent(?t1,?t2,?p) by completion,
  exist(t,
   succeeds find(?p,?t1,?t) & succeeds find(?p,?t2,?t),
   [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
      ?c = cl(?t,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t by 
     lemma(find:characterization:1),
    cases(
     ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
      ?c = cl(?t,?q),
     exist([c,q],
      succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
      ?c = cl(?t,?q),
      [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t2,?c) &
         ?c = cl(?t,?q)) \/ fails partition_member(?t2,?p) & ?t2 = ?t by 
        lemma(find:characterization:1),
       cases(
        ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t2,?c) &
         ?c = cl(?t,?q),
        exist([c2,1],
         succeeds member(?c2,?p) & succeeds class_member(?t2,?c2) &
         ?c2 = cl(?t,?1),
         [?c = ?c2 by lemma(partition:disjoint),
	  succeeds class_member(?t2,?c),
	  ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
           succeeds class_member(?t2,?c)],
         ?t1 = ?t2 \/
         (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
           succeeds class_member(?t2,?c))),
        fails partition_member(?t2,?p) & ?t2 = ?t,
        [succeeds class_member(?t2,cl(?t2,?q)),
	 succeeds class_member(?t2,?c),
	 succeeds partition_member(?t2,?p) by 
          lemma(class_member:member:partition_member),
	 ff],
        ?t1 = ?t2 \/
        (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
          succeeds class_member(?t2,?c)))],
      ?t1 = ?t2 \/
      (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
        succeeds class_member(?t2,?c))),
     fails partition_member(?t1,?p) & ?t1 = ?t,
     [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t2,?c) &
         ?c = cl(?t,?q)) \/ fails partition_member(?t2,?p) & ?t2 = ?t by 
        lemma(find:characterization:1),
      cases(
       ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t2,?c) &
        ?c = cl(?t,?q),
       exist([c,q],
        succeeds member(?c,?p) & succeeds class_member(?t2,?c) &
        ?c = cl(?t,?q),
        [succeeds class_member(?t1,cl(?t,?q)),
	 succeeds class_member(?t1,?c),
	 succeeds partition_member(?t1,?p) by 
          lemma(class_member:member:partition_member),
	 ff],
        ?t1 = ?t2 \/
        (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
          succeeds class_member(?t2,?c))),
       fails partition_member(?t2,?p) & ?t2 = ?t,
       [],
       ?t1 = ?t2 \/
       (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
         succeeds class_member(?t2,?c)))],
     ?t1 = ?t2 \/
     (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
       succeeds class_member(?t2,?c)))],
   ?t1 = ?t2 \/
   (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
     succeeds class_member(?t2,?c)))],
 ?t1 = ?t2 \/
 (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
   succeeds class_member(?t2,?c)))
).

:- lemma(equivalent:characterization:2,
all [t1,t2,c,p]: succeeds partition(?p) & succeeds member(?c,?p) &
 succeeds class_member(?t1,?c) & succeeds class_member(?t2,?c) =>
  succeeds equivalent(?t1,?t2,?p),
assume(succeeds partition(?p) & succeeds member(?c,?p) &
 succeeds class_member(?t1,?c) & succeeds class_member(?t2,?c),
 [succeeds class(?c) by lemma(partition:member),
  def succeeds class(?c) by completion,
  exist([t,q],
   ?c = cl(?t,?q) & succeeds term(?t) & succeeds partition(?q) &
   fails partition_member(?t,?q) & fails not_var_class(?t,?q),
   [succeeds find(?p,?t1,?t) by lemma(find:characterization:2),
    succeeds find(?p,?t2,?t) by lemma(find:characterization:2),
    succeeds equivalent(?t1,?t2,?p) by sld],
   succeeds equivalent(?t1,?t2,?p))],
 succeeds equivalent(?t1,?t2,?p))
).

:- lemma(equivalent:reflexive,
all [t,p]: succeeds term(?t) & succeeds partition(?p) =>
  succeeds equivalent(?t,?t,?p),
assume(succeeds term(?t) & succeeds partition(?p),
 [ex t1: succeeds find(?p,?t,?t1) by lemma(find:existence),
  exist(t1,succeeds find(?p,?t,?t1),
   [],
   succeeds equivalent(?t,?t,?p))],
 succeeds equivalent(?t,?t,?p))
).

:- lemma(equivalentL:reflexive,
all [tl,p]: succeeds termL(?tl) & succeeds partition(?p) =>
  succeeds equivalentL(?tl,?tl,?p),
[induction(
  [all tl: succeeds termL(?tl) => 
     (all p: succeeds partition(?p) => succeeds equivalentL(?tl,?tl,?p))],
  [step([],
    [],
    succeeds partition(?p) => succeeds equivalentL([],[],?p),
    all p: succeeds partition(?p) => succeeds equivalentL([],[],?p)),
   step([t,tL],
    [all p: succeeds partition(?p) => succeeds equivalentL(?tL,?tL,?p),
     succeeds term(?t),
     succeeds termL(?tL)],
    assume(succeeds partition(?p),
     [succeeds equivalentL(?tL,?tL,?p),
      succeeds equivalent(?t,?t,?p) by lemma(equivalent:reflexive),
      succeeds equivalentL([?t|?tL],[?t|?tL],?p) by sld],
     succeeds equivalentL([?t|?tL],[?t|?tL],?p)),
    all p: succeeds partition(?p) => 
      succeeds equivalentL([?t|?tL],[?t|?tL],?p))]),
 assume(succeeds termL(?tl) & succeeds partition(?p),
  [all p: succeeds partition(?p) => succeeds equivalentL(?tl,?tl,?p),
   succeeds partition(?p) => succeeds equivalentL(?tl,?tl,?p),
   succeeds equivalentL(?tl,?tl,?p)],
  succeeds equivalentL(?tl,?tl,?p))]
).

:- lemma(equivalent:equal,
all [t1,t2,p]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds partition(?p) & ?t1 = ?t2 => succeeds equivalent(?t1,?t2,?p),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p) &
 ?t1 = ?t2,
 [succeeds list(?p) by lemma(partition:list),
  succeeds equivalent(?t1,?t1,?p) by lemma(equivalent:reflexive),
  def succeeds equivalent(?t1,?t1,?p) by completion,
  succeeds equivalent(?t1,?t2,?p) by completion],
 succeeds equivalent(?t1,?t2,?p))
).

:- lemma(equivalent:symmetric,
all [t1,t2,p]: succeeds partition(?p) & succeeds equivalent(?t1,?t2,?p) =>
  succeeds equivalent(?t2,?t1,?p),
assume(succeeds partition(?p) &
 succeeds equivalent(?t1,?t2,?p),
 [def succeeds equivalent(?t1,?t2,?p) by completion,
  exist(t,
   succeeds find(?p,?t1,?t) & succeeds find(?p,?t2,?t),
   [],
   ex t: succeeds find(?p,?t2,?t) & succeeds find(?p,?t1,?t)),
  succeeds equivalent(?t2,?t1,?p) by completion],
 succeeds equivalent(?t2,?t1,?p))
).

:- lemma(equivalentL:symmetric,
all [tl1,tl2,p]: succeeds equivalentL(?tl1,?tl2,?p) &
 succeeds partition(?p) => succeeds equivalentL(?tl2,?tl1,?p),
[induction(
  [all [tl1,tl2,p]: succeeds equivalentL(?tl1,?tl2,?p) => 
     succeeds partition(?p) => succeeds equivalentL(?tl2,?tl1,?p)],
  [step([0],[],[],succeeds partition(?0) => succeeds equivalentL([],[],?0)),
   step([t1,t1L,t2,t2L,p],
    [succeeds partition(?p) => succeeds equivalentL(?t2L,?t1L,?p),
     succeeds equivalent(?t1,?t2,?p),
     succeeds equivalentL(?t1L,?t2L,?p)],
    assume(succeeds partition(?p),
     [succeeds equivalentL(?t2L,?t1L,?p),
      succeeds equivalent(?t2,?t1,?p) by lemma(equivalent:symmetric),
      succeeds equivalentL([?t2|?t2L],[?t1|?t1L],?p) by sld],
     succeeds equivalentL([?t2|?t2L],[?t1|?t1L],?p)),
    succeeds partition(?p) => 
     succeeds equivalentL([?t2|?t2L],[?t1|?t1L],?p))]),
 assume(succeeds equivalentL(?tl1,?tl2,?p) & succeeds partition(?p),
  [succeeds partition(?p) => succeeds equivalentL(?tl2,?tl1,?p),
   succeeds partition(?p) => succeeds equivalentL(?tl2,?tl1,?p),
   succeeds equivalentL(?tl2,?tl1,?p)],
  succeeds equivalentL(?tl2,?tl1,?p))]
).

:- lemma(equivalent:transitive,
all [t1,t2,t3,p]: succeeds equivalent(?t1,?t2,?p) &
 succeeds equivalent(?t2,?t3,?p) =>
  succeeds equivalent(?t1,?t3,?p),
assume(succeeds equivalent(?t1,?t2,?p) &
 succeeds equivalent(?t2,?t3,?p),
 [def succeeds equivalent(?t1,?t2,?p) by completion,
  exist(t,
   succeeds find(?p,?t1,?t) & succeeds find(?p,?t2,?t),
   [def succeeds equivalent(?t2,?t3,?p) by completion,
    exist(s,
     succeeds find(?p,?t2,?s) & succeeds find(?p,?t3,?s),
     [?s = ?t by lemma(find:uniqueness),
      succeeds find(?p,?t3,?t),
      succeeds equivalent(?t1,?t3,?p) by sld],
     succeeds equivalent(?t1,?t3,?p))],
   succeeds equivalent(?t1,?t3,?p))],
 succeeds equivalent(?t1,?t3,?p))
).

:- lemma(equivalentL:transitive,
all [tl1,tl2,tl3,p]: succeeds equivalentL(?tl1,?tl2,?p) &
 succeeds equivalentL(?tl2,?tl3,?p) =>
  succeeds equivalentL(?tl1,?tl3,?p),
[induction(
  [all [tl1,tl2,p]: succeeds equivalentL(?tl1,?tl2,?p) => 
     (all tl3: succeeds equivalentL(?tl2,?tl3,?p) => 
        succeeds equivalentL(?tl1,?tl3,?p))],
  [step([0],
    [],
    succeeds equivalentL([],?tl3,?0) => succeeds equivalentL([],?tl3,?0),
    all tl3: succeeds equivalentL([],?tl3,?0) => 
      succeeds equivalentL([],?tl3,?0)),
   step([t1,t1L,t2,t2L,p],
    [all tl3: succeeds equivalentL(?t2L,?tl3,?p) => 
       succeeds equivalentL(?t1L,?tl3,?p),
     succeeds equivalent(?t1,?t2,?p),
     succeeds equivalentL(?t1L,?t2L,?p)],
    assume(succeeds equivalentL([?t2|?t2L],?tl3,?p),
     [def succeeds equivalentL([?t2|?t2L],?tl3,?p) by completion,
      exist([0,1],
       ?tl3 = [?0|?1] & succeeds equivalent(?t2,?0,?p) &
       succeeds equivalentL(?t2L,?1,?p),
       [succeeds equivalent(?t1,?0,?p) by lemma(equivalent:transitive),
	succeeds equivalentL(?t1L,?1,?p),
	succeeds equivalentL([?t1|?t1L],[?0|?1],?p) by sld,
	succeeds equivalentL([?t1|?t1L],?tl3,?p)],
       succeeds equivalentL([?t1|?t1L],?tl3,?p))],
     succeeds equivalentL([?t1|?t1L],?tl3,?p)),
    all tl3: succeeds equivalentL([?t2|?t2L],?tl3,?p) => 
      succeeds equivalentL([?t1|?t1L],?tl3,?p))]),
 assume(succeeds equivalentL(?tl1,?tl2,?p) &
  succeeds equivalentL(?tl2,?tl3,?p),
  [all tl3: succeeds equivalentL(?tl2,?tl3,?p) => 
     succeeds equivalentL(?tl1,?tl3,?p),
   succeeds equivalentL(?tl2,?tl3,?p) => succeeds equivalentL(?tl1,?tl3,?p),
   succeeds equivalentL(?tl1,?tl3,?p)],
  succeeds equivalentL(?tl1,?tl3,?p))]
).

:- lemma(find_delete:member:class,
all [p1,t,p2,c1]: succeeds find_delete(?p1,?t,?p2,?c1) =>
  (all c2: succeeds member(?c2,?p1) =>
     succeeds member(?c2,?p2) \/ ?c2 = ?c1),
[induction(
  [all [p1,t,p2,c1]: succeeds find_delete(?p1,?t,?p2,?c1) => 
     (all c2: succeeds member(?c2,?p1) => succeeds member(?c2,?p2) \/
        ?c2 = ?c1)],
  [step([t],
    [],
    assume(succeeds member(?c2,[]),
     [],
     succeeds member(?c2,[]) \/ ?c2 = cl(?t,[])),
    all c2: succeeds member(?c2,[]) => succeeds member(?c2,[]) \/
      ?c2 = cl(?t,[])),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds member(?0,[?c1|?p1]),
     [def succeeds member(?0,[?c1|?p1]) by completion,
      cases(?0 = ?c1,
       [],
       succeeds member(?0,?p1),
       [],
       succeeds member(?0,?p3) \/ ?0 = ?c2)],
     succeeds member(?0,?p3) \/ ?0 = ?c2),
    all 0: succeeds member(?0,[?c1|?p1]) => succeeds member(?0,?p3) \/
      ?0 = ?c2),
   step([c1,p1,t,p3,c2,p2],
    [all 0: succeeds member(?0,?p1) => succeeds member(?0,?p2) \/ ?0 = ?c2,
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds member(?0,[?c1|?p1]),
     [def succeeds member(?0,[?c1|?p1]) by completion,
      cases(?0 = ?c1,
       [succeeds member(?0,[?0|?p2]) by sld,
	succeeds member(?0,?p3)],
       succeeds member(?0,?p1),
       [succeeds member(?0,?p2) \/ ?0 = ?c2,
	cases(succeeds member(?0,?p2),
         [],
         ?0 = ?c2,
         [],
         succeeds member(?0,?p3) \/ ?0 = ?c2)],
       succeeds member(?0,?p3) \/ ?0 = ?c2)],
     succeeds member(?0,?p3) \/ ?0 = ?c2),
    all 0: succeeds member(?0,[?c1|?p1]) => succeeds member(?0,?p3) \/
      ?0 = ?c2)]),
 assume(succeeds find_delete(?p1,?t,?p2,?c1),
  [all c2: succeeds member(?c2,?p1) => succeeds member(?c2,?p2) \/ 
     ?c2 = ?c1,
   all c2: succeeds member(?c2,?p1) => succeeds member(?c2,?p2) \/ 
     ?c2 = ?c1],
  all c2: succeeds member(?c2,?p1) => succeeds member(?c2,?p2) \/ ?c2 = ?c1)]
).

:- lemma(find_delete:twice:member,
all [p1,p2,p3,t1,t2,c1,c2]: succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) => (all c: succeeds member(?c,?p1) =>
    succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2),
assume(succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2),
 assume(succeeds member(?c,?p1),
  [all c: succeeds member(?c,?p1) => succeeds member(?c,?p2) \/ ?c = ?c1 by
    lemma(find_delete:member:class),
   succeeds member(?c,?p2) \/ ?c = ?c1,
   cases(succeeds member(?c,?p2),
    [all c: succeeds member(?c,?p2) => succeeds member(?c,?p3) \/ ?c = ?c2 by
      lemma(find_delete:member:class),
     succeeds member(?c,?p3) \/ ?c = ?c2,
     succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2],
    ?c = ?c1,
    [],
    succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2)],
  succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2),
 all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c1 \/
   ?c = ?c2)
).

:- definition_pred(sub_partition,2,
all [p1,p2]: sub_partition(?p1,?p2) <=>
 (all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) &
  succeeds equivalent(?t1,?t2,?p1) =>
  succeeds equivalent(?t1,?t2,?p2))
).

:- lemma(sub_partition:reflexive,
all p: succeeds partition(?p) => sub_partition(?p,?p),
assume(succeeds partition(?p),
 [assume(succeeds term(?t1) & succeeds term(?t2) &
   succeeds equivalent(?t1,?t2,?p),
   [],
   succeeds equivalent(?t1,?t2,?p)),
  sub_partition(?p,?p) by introduction(sub_partition,2)],
 sub_partition(?p,?p))
).

:- lemma(sub_partition:transitive,
all [p1,p2,p3]: sub_partition(?p1,?p2) & sub_partition(?p2,?p3) =>
  sub_partition(?p1,?p3),
assume(sub_partition(?p1,?p2) & sub_partition(?p2,?p3),
 [assume(succeeds term(?t1) & succeeds term(?t2) &
   succeeds equivalent(?t1,?t2,?p1),
   [all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds equivalent(?t1,?t2,?p1) => succeeds equivalent(?t1,?t2,?p2) by
     elimination(sub_partition,2),
    all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds equivalent(?t1,?t2,?p2) => succeeds equivalent(?t1,?t2,?p3) by
     elimination(sub_partition,2)],
   succeeds equivalent(?t1,?t2,?p3)),
  sub_partition(?p1,?p3) by introduction(sub_partition,2)],
 sub_partition(?p1,?p3))
).

:- lemma(sub_partition:equivalentL,
all [p1,p2,tl1,tl2]: succeeds equivalentL(?tl1,?tl2,?p1) &
 succeeds termL(?tl1) & succeeds termL(?tl2) & sub_partition(?p1,?p2) =>
  succeeds equivalentL(?tl1,?tl2,?p2),
[induction(
  [all [tl1,tl2,p1]: succeeds equivalentL(?tl1,?tl2,?p1) => 
     (all p2: succeeds termL(?tl1) & succeeds termL(?tl2) &
       sub_partition(?p1,?p2) => succeeds equivalentL(?tl1,?tl2,?p2))],
  [step([0],
    [],
    succeeds termL([]) & succeeds termL([]) & sub_partition(?0,?p2) => 
     succeeds equivalentL([],[],?p2),
    all p2: succeeds termL([]) & succeeds termL([]) & sub_partition(?0,?p2) =>
      succeeds equivalentL([],[],?p2)),
   step([t1,t1L,t2,t2L,p],
    [all p2: succeeds termL(?t1L) & succeeds termL(?t2L) &
      sub_partition(?p,?p2) => succeeds equivalentL(?t1L,?t2L,?p2),
     succeeds equivalent(?t1,?t2,?p),
     succeeds equivalentL(?t1L,?t2L,?p)],
    assume(succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
     sub_partition(?p,?p2),
     [def succeeds termL([?t1|?t1L]) by completion,
      def succeeds termL([?t2|?t2L]) by completion,
      succeeds equivalentL(?t1L,?t2L,?p2),
      all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) &
       succeeds equivalent(?t1,?t2,?p) => succeeds equivalent(?t1,?t2,?p2) by
       elimination(sub_partition,2),
      succeeds equivalent(?t1,?t2,?p2),
      succeeds equivalentL([?t1|?t1L],[?t2|?t2L],?p2) by sld],
     succeeds equivalentL([?t1|?t1L],[?t2|?t2L],?p2)),
    all p2: succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
     sub_partition(?p,?p2) => 
      succeeds equivalentL([?t1|?t1L],[?t2|?t2L],?p2))]),
 assume(succeeds equivalentL(?tl1,?tl2,?p1) & succeeds termL(?tl1) &
  succeeds termL(?tl2) & sub_partition(?p1,?p2),
  [all p2: succeeds termL(?tl1) & succeeds termL(?tl2) &
    sub_partition(?p1,?p2) => succeeds equivalentL(?tl1,?tl2,?p2),
   succeeds termL(?tl1) & succeeds termL(?tl2) & sub_partition(?p1,?p2) => 
    succeeds equivalentL(?tl1,?tl2,?p2),
   succeeds equivalentL(?tl1,?tl2,?p2)],
  succeeds equivalentL(?tl1,?tl2,?p2))]
).

:- lemma(find_delete:sub_partition,
all [p1,p3,p4,c1,c2,t3,t4,q1,q2]: (all c: succeeds member(?c,?p1) =>
   succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2) &
 succeeds partition(?p1) & succeeds partition(?p4) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] =>
  sub_partition(?p1,?p4),
assume(
 (all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c1 \/
    ?c = ?c2) & succeeds partition(?p1) & succeeds partition(?p4) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t4,[?c1|?q2])|?p3],
 [assume(succeeds term(?s1) & succeeds term(?s2) &
   succeeds equivalent(?s1,?s2,?p1),
   [?s1 = ?s2 \/
    (ex c: succeeds member(?c,?p1) & succeeds class_member(?s1,?c) &
      succeeds class_member(?s2,?c)) by 
     lemma(equivalent:characterization:1),
    cases(?s1 = ?s2,
     [succeeds equivalent(?s1,?s1,?p4) by lemma(equivalent:reflexive),
      succeeds equivalent(?s1,?s2,?p4)],
     ex c: succeeds member(?c,?p1) & succeeds class_member(?s1,?c) &
      succeeds class_member(?s2,?c),
     exist(c,
      succeeds member(?c,?p1) & succeeds class_member(?s1,?c) &
      succeeds class_member(?s2,?c),
      [succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2,
       cases(
	[case(succeeds member(?c,?p3),
	  [succeeds member(?c,[cl(?t4,[?c1|?q2])|?p3]) by sld,
	   succeeds member(?c,?p4),
	   succeeds equivalent(?s1,?s2,?p4) by 
	    lemma(equivalent:characterization:2)]),
	 case(?c = ?c1,
	  [succeeds class_member(?s1,cl(?t4,[?c1|?q2])),
	   succeeds class_member(?s2,cl(?t4,[?c1|?q2])),
	   succeeds member(cl(?t4,[?c1|?q2]),[cl(?t4,[?c1|?q2])|?p3]) by sld,
	   succeeds member(cl(?t4,[?c1|?q2]),?p4),
	   succeeds equivalent(?s1,?s2,?p4) by 
	    lemma(equivalent:characterization:2)]),
	 case(?c = ?c2,
	  [def succeeds class_member(?s1,cl(?t4,?q2)) by completion,
	   cases(?s1 = ?t4,
	    [],
	    succeeds partition_member(?s1,?q2),
	    [],
	    succeeds class_member(?s1,cl(?t4,[?c1|?q2]))),
	   def succeeds class_member(?s2,cl(?t4,?q2)) by completion,
	   cases(?s2 = ?t4,
	    [],
	    succeeds partition_member(?s2,?q2),
	    [],
	    succeeds class_member(?s2,cl(?t4,[?c1|?q2]))),
	   succeeds member(cl(?t4,[?c1|?q2]),[cl(?t4,[?c1|?q2])|?p3]) by sld,
	   succeeds member(cl(?t4,[?c1|?q2]),?p4),
	   succeeds equivalent(?s1,?s2,?p4) by 
	    lemma(equivalent:characterization:2)])],
	succeeds equivalent(?s1,?s2,?p4))],
      succeeds equivalent(?s1,?s2,?p4)),
     succeeds equivalent(?s1,?s2,?p4))],
   succeeds equivalent(?s1,?s2,?p4)),
  sub_partition(?p1,?p4) by introduction(sub_partition,2)],
 sub_partition(?p1,?p4))
).

:- lemma(union_find:union_findL:sub_partition,
(all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) =>
   (succeeds term(?t1) & succeeds term(?t2) &
    succeeds partition(?p1) => sub_partition(?p1,?p2))) &
(all [tl1,tl2,p1,p2]: succeeds union_findL(?tl1,?tl2,?p1,?p2) =>
   (succeeds termL(?tl1) & succeeds termL(?tl2) &
    succeeds partition(?p1) => sub_partition(?p1,?p2))),
induction(
 [all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) => 
    succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
     sub_partition(?p1,?p2),
  all [tl1,tl2,p1,p2]: succeeds union_findL(?tl1,?tl2,?p1,?p2) => 
    succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p1) =>
     sub_partition(?p1,?p2)],
 [step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    succeeds class_member(?t2,?c1),
    ?p4 = ?p1],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [sub_partition(?p1,?p1) by lemma(sub_partition:reflexive),
     sub_partition(?p1,?p4)],
    sub_partition(?p1,?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    sub_partition(?p1,?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    succeeds var_form(?t3),
    ?p4 = [cl(?t4,[?c1|?q2])|?p3]],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [succeeds union_find(?t1,?t2,?p1,?p4) by sld,
     succeeds partition(?p4) by corollary(union_find:types),
     all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c1 \/
       ?c = ?c2 by lemma(find_delete:twice:member),
     sub_partition(?p1,?p4) by lemma(find_delete:sub_partition)],
    sub_partition(?p1,?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    sub_partition(?p1,?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    succeeds var_form(?t4),
    ?p4 = [cl(?t3,[?c2|?q1])|?p3]],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [succeeds union_find(?t1,?t2,?p1,?p4) by sld,
     succeeds partition(?p4) by corollary(union_find:types),
     all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c1 \/
       ?c = ?c2 by lemma(find_delete:twice:member),
     assume(succeeds member(?c,?p1),
      [succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2,
       succeeds member(?c,?p3) \/ ?c = ?c2 \/ ?c = ?c1],
      succeeds member(?c,?p3) \/ ?c = ?c2 \/ ?c = ?c1),
     all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c2 \/
       ?c = ?c1,
     sub_partition(?p1,?p4) by lemma(find_delete:sub_partition)],
    sub_partition(?p1,?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    sub_partition(?p1,?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds termL(?t1L) & succeeds termL(?t2L) &
    succeeds partition([cl(?t4,[?c1|?q2])|?p3]) => 
     sub_partition([cl(?t4,[?c1|?q2])|?p3],?p4),
    succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    fails var_form(?t4),
    ?t3 = [?tag|?t1L],
    ?t4 = [?tag|?t2L],
    succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
    [succeeds termL(?t1L) & succeeds termL(?t2L) &
     succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
      lemma(find_delete:twice:partition),
     [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
     ex p5: ?p5 = [cl(?t4,[?c1|?q2])|?p3],
     exist(p5,
      ?p5 = [cl(?t4,[?c1|?q2])|?p3],
      [succeeds partition(?p5),
       all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ 
         ?c = ?c1 \/ ?c = ?c2 by lemma(find_delete:twice:member),
       sub_partition(?p1,?p5) by lemma(find_delete:sub_partition),
       sub_partition([cl(?t4,[?c1|?q2])|?p3],?p4),
       sub_partition(?p5,?p4),
       sub_partition(?p1,?p4) by lemma(sub_partition:transitive)],
      sub_partition(?p1,?p4))],
    sub_partition(?p1,?p4)),
   succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
    sub_partition(?p1,?p4)),
  step([p],
   [],
   assume(succeeds termL([]) & succeeds termL([]) & succeeds partition(?p),
    sub_partition(?p,?p) by lemma(sub_partition:reflexive),
    sub_partition(?p,?p)),
   succeeds termL([]) & succeeds termL([]) & succeeds partition(?p) => 
    sub_partition(?p,?p)),
  step([t1,t1L,t2,t2L,p1,p3,p2],
   [succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
     sub_partition(?p1,?p2),
    succeeds termL(?t1L) & succeeds termL(?t2L) & succeeds partition(?p2) =>
     sub_partition(?p2,?p3),
    succeeds union_find(?t1,?t2,?p1,?p2),
    succeeds union_findL(?t1L,?t2L,?p2,?p3)],
   assume(succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
    succeeds partition(?p1),
    [def succeeds termL([?t1|?t1L]) by completion,
     def succeeds termL([?t2|?t2L]) by completion,
     sub_partition(?p1,?p2),
     succeeds partition(?p2) by corollary(union_find:types),
     sub_partition(?p2,?p3),
     sub_partition(?p1,?p3) by lemma(sub_partition:transitive)],
    sub_partition(?p1,?p3)),
   succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
   succeeds partition(?p1) => sub_partition(?p1,?p3))])
).

:- corollary(union_find:sub_partition,
all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) &
 succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) =>
  sub_partition(?p1,?p2),
assume(succeeds union_find(?t1,?t2,?p1,?p2) & succeeds term(?t1) &
 succeeds term(?t2) & succeeds partition(?p1),
 [all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) => 
    succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
     sub_partition(?p1,?p2) by 
   lemma(union_find:union_findL:sub_partition),
  succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) => 
   sub_partition(?p1,?p2),
  sub_partition(?p1,?p2)],
 sub_partition(?p1,?p2))
).

:- corollary(union_findL:sub_partition,
all [tl1,tl2,p1,p2]: succeeds union_findL(?tl1,?tl2,?p1,?p2) &
 succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p1) =>
  sub_partition(?p1,?p2),
assume(succeeds union_findL(?tl1,?tl2,?p1,?p2) & succeeds termL(?tl1) &
 succeeds termL(?tl2) & succeeds partition(?p1),
 [succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p1) => 
   sub_partition(?p1,?p2) by 
   lemma(union_find:union_findL:sub_partition),
  sub_partition(?p1,?p2)],
 sub_partition(?p1,?p2))
).

%-----------------------------------------------------------------------
% part4
%-----------------------------------------------------------------------

:- definition_pred(field_term,3,
all [t,p,l]: field_term(?t,?p,?l) <=>
 (all t1: succeeds subterm(?t1,?t) =>
    succeeds partition_member(?t1,?p) \/ succeeds member(?t1,?l))
).

:- definition_pred(field_termL,3,
all [tl,p,l]: field_termL(?tl,?p,?l) <=>
 (all t: succeeds member(?t,?tl) => field_term(?t,?p,?l))
).

:- definition_pred(field_partition,2,
all [p,l]: field_partition(?p,?l) <=>
 (all t: succeeds partition_member(?t,?p) => field_term(?t,?p,?l))
).

:- definition_pred(field,4,
all [t1,t2,p,l]: field(?t1,?t2,?p,?l) <=>
 succeeds list(?l) & field_term(?t1,?p,?l) & field_term(?t2,?p,?l) &
 field_partition(?p,?l)
).

:- definition_pred(fieldL,4,
all [tl1,tl2,p,l]: fieldL(?tl1,?tl2,?p,?l) <=>
 succeeds list(?l) & field_termL(?tl1,?p,?l) & field_termL(?tl2,?p,?l) &
 field_partition(?p,?l)
).

:- definition_pred(sub_field,4,
all [p1,l1,p2,l2]: sub_field(?p1,?l1,?p2,?l2) <=>
 (all t: succeeds partition_member(?t,?p1) =>
    succeeds partition_member(?t,?p2)) &
 (all t: succeeds member(?t,?l1) =>
    succeeds partition_member(?t,?p2) \/ succeeds member(?t,?l2))
).

:- lemma(field_term:1,
all [t,p,l]: field_term(?t,?p,?l) =>
  succeeds partition_member(?t,?p) \/ succeeds member(?t,?l),
assume(field_term(?t,?p,?l),
 [all t1: succeeds subterm(?t1,?t) => succeeds partition_member(?t1,?p) \/
    succeeds member(?t1,?l) by elimination(field_term,3),
  succeeds subterm(?t,?t),
  succeeds partition_member(?t,?p) \/ succeeds member(?t,?l)],
 succeeds partition_member(?t,?p) \/ succeeds member(?t,?l))
).

:- lemma(find_delete:length,
all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) &
 succeeds term(?t) & succeeds partition(?p1) =>
  (succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2))) \/
  (fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c = cl(?t,[])),
[induction(
  [all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) => 
     succeeds term(?t) & succeeds partition(?p1) => 
      succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)) \/
      fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c = cl(?t,[])],
  [step([t],
    [],
    [],
    succeeds term(?t) & succeeds partition([]) => 
     succeeds partition_member(?t,[]) & lh([]) = s(lh([])) \/
     fails partition_member(?t,[]) & [] = [] & cl(?t,[]) = cl(?t,[])),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds term(?t) & succeeds partition([?c1|?p1]),
     [succeeds partition_member(?t,[?c1|?p1]),
      succeeds list([?c1|?p1]) by lemma(partition:list),
      def succeeds list([?c1|?p1]) by completion,
      succeeds list(?p1),
      lh([?c1|?p1]) = s(lh(?p1)) by corollary(lh:cons),
      succeeds partition_member(?t,[?c1|?p1]) & lh([?c1|?p1]) = s(lh(?p3))],
     succeeds partition_member(?t,[?c1|?p1]) & lh([?c1|?p1]) = s(lh(?p3)) \/
     fails partition_member(?t,[?c1|?p1]) & ?p3 = [?c1|?p1] &
     ?c2 = cl(?t,[])),
    succeeds term(?t) & succeeds partition([?c1|?p1]) => 
     succeeds partition_member(?t,[?c1|?p1]) & lh([?c1|?p1]) = s(lh(?p3)) \/
     fails partition_member(?t,[?c1|?p1]) & ?p3 = [?c1|?p1] &
     ?c2 = cl(?t,[])),
   step([c1,p1,t,p3,c2,p2],
    [succeeds term(?t) & succeeds partition(?p1) => 
      succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)) \/
      fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c2 = cl(?t,[]),
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds term(?t) & succeeds partition([?c1|?p1]),
     [def succeeds partition([?c1|?p1]) by completion,
      succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)) \/
      fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c2 = cl(?t,[]),
      cases(succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)),
       [succeeds partition_member(?t,[?c1|?p1]),
	succeeds list(?p1) by lemma(partition:list),
	lh([?c1|?p1]) = s(lh(?p1)) by corollary(lh:cons),
	succeeds partition(?p2) & succeeds class(?c2) by 
         lemma(find_delete:types),
	succeeds list(?p2) by lemma(partition:list),
	lh([?c1|?p2]) = s(lh(?p2)) by corollary(lh:cons),
	lh(?p3) = s(lh(?p2)),
	lh([?c1|?p1]) = s(lh(?p1)) = s(s(lh(?p2))) = s(lh(?p3)),
	succeeds partition_member(?t,[?c1|?p1]) & lh([?c1|?p1]) = s(lh(?p3))],
       fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c2 = cl(?t,[]),
       [],
       succeeds partition_member(?t,[?c1|?p1]) & lh([?c1|?p1]) = s(lh(?p3)) \/
       fails partition_member(?t,[?c1|?p1]) & ?p3 = [?c1|?p1] &
       ?c2 = cl(?t,[]))],
     succeeds partition_member(?t,[?c1|?p1]) & lh([?c1|?p1]) = s(lh(?p3)) \/
     fails partition_member(?t,[?c1|?p1]) & ?p3 = [?c1|?p1] &
     ?c2 = cl(?t,[])),
    succeeds term(?t) & succeeds partition([?c1|?p1]) => 
     succeeds partition_member(?t,[?c1|?p1]) & lh([?c1|?p1]) = s(lh(?p3)) \/
     fails partition_member(?t,[?c1|?p1]) & ?p3 = [?c1|?p1] &
     ?c2 = cl(?t,[]))]),
 assume(succeeds find_delete(?p1,?t,?p2,?c) & succeeds term(?t) &
  succeeds partition(?p1),
  [succeeds term(?t) & succeeds partition(?p1) => 
    succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)) \/
    fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c = cl(?t,[]),
   succeeds term(?t) & succeeds partition(?p1) => 
    succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)) \/
    fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c = cl(?t,[]),
   succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)) \/
   fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c = cl(?t,[])],
  succeeds partition_member(?t,?p1) & lh(?p1) = s(lh(?p2)) \/
  fails partition_member(?t,?p1) & ?p2 = ?p1 & ?c = cl(?t,[]))]
).

:- lemma(find_delete:member:1,
all [p1,t1,t2,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) &
 succeeds partition_member(?t2,?p1) =>
  succeeds partition_member(?t2,?p2) \/
  succeeds class_member(?t2,?c),
[induction(
  [all [p1,t1,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) => 
     (all t2: succeeds partition_member(?t2,?p1) => 
        succeeds partition_member(?t2,?p2) \/ succeeds class_member(?t2,?c))],
  [step([t],
    [],
    assume(succeeds partition_member(?t2,[]),
     [],
     succeeds partition_member(?t2,[]) \/
     succeeds class_member(?t2,cl(?t,[]))),
    all t2: succeeds partition_member(?t2,[]) => 
      succeeds partition_member(?t2,[]) \/
      succeeds class_member(?t2,cl(?t,[]))),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds partition_member(?t2,[?c1|?p1]),
     [def succeeds partition_member(?t2,[?c1|?p1]) by completion,
      cases(succeeds class_member(?t2,?c1),
       [],
       succeeds partition_member(?t2,?p1),
       [],
       succeeds partition_member(?t2,?p3) \/ succeeds class_member(?t2,?c2))],
     succeeds partition_member(?t2,?p3) \/ succeeds class_member(?t2,?c2)),
    all t2: succeeds partition_member(?t2,[?c1|?p1]) => 
      succeeds partition_member(?t2,?p3) \/ succeeds class_member(?t2,?c2)),
   step([c1,p1,t,p3,c2,p2],
    [all t2: succeeds partition_member(?t2,?p1) => 
       succeeds partition_member(?t2,?p2) \/ succeeds class_member(?t2,?c2),
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds partition_member(?t2,[?c1|?p1]),
     [def succeeds partition_member(?t2,[?c1|?p1]) by completion,
      cases(succeeds class_member(?t2,?c1),
       [],
       succeeds partition_member(?t2,?p1),
       [succeeds partition_member(?t2,?p2) \/ succeeds class_member(?t2,?c2),
	cases(succeeds partition_member(?t2,?p2),
         [],
         succeeds class_member(?t2,?c2),
         [],
         succeeds partition_member(?t2,?p3) \/
         succeeds class_member(?t2,?c2))],
       succeeds partition_member(?t2,?p3) \/ succeeds class_member(?t2,?c2))],
     succeeds partition_member(?t2,?p3) \/ succeeds class_member(?t2,?c2)),
    all t2: succeeds partition_member(?t2,[?c1|?p1]) => 
      succeeds partition_member(?t2,?p3) \/ succeeds class_member(?t2,?c2))]),
 assume(succeeds find_delete(?p1,?t1,?p2,?c) &
  succeeds partition_member(?t2,?p1),
  [all t2: succeeds partition_member(?t2,?p1) => 
     succeeds partition_member(?t2,?p2) \/ succeeds class_member(?t2,?c),
   succeeds partition_member(?t2,?p1) => succeeds partition_member(?t2,?p2) \/
    succeeds class_member(?t2,?c),
   succeeds partition_member(?t2,?p2) \/ succeeds class_member(?t2,?c)],
  succeeds partition_member(?t2,?p2) \/ succeeds class_member(?t2,?c))]
).

:- lemma(find_delete:member:2,
all [p1,t1,t2,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) &
 succeeds partition_member(?t2,?p2) =>
  succeeds partition_member(?t2,?p1),
[induction(
  [all [p1,t1,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) => 
     (all t2: succeeds partition_member(?t2,?p2) => 
        succeeds partition_member(?t2,?p1))],
  [step([t],
    [],
    succeeds partition_member(?t2,[]) => succeeds partition_member(?t2,[]),
    all t2: succeeds partition_member(?t2,[]) => 
      succeeds partition_member(?t2,[])),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds partition_member(?t2,?p3),
     [],
     succeeds partition_member(?t2,[?c1|?p1])),
    all t2: succeeds partition_member(?t2,?p3) => 
      succeeds partition_member(?t2,[?c1|?p1])),
   step([c1,p1,t,p3,c2,p2],
    [all t2: succeeds partition_member(?t2,?p2) => 
       succeeds partition_member(?t2,?p1),
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds partition_member(?t2,?p3),
     [succeeds partition_member(?t2,[?c1|?p2]),
      def succeeds partition_member(?t2,[?c1|?p2]) by completion,
      cases(succeeds class_member(?t2,?c1),
       [],
       succeeds partition_member(?t2,?p2),
       [],
       succeeds partition_member(?t2,[?c1|?p1]))],
     succeeds partition_member(?t2,[?c1|?p1])),
    all t2: succeeds partition_member(?t2,?p3) => 
      succeeds partition_member(?t2,[?c1|?p1]))]),
 assume(succeeds find_delete(?p1,?t1,?p2,?c) &
  succeeds partition_member(?t2,?p2),
  [all t2: succeeds partition_member(?t2,?p2) => 
     succeeds partition_member(?t2,?p1),
   succeeds partition_member(?t2,?p2) => succeeds partition_member(?t2,?p1),
   succeeds partition_member(?t2,?p1)],
  succeeds partition_member(?t2,?p1))]
).

:- lemma(find_delete:member:3,
all [p1,t1,t2,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) &
 succeeds class_member(?t2,?c) =>
  succeeds partition_member(?t2,?p1) \/ ?t2 = ?t1,
[induction(
  [all [p1,t1,p2,c]: succeeds find_delete(?p1,?t1,?p2,?c) => 
     (all t2: succeeds class_member(?t2,?c) => 
        succeeds partition_member(?t2,?p1) \/ ?t2 = ?t1)],
  [step([t],
    [],
    assume(succeeds class_member(?t2,cl(?t,[])),
     [def succeeds class_member(?t2,cl(?t,[])) by completion,
      cases(?t2 = ?t,
       [],
       succeeds partition_member(?t2,[]),
       [def succeeds partition_member(?t2,[]) by completion,ff],
       ?t2 = ?t)],
     succeeds partition_member(?t2,[]) \/ ?t2 = ?t),
    all t2: succeeds class_member(?t2,cl(?t,[])) => 
      succeeds partition_member(?t2,[]) \/ ?t2 = ?t),
   step([c1,p1,t,p3,c2,p2],
    [succeeds class_member(?t,?c1),
     ?c2 = ?c1,
     ?p3 = ?p1],
    assume(succeeds class_member(?t2,?c2),
     [],
     succeeds partition_member(?t2,[?c1|?p1]) \/ ?t2 = ?t),
    all t2: succeeds class_member(?t2,?c2) => 
      succeeds partition_member(?t2,[?c1|?p1]) \/ ?t2 = ?t),
   step([c1,p1,t,p3,c2,p2],
    [all t2: succeeds class_member(?t2,?c2) => 
       succeeds partition_member(?t2,?p1) \/ ?t2 = ?t,
     fails class_member(?t,?c1),
     succeeds find_delete(?p1,?t,?p2,?c2),
     ?p3 = [?c1|?p2]],
    assume(succeeds class_member(?t2,?c2),
     [succeeds partition_member(?t2,?p1) \/ ?t2 = ?t,
      cases(succeeds partition_member(?t2,?p1),
       [],
       ?t2 = ?t,
       [],
       succeeds partition_member(?t2,[?c1|?p1]) \/ ?t2 = ?t)],
     succeeds partition_member(?t2,[?c1|?p1]) \/ ?t2 = ?t),
    all t2: succeeds class_member(?t2,?c2) => 
      succeeds partition_member(?t2,[?c1|?p1]) \/ ?t2 = ?t)]),
 assume(succeeds find_delete(?p1,?t1,?p2,?c) & 
  succeeds class_member(?t2,?c),
  [all t2: succeeds class_member(?t2,?c) => 
     succeeds partition_member(?t2,?p1) \/ ?t2 = ?t1,
   succeeds class_member(?t2,?c) => succeeds partition_member(?t2,?p1) \/
    ?t2 = ?t1,
   succeeds partition_member(?t2,?p1) \/ ?t2 = ?t1],
  succeeds partition_member(?t2,?p1) \/ ?t2 = ?t1)]
).

:- definition_pred(find_delete_abr,6,
all [t1,t2,p1,p2,c1,c2]: find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) <=>
 (all t: succeeds partition_member(?t,?p1) =>
    succeeds class_member(?t,?c1) \/
    succeeds class_member(?t,?c2) \/
    succeeds partition_member(?t,?p2)) &
 (all t: succeeds partition_member(?t,?p2) =>
    succeeds partition_member(?t,?p1)) &
 (all t: succeeds class_member(?t,?c1) =>
    ?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1)) &
 (all t: succeeds class_member(?t,?c2) =>
    ?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1))
).

:- lemma(find_delete:find_delete_abr,
all [t1,t2,p1,p2,p3,c1,c2]: succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) =>
  find_delete_abr(?t1,?t2,?p1,?p3,?c1,?c2),
assume(succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2),
 [assume(succeeds partition_member(?t,?p1),
   [succeeds partition_member(?t,?p2) \/ succeeds class_member(?t,?c1) by 
     lemma(find_delete:member:1),
    cases(succeeds partition_member(?t,?p2),
     [succeeds partition_member(?t,?p3) \/ succeeds class_member(?t,?c2) by
       lemma(find_delete:member:1),
      succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
      succeeds partition_member(?t,?p3)],
     succeeds class_member(?t,?c1),
     [],
     succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p3))],
   succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
   succeeds partition_member(?t,?p3)),
  assume(succeeds partition_member(?t,?p3),
   [succeeds partition_member(?t,?p2) by 
     lemma(find_delete:partition_member),
    succeeds partition_member(?t,?p1) by 
     lemma(find_delete:partition_member)],
   succeeds partition_member(?t,?p1)),
  assume(succeeds class_member(?t,?c1),
   [succeeds partition_member(?t,?p1) \/ ?t = ?t1 by 
     lemma(find_delete:member:3),
    ?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1)],
   ?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1)),
  assume(succeeds class_member(?t,?c2),
   [succeeds partition_member(?t,?p2) \/ ?t = ?t2 by 
     lemma(find_delete:member:3),
    cases(succeeds partition_member(?t,?p2),
     [succeeds partition_member(?t,?p1) \/ ?t = ?t1 by 
       lemma(find_delete:partition_member),
      ?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1)],
     ?t = ?t2,
     [],
     ?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1))],
   ?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1)),
  find_delete_abr(?t1,?t2,?p1,?p3,?c1,?c2) by 
   introduction(find_delete_abr,6)],
 find_delete_abr(?t1,?t2,?p1,?p3,?c1,?c2))
).

:- lemma(find_delete_abr:symmetric,
all [t1,t2,p1,p2,c1,c2]: find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) =>
  find_delete_abr(?t1,?t2,?p1,?p2,?c2,?c1),
assume(find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2),
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds partition_member(?t,?p2) => 
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c1) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c2) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) by elimination(find_delete_abr,6),
  assume(succeeds partition_member(?t,?p1),
   [succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p2),
    succeeds class_member(?t,?c2) \/ succeeds class_member(?t,?c1) \/
    succeeds partition_member(?t,?p2)],
   succeeds class_member(?t,?c2) \/ succeeds class_member(?t,?c1) \/
   succeeds partition_member(?t,?p2)),
  find_delete_abr(?t1,?t2,?p1,?p2,?c2,?c1) by 
   introduction(find_delete_abr,6)],
 find_delete_abr(?t1,?t2,?p1,?p2,?c2,?c1))
).

:- lemma(sub_field:field_term,
all [t,p1,p2,l1,l2]: sub_field(?p1,?l1,?p2,?l2) & field_term(?t,?p1,?l1) =>
  field_term(?t,?p2,?l2),
assume(sub_field(?p1,?l1,?p2,?l2) & field_term(?t,?p1,?l1),
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds member(?t,?l1) => succeeds partition_member(?t,?p2) \/
     succeeds member(?t,?l2)) by elimination(sub_field,4),
  all t1: succeeds subterm(?t1,?t) => succeeds partition_member(?t1,?p1) \/
    succeeds member(?t1,?l1) by elimination(field_term,3),
  assume(succeeds subterm(?t1,?t),
   [succeeds partition_member(?t1,?p1) \/
    succeeds member(?t1,?l1),
    cases(succeeds partition_member(?t1,?p1),
     [],
     succeeds member(?t1,?l1),
     [],
     succeeds partition_member(?t1,?p2) \/ succeeds member(?t1,?l2))],
   succeeds partition_member(?t1,?p2) \/ succeeds member(?t1,?l2)),
  field_term(?t,?p2,?l2) by introduction(field_term,3)],
 field_term(?t,?p2,?l2))
).

:- lemma(sub_field:field_termL,
all [tl,p1,p2,l1,l2]: sub_field(?p1,?l1,?p2,?l2) &
 field_termL(?tl,?p1,?l1) =>
  field_termL(?tl,?p2,?l2),
assume(sub_field(?p1,?l1,?p2,?l2) & field_termL(?tl,?p1,?l1),
 [all t: succeeds member(?t,?tl) => field_term(?t,?p1,?l1) by 
   elimination(field_termL,3),
  assume(succeeds member(?t,?tl),
   [field_term(?t,?p1,?l1),
    field_term(?t,?p2,?l2) by lemma(sub_field:field_term)],
   field_term(?t,?p2,?l2)),
  field_termL(?tl,?p2,?l2) by introduction(field_termL,3)],
 field_termL(?tl,?p2,?l2))
).


:- lemma(fieldL:field:sub_field,
all [t1,t2,p1,p2,l1,l2,tl1,tl2]: fieldL(?tl1,?tl2,?p1,?l1) &
 field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) =>
  fieldL(?tl1,?tl2,?p2,?l2),
assume(fieldL(?tl1,?tl2,?p1,?l1) & field(?t1,?t2,?p2,?l2) &
 sub_field(?p1,?l1,?p2,?l2),
 [succeeds list(?l1) & field_termL(?tl1,?p1,?l1) & 
  field_termL(?tl2,?p1,?l1) & field_partition(?p1,?l1) by 
   elimination(fieldL,4),
  succeeds list(?l2) & field_term(?t1,?p2,?l2) & field_term(?t2,?p2,?l2) &
  field_partition(?p2,?l2) by elimination(field,4),
  field_termL(?tl1,?p2,?l2) by lemma(sub_field:field_termL),
  field_termL(?tl2,?p2,?l2) by lemma(sub_field:field_termL),
  fieldL(?tl1,?tl2,?p2,?l2) by introduction(fieldL,4)],
 fieldL(?tl1,?tl2,?p2,?l2))
).

:- lemma(field:fieldL:sub_field,
all [t1,t2,p1,p2,l1,l2,tl1,tl2]: field(?t1,?t2,?p1,?l1) &  
 fieldL(?tl1,?tl2,?p2,?l2) &sub_field(?p1,?l1,?p2,?l2) =>
  field(?t1,?t2,?p2,?l2),
assume(field(?t1,?t2,?p1,?l1) & fieldL(?tl1,?tl2,?p2,?l2) &
 sub_field(?p1,?l1,?p2,?l2),
 [succeeds list(?l1) & field_term(?t1,?p1,?l1) & field_term(?t2,?p1,?l1) &
  field_partition(?p1,?l1) by elimination(field,4),
  succeeds list(?l2) & field_termL(?tl1,?p2,?l2) &
  field_termL(?tl2,?p2,?l2) & field_partition(?p2,?l2) by 
   elimination(fieldL,4),
  field_term(?t1,?p2,?l2) by lemma(sub_field:field_term),
  field_term(?t2,?p2,?l2) by lemma(sub_field:field_term),
  field(?t1,?t2,?p2,?l2) by introduction(field,4)],
 field(?t1,?t2,?p2,?l2))
).

:- lemma(field_term:field_termL:field_termL,
all [t,tl,p,l]: field_term(?t,?p,?l) & field_termL(?tl,?p,?l) =>
  field_termL([?t|?tl],?p,?l),
assume(field_term(?t,?p,?l) & field_termL(?tl,?p,?l),
 [all t1: succeeds subterm(?t1,?t) => succeeds partition_member(?t1,?p) \/
    succeeds member(?t1,?l) by elimination(field_term,3),
  all t: succeeds member(?t,?tl) => field_term(?t,?p,?l) by 
   elimination(field_termL,3),
  assume(succeeds member(?s,[?t|?tl]),
   [def succeeds member(?s,[?t|?tl]) by completion,
    cases(?s = ?t,
     [],
     succeeds member(?s,?tl),
     [],
     field_term(?s,?p,?l))],
   field_term(?s,?p,?l)),
  field_termL([?t|?tl],?p,?l) by introduction(field_termL,3)],
 field_termL([?t|?tl],?p,?l))
).

:- lemma(field:fieldL:fieldL,
all [t1,t2,p,l,tl1,tl2]: field(?t1,?t2,?p,?l) & fieldL(?tl1,?tl2,?p,?l) =>
  fieldL([?t1|?tl1],[?t2|?tl2],?p,?l),
assume(field(?t1,?t2,?p,?l) & fieldL(?tl1,?tl2,?p,?l),
 [succeeds list(?l) & field_term(?t1,?p,?l) & field_term(?t2,?p,?l) &
  field_partition(?p,?l) by elimination(field,4),
  succeeds list(?l) & field_termL(?tl1,?p,?l) & field_termL(?tl2,?p,?l) &
  field_partition(?p,?l) by elimination(fieldL,4),
  field_termL([?t1|?tl1],?p,?l) by 
   lemma(field_term:field_termL:field_termL),
  field_termL([?t2|?tl2],?p,?l) by 
   lemma(field_term:field_termL:field_termL),
  fieldL([?t1|?tl1],[?t2|?tl2],?p,?l) by introduction(fieldL,4)],
 fieldL([?t1|?tl1],[?t2|?tl2],?p,?l))
).

:- lemma(sub_field:reflexive,
all [p,l]: sub_field(?p,?l,?p,?l),
[succeeds partition_member(?t,?p) => succeeds partition_member(?t,?p),
 assume(succeeds member(?t,?l),
  [],
  succeeds partition_member(?t,?p) \/ succeeds member(?t,?l)),
 sub_field(?p,?l,?p,?l) by introduction(sub_field,4)]
).

:- lemma(sub_field:transitive,
all [p1,p2,p3,l1,l2,l3]: sub_field(?p1,?l1,?p2,?l2) &
 sub_field(?p2,?l2,?p3,?l3) => sub_field(?p1,?l1,?p3,?l3),
assume(sub_field(?p1,?l1,?p2,?l2) & sub_field(?p2,?l2,?p3,?l3),
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds member(?t,?l1) => succeeds partition_member(?t,?p2) \/
     succeeds member(?t,?l2)) by elimination(sub_field,4),
  (all t: succeeds partition_member(?t,?p2) => 
     succeeds partition_member(?t,?p3)) &
  (all t: succeeds member(?t,?l2) => succeeds partition_member(?t,?p3) \/
     succeeds member(?t,?l3)) by elimination(sub_field,4),
  assume(succeeds partition_member(?t,?p1),
   [],
   succeeds partition_member(?t,?p3)),
  assume(succeeds member(?t,?l1),
   [succeeds partition_member(?t,?p2) \/ succeeds member(?t,?l2),
    cases(succeeds partition_member(?t,?p2),
     [],
     succeeds member(?t,?l2),
     [],
     succeeds partition_member(?t,?p3) \/ succeeds member(?t,?l3))],
   succeeds partition_member(?t,?p3) \/ succeeds member(?t,?l3)),
  sub_field(?p1,?l1,?p3,?l3) by introduction(sub_field,4)],
 sub_field(?p1,?l1,?p3,?l3))
).

:- lemma(field_termL:field_term,
all [t,tl,p,l]: field_termL([?t|?tl],?p,?l) =>
  field_term(?t,?p,?l),
assume(field_termL([?t|?tl],?p,?l),
 [all s: succeeds member(?s,[?t|?tl]) => field_term(?s,?p,?l) by 
   elimination(field_termL,3),
  field_term(?t,?p,?l)],
 field_term(?t,?p,?l))
).

:- lemma(fieldL:field,
all [t1,t2,tl1,tl2,p,l]: fieldL([?t1|?tl1],[?t2|?tl2],?p,?l) =>
  field(?t1,?t2,?p,?l),
assume(fieldL([?t1|?tl1],[?t2|?tl2],?p,?l),
 [succeeds list(?l) & field_termL([?t1|?tl1],?p,?l) &
  field_termL([?t2|?tl2],?p,?l) & field_partition(?p,?l) by 
   elimination(fieldL,4),
  field_term(?t1,?p,?l) by lemma(field_termL:field_term),
  field_term(?t2,?p,?l) by lemma(field_termL:field_term),
  field(?t1,?t2,?p,?l) by introduction(field,4)],
 field(?t1,?t2,?p,?l))
).

:- lemma(field_termL:field_termL,
all [t,tl,p,l]: field_termL([?t|?tl],?p,?l) =>
  field_termL(?tl,?p,?l),
assume(field_termL([?t|?tl],?p,?l),
 [all s: succeeds member(?s,[?t|?tl]) => field_term(?s,?p,?l) by 
   elimination(field_termL,3),
  assume(succeeds member(?s,?tl),[],field_term(?s,?p,?l)),
  all s: succeeds member(?s,?tl) => field_term(?s,?p,?l),
  field_termL(?tl,?p,?l) by introduction(field_termL,3)],
 field_termL(?tl,?p,?l))
).

:- lemma(fieldL:fieldL,
all [t1,t2,tl1,tl2,p,l]: fieldL([?t1|?tl1],[?t2|?tl2],?p,?l) =>
  fieldL(?tl1,?tl2,?p,?l),
assume(fieldL([?t1|?tl1],[?t2|?tl2],?p,?l),
 [succeeds list(?l) & field_termL([?t1|?tl1],?p,?l) &
  field_termL([?t2|?tl2],?p,?l) & field_partition(?p,?l) by 
   elimination(fieldL,4),
  field_termL(?tl1,?p,?l) by lemma(field_termL:field_termL),
  field_termL(?tl2,?p,?l) by lemma(field_termL:field_termL),
  fieldL(?tl1,?tl2,?p,?l) by introduction(fieldL,4)],
 fieldL(?tl1,?tl2,?p,?l))
).

:- lemma(field_termL:partition_member,
all [t,x,tl,p,l]: ?t = [?x|?tl] & succeeds partition_member(?t,?p) &
  field_partition(?p,?l) => field_termL(?tl,?p,?l),
assume(?t = [?x|?tl] & succeeds partition_member(?t,?p) &
 field_partition(?p,?l),
 [all t: succeeds partition_member(?t,?p) => field_term(?t,?p,?l) by 
   elimination(field_partition,2),
  assume(succeeds member(?s,?tl),
   [field_term(?t,?p,?l),
    all t1: succeeds subterm(?t1,?t) => succeeds partition_member(?t1,?p) \/
      succeeds member(?t1,?l) by elimination(field_term,3),
    assume(succeeds subterm(?t1,?s),
     [succeeds subtermL(?t1,?tl) by sld,
      succeeds subterm(?t1,[?x|?tl]),
      succeeds subterm(?t1,?t),
      succeeds partition_member(?t1,?p) \/ succeeds member(?t1,?l)],
     succeeds partition_member(?t1,?p) \/ succeeds member(?t1,?l)),
    field_term(?s,?p,?l) by introduction(field_term,3)],
   field_term(?s,?p,?l)),
  all s: succeeds member(?s,?tl) => field_term(?s,?p,?l),
  field_termL(?tl,?p,?l) by introduction(field_termL,3)],
 field_termL(?tl,?p,?l))
).

:- lemma(field:partition_member,
all [t1,t2,c1,c2,t3,t4,tl1,tl2,x,p3,p4,l,q1,q2]: ?c1 = cl(?t3,?q1) &
 ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] &
 ?t3 = [?x|?tl1] & ?t4 = [?x|?tl2] & field(?t1,?t2,?p4,?l) =>
  fieldL(?tl1,?tl2,?p4,?l),
assume(?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & 
 ?p4 = [cl(?t4,[?c1|?q2])|?p3] & ?t3 = [?x|?tl1] & ?t4 = [?x|?tl2] &
 field(?t1,?t2,?p4,?l),
 [succeeds list(?l) & field_term(?t1,?p4,?l) & field_term(?t2,?p4,?l) &
  field_partition(?p4,?l) by elimination(field,4),
  succeeds class_member(?t3,cl(?t3,?q1)) by sld,
  succeeds class_member(?t3,?c1),
  succeeds partition_member(?t3,[cl(?t4,[?c1|?q2])|?p3]),
  succeeds partition_member(?t3,?p4),
  succeeds partition_member(?t4,[cl(?t4,[?c1|?q2])|?p3]),
  succeeds partition_member(?t4,?p4),
  field_termL(?tl1,?p4,?l) by lemma(field_termL:partition_member),
  field_termL(?tl2,?p4,?l) by lemma(field_termL:partition_member),
  fieldL(?tl1,?tl2,?p4,?l) by introduction(fieldL,4)],
 fieldL(?tl1,?tl2,?p4,?l))
).

:- lemma(field_term:delete,
all [t1,t2,p,l1,l2]: field_term(?t1,?p,?l1) &
 succeeds delete(?t2,?l1,?l2) & succeeds partition_member(?t2,?p) =>
  field_term(?t1,?p,?l2),
assume(field_term(?t1,?p,?l1) & succeeds delete(?t2,?l1,?l2) &
 succeeds partition_member(?t2,?p),
 [all s: succeeds subterm(?s,?t1) => succeeds partition_member(?s,?p) \/
    succeeds member(?s,?l1) by elimination(field_term,3),
  assume(succeeds subterm(?s,?t1),
   [succeeds partition_member(?s,?p) \/ succeeds member(?s,?l1),
    cases(succeeds partition_member(?s,?p),
     [],
     succeeds member(?s,?l1),
     [succeeds member(?s,?l2) \/ ?s = ?t2 by lemma(delete:member:1),
      cases(succeeds member(?s,?l2),
       [],
       ?s = ?t2,
       [],
       succeeds partition_member(?s,?p) \/ succeeds member(?s,?l2))],
     succeeds partition_member(?s,?p) \/ succeeds member(?s,?l2))],
   succeeds partition_member(?s,?p) \/ succeeds member(?s,?l2)),
  field_term(?t1,?p,?l2) by introduction(field_term,3)],
 field_term(?t1,?p,?l2))
).

:- lemma(field_partition:delete,
all [t,p,l1,l2]: field_partition(?p,?l1) &
 succeeds delete(?t,?l1,?l2) & succeeds partition_member(?t,?p) =>
  field_partition(?p,?l2),
assume(field_partition(?p,?l1) & succeeds delete(?t,?l1,?l2) &
 succeeds partition_member(?t,?p),
 [all t: succeeds partition_member(?t,?p) => field_term(?t,?p,?l1) by 
   elimination(field_partition,2),
  assume(succeeds partition_member(?s,?p),
   [field_term(?s,?p,?l1),
    field_term(?s,?p,?l2) by lemma(field_term:delete)],
   field_term(?s,?p,?l2)),
  all s: succeeds partition_member(?s,?p) => field_term(?s,?p,?l2),
  field_partition(?p,?l2) by introduction(field_partition,2)],
 field_partition(?p,?l2))
).

:- lemma(field:delete,
all [t1,t2,t3,p,l1,l2]: field(?t1,?t2,?p,?l1) &
 succeeds delete(?t3,?l1,?l2) & succeeds partition_member(?t3,?p) =>
  field(?t1,?t2,?p,?l2),
assume(field(?t1,?t2,?p,?l1) & succeeds delete(?t3,?l1,?l2) &
 succeeds partition_member(?t3,?p),
 [succeeds list(?l1) & field_term(?t1,?p,?l1) & field_term(?t2,?p,?l1) &
  field_partition(?p,?l1) by elimination(field,4),
  succeeds list(?l2) by lemma(delete:types:1),
  field_term(?t1,?p,?l2) by lemma(field_term:delete),
  field_term(?t2,?p,?l2) by lemma(field_term:delete),
  field_partition(?p,?l2) by lemma(field_partition:delete),
  field(?t1,?t2,?p,?l2) by introduction(field,4)],
 field(?t1,?t2,?p,?l2))
).

:- lemma(find_delete_abr:field_term,
all [t,t1,t2,p,p1,p2,c1,c2,s,q,l]: find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) &
 ?c2 = cl(?s,?q) & ?p = [cl(?s,[?c1|?q])|?p2] &
 field_term(?t,?p1,?l) => field_term(?t,?p,?l),
assume(find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) & ?c2 = cl(?s,?q) &
 ?p = [cl(?s,[?c1|?q])|?p2] & field_term(?t,?p1,?l),
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds partition_member(?t,?p2) => 
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c1) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c2) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) by elimination(find_delete_abr,6),
  all t1: succeeds subterm(?t1,?t) => succeeds partition_member(?t1,?p1) \/
    succeeds member(?t1,?l) by elimination(field_term,3),
  assume(succeeds subterm(?u,?t),
   [succeeds partition_member(?u,?p1) \/ succeeds member(?u,?l),
    cases(succeeds partition_member(?u,?p1),
     [succeeds class_member(?u,?c1) \/ succeeds class_member(?u,?c2) \/
      succeeds partition_member(?u,?p2),
      cases(
       [case(succeeds class_member(?u,?c1),
         [succeeds partition_member(?u,[cl(?s,[?c1|?q])|?p2]),
	  succeeds partition_member(?u,?p)]),
        case(succeeds class_member(?u,?c2),
         [def succeeds class_member(?u,cl(?s,?q)) by completion,
	  cases(?u = ?s,
           [succeeds partition_member(?s,[cl(?s,[?c1|?q])|?p2]),
	    succeeds partition_member(?u,?p)],
           succeeds partition_member(?u,?q),
           [succeeds partition_member(?u,[cl(?s,[?c1|?q])|?p2]),
	    succeeds partition_member(?u,?p)],
           succeeds partition_member(?u,?p))]),
        case(succeeds partition_member(?u,?p2),
         [])],
       succeeds partition_member(?u,?p))],
     succeeds member(?u,?l),
     [],
     succeeds partition_member(?u,?p) \/ succeeds member(?u,?l))],
   succeeds partition_member(?u,?p) \/ succeeds member(?u,?l)),
  all u: succeeds subterm(?u,?t) => succeeds partition_member(?u,?p) \/
    succeeds member(?u,?l),
  field_term(?t,?p,?l) by introduction(field_term,3)],
 field_term(?t,?p,?l))
).

:- lemma(find_delete_abr:field,
all [t1,t2,p,p1,p2,c1,c2,s,q,l]: find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) &
 ?c2 = cl(?s,?q) & ?p = [cl(?s,[?c1|?q])|?p2] &
 field(?t1,?t2,?p1,?l) => field(?t1,?t2,?p,?l),
assume(find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) & ?c2 = cl(?s,?q) &
 ?p = [cl(?s,[?c1|?q])|?p2] & field(?t1,?t2,?p1,?l),
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds partition_member(?t,?p2) => 
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c1) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c2) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) by elimination(find_delete_abr,6),
  succeeds list(?l) & field_term(?t1,?p1,?l) & field_term(?t2,?p1,?l) &
  field_partition(?p1,?l) by elimination(field,4),
  all t: succeeds partition_member(?t,?p1) => field_term(?t,?p1,?l) by 
   elimination(field_partition,2),
  field_term(?t1,?p,?l) by lemma(find_delete_abr:field_term),
  field_term(?t2,?p,?l) by lemma(find_delete_abr:field_term),
  assume(succeeds partition_member(?t,?p),
   [def succeeds partition_member(?t,[cl(?s,[?c1|?q])|?p2])
     by completion,
    cases(succeeds class_member(?t,cl(?s,[?c1|?q])),
     [def succeeds class_member(?t,cl(?s,[?c1|?q])) by completion,
      cases(?t = ?s,
       [succeeds class_member(?s,cl(?s,?q)),
	succeeds class_member(?t,?c2)],
       succeeds partition_member(?t,[?c1|?q]),
       [def succeeds partition_member(?t,[?c1|?q]) by completion,
        cases(succeeds class_member(?t,?c1),
         [],
         succeeds partition_member(?t,?q),
         [],
         succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2))],
       succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2))],
     succeeds partition_member(?t,?p2),
     [],
     succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p2)),
    cases(
     [case(succeeds class_member(?t,?c1),
       [?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1),
	cases(
         [case(?t = ?t1,[]),
          case(?t = ?t2,
           []),
          case(succeeds partition_member(?t,?p1),
           [field_term(?t,?p1,?l),
	    field_term(?t,?p,?l) by lemma(find_delete_abr:field_term)])],
         field_term(?t,?p,?l))]),
      case(succeeds class_member(?t,?c2),
       [?t = ?t1 \/ ?t = ?t2 \/ succeeds partition_member(?t,?p1),
	cases(
         [case(?t = ?t1,[]),
          case(?t = ?t2,
           []),
          case(succeeds partition_member(?t,?p1),
           [field_term(?t,?p1,?l),
	    field_term(?t,?p,?l) by lemma(find_delete_abr:field_term)])],
         field_term(?t,?p,?l))]),
      case(succeeds partition_member(?t,?p2),
       [succeeds partition_member(?t,?p1),
	field_term(?t,?p1,?l),
	field_term(?t,?p,?l) by lemma(find_delete_abr:field_term)])],
     field_term(?t,?p,?l))],
   field_term(?t,?p,?l)),
  field_partition(?p,?l) by introduction(field_partition,2),
  field(?t1,?t2,?p,?l) by introduction(field,4)],
 field(?t1,?t2,?p,?l))
).

:- lemma(find_delete_abr:sub_field,
all [t1,t2,p,p1,p2,c1,c2,s,q,l]: find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) &
 ?c2 = cl(?s,?q) & ?p = [cl(?s,[?c1|?q])|?p2] =>
  sub_field(?p1,?l,?p,?l),
assume(find_delete_abr(?t1,?t2,?p1,?p2,?c1,?c2) & ?c2 = cl(?s,?q) &
 ?p = [cl(?s,[?c1|?q])|?p2],
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds partition_member(?t,?p2) => 
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c1) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) &
  (all t: succeeds class_member(?t,?c2) => ?t = ?t1 \/ ?t = ?t2 \/
     succeeds partition_member(?t,?p1)) by elimination(find_delete_abr,6),
  assume(succeeds partition_member(?t,?p1),
   [succeeds class_member(?t,?c1) \/ succeeds class_member(?t,?c2) \/
     succeeds partition_member(?t,?p2),
    cases(
     [case(succeeds class_member(?t,?c1),[]),
      case(succeeds class_member(?t,?c2),
       [succeeds class_member(?t,cl(?s,?q)),
	def succeeds class_member(?t,cl(?s,?q)) by completion,
	cases(?t = ?s,
	 [],
	 succeeds partition_member(?t,?q),
	 [],
	 succeeds partition_member(?t,[cl(?s,[?c1|?q])|?p2]))]),
      case(succeeds partition_member(?t,?p2),
       [])],
     succeeds partition_member(?t,[cl(?s,[?c1|?q])|?p2])),
    succeeds partition_member(?t,?p)],
   succeeds partition_member(?t,?p)),
  assume(succeeds member(?t,?l),
   [],
   succeeds partition_member(?t,?p) \/ succeeds member(?t,?l)),
  sub_field(?p1,?l,?p,?l) by introduction(sub_field,4)],
 sub_field(?p1,?l,?p,?l))
).

:- lemma(sub_field:delete,
all [p1,p2,l1,l2,l3,t]: sub_field(?p1,?l1,?p2,?l2) &
 succeeds delete(?t,?l2,?l3) & succeeds partition_member(?t,?p2)
  => sub_field(?p1,?l1,?p2,?l3),
assume(sub_field(?p1,?l1,?p2,?l2) & succeeds delete(?t,?l2,?l3) &
 succeeds partition_member(?t,?p2),
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds member(?t,?l1) => succeeds partition_member(?t,?p2) \/
     succeeds member(?t,?l2)) by elimination(sub_field,4),
  assume(succeeds member(?s,?l1),
   [succeeds partition_member(?s,?p2) \/ succeeds member(?s,?l2),
    cases(succeeds partition_member(?s,?p2),
     [],
     succeeds member(?s,?l2),
     [succeeds member(?s,?l3) \/ ?s = ?t by lemma(delete:member:1),
      cases(succeeds member(?s,?l3),
       [],
       ?s = ?t,
       [],
       succeeds partition_member(?s,?p2) \/ succeeds member(?s,?l3))],
     succeeds partition_member(?s,?p2) \/ succeeds member(?s,?l3))],
   succeeds partition_member(?s,?p2) \/ succeeds member(?s,?l3)),
  all s: succeeds member(?s,?l1) => succeeds partition_member(?s,?p2) \/
    succeeds member(?s,?l3),
  sub_field(?p1,?l1,?p2,?l3) by introduction(sub_field,4)],
 sub_field(?p1,?l1,?p2,?l3))
).

:- lemma(find_delete:field:1,
all [t1,t2,t3,t4,q1,q2,p1,p2,p3,p4,c1,c2,l1]:
 succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t1,?p2,?c1) & fails class_member(?t2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] &
 field(?t1,?t2,?p1,?l1) =>
  (ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
    succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t1,?p2,?c1) & fails class_member(?t2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) & ?c1 = cl(?t3,?q1) &
 ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] & field(?t1,?t2,?p1,?l1),
 [succeeds partition(?p2) & succeeds class(?c1) by 
   lemma(find_delete:types),
  succeeds partition(?p3) & succeeds class(?c2) by 
   lemma(find_delete:types),
  find_delete_abr(?t1,?t2,?p1,?p3,?c1,?c2) by 
   lemma(find_delete:find_delete_abr),
  succeeds list(?p1) by lemma(partition:list),
  succeeds list(?p2) by lemma(partition:list),
  succeeds list(?p3) by lemma(partition:list),
  succeeds list([cl(?t4,[?c1|?q2])|?p3]),
  succeeds list(?p4),
  succeeds nat(lh(?p1)) by corollary(lh:types),
  succeeds nat(lh(?p4)) by corollary(lh:types),
  lh([cl(?t4,[?c1|?q2])|?p3]) = s(lh(?p3)) by corollary(lh:cons),
  lh(?p4) = s(lh(?p3)),
  succeeds list(?l1) & field_term(?t1,?p1,?l1) & field_term(?t2,?p1,?l1) &
  field_partition(?p1,?l1) by elimination(field,4),
  succeeds nat(lh(?l1)) by corollary(lh:types),
  field(?t1,?t2,?p4,?l1) by lemma(find_delete_abr:field),
  sub_field(?p1,?l1,?p4,?l1) by lemma(find_delete_abr:sub_field),
  succeeds partition_member(?t1,?p1) & lh(?p1) = s(lh(?p2)) \/
  fails partition_member(?t1,?p1) & ?p2 = ?p1 & ?c1 = cl(?t1,[]) by 
   lemma(find_delete:length),
  succeeds partition_member(?t2,?p2) & lh(?p2) = s(lh(?p3)) \/
    fails partition_member(?t2,?p2) & ?p3 = ?p2 & ?c2 = cl(?t2,[]) by 
     lemma(find_delete:length),
  cases(succeeds partition_member(?t1,?p1) & lh(?p1) = s(lh(?p2)),
   cases(succeeds partition_member(?t2,?p2) & lh(?p2) = s(lh(?p3)),
    [lh(?p4) = lh(?p2), lh(?p1) = s(lh(?p4)),
     succeeds lh(?p4) @< s(lh(?p4)) by lemma(less:one),
     succeeds lh(?p4) @< lh(?p1),
     succeeds lh(?p4) @+ lh(?l1) @< lh(?p1) @+ lh(?l1) by 
      lemma(less:plus:first),
     field(?t1,?t2,?p4,?l1) & sub_field(?p1,?l1,?p4,?l1) &
      succeeds lh(?p4) @+ lh(?l1) @< lh(?p1) @+ lh(?l1),
     ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)],
    fails partition_member(?t2,?p2) & ?p3 = ?p2 & ?c2 = cl(?t2,[]),
    [lh(?p4) = s(lh(?p2)), lh(?p4) = lh(?p1),
     ?c2 = cl(?t4,?q2) = ?c2 = cl(?t2,[]), ?t2 = ?t4,
     succeeds partition_member(?t4,[cl(?t4,[?c1|?q2])|?p3]),
     succeeds partition_member(?t2,?p4),
     succeeds partition_member(?t2,?p1) \/ succeeds member(?t2,?l1) by 
      lemma(field_term:1),
     cases(succeeds partition_member(?t2,?p1),
      [succeeds partition_member(?t2,?p2) \/ succeeds class_member(?t2,?c1) by
        lemma(find_delete:member:1),
       cases(succeeds partition_member(?t2,?p2),
        [],
        succeeds class_member(?t2,?c1),
        [],
        ff)],
      succeeds member(?t2,?l1),
      [],
      succeeds member(?t2,?l1)),
     ex l2: succeeds delete(?t2,?l1,?l2) by 
      lemma(delete:member:existence),
     exist(l2,
      succeeds delete(?t2,?l1,?l2),
      [field(?t1,?t2,?p4,?l2) by lemma(field:delete),
       lh(?l1) = s(lh(?l2)) by theorem(delete:length),
       succeeds list(?l2) by lemma(delete:types:1),
       succeeds nat(lh(?l2)) by corollary(lh:types),
       succeeds lh(?l2) @< s(lh(?l2)) by lemma(less:one),
       succeeds lh(?l2) @< lh(?l1),
       succeeds lh(?p4) @+ lh(?l2) @< lh(?p4) @+ lh(?l1) by 
        lemma(less:plus:second),
       succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1),
       sub_field(?p1,?l1,?p4,?l2) by lemma(sub_field:delete),
       ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
	succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)],
      ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))],
    ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
     succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)),
   fails partition_member(?t1,?p1) & ?p2 = ?p1 & ?c1 = cl(?t1,[]),
   [lh(?p1) = lh(?p2),
    cl(?t3,?q1) = cl(?t1,[]), ?t1 = ?t3,
    succeeds class_member(?t3,cl(?t3,?q1)),
    succeeds class_member(?t1,?c1),
    succeeds partition_member(?t1,[cl(?t4,[?c1|?q2])|?p3]),
    succeeds partition_member(?t1,?p4),
    succeeds partition_member(?t1,?p1) \/ succeeds member(?t1,?l1) by 
     lemma(field_term:1),
    cases(succeeds partition_member(?t1,?p1),
     [],
     succeeds member(?t1,?l1),
     [],
     succeeds member(?t1,?l1)),
    ex l2: succeeds delete(?t1,?l1,?l2) by 
     lemma(delete:member:existence),
    exist(l2,
     succeeds delete(?t1,?l1,?l2),
     [succeeds list(?l2) by lemma(delete:types:1),
      lh(?l1) = s(lh(?l2)) by theorem(delete:length),
      succeeds nat(lh(?l2)) by corollary(lh:types),
      field(?t1,?t2,?p4,?l2) by lemma(field:delete),
      cases(succeeds partition_member(?t2,?p2) & lh(?p2) = s(lh(?p3)),
       [lh(?p1) = s(lh(?p3)),
	lh(?p1) = lh(?p4),
	succeeds lh(?l2) @< s(lh(?l2)) by lemma(less:one),
	succeeds lh(?l2) @< lh(?l1),
	succeeds lh(?p1) @+ lh(?l2) @< lh(?p1) @+ lh(?l1) by 
         lemma(less:plus:second),
	succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1),
	sub_field(?p1,?l1,?p4,?l2) by lemma(sub_field:delete),
	ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
	 succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)],
       fails partition_member(?t2,?p2) & ?p3 = ?p2 & ?c2 = cl(?t2,[]),
       [?p1 = ?p3,
	lh(?p4) = s(lh(?p1)),
	cl(?t2,[]) = cl(?t4,?q2), ?t2 = ?t4,
	succeeds partition_member(?t4,[cl(?t4,[?c1|?q2])|?p3]),
	succeeds partition_member(?t2,?p4),
	succeeds partition_member(?t2,?p1) \/ succeeds member(?t2,?l1) by 
         lemma(field_term:1),
	cases(succeeds partition_member(?t2,?p1),
         [succeeds partition_member(?t2,?p2) \/
          succeeds class_member(?t2,?c1),
	  cases(succeeds partition_member(?t2,?p2),
           [],
           succeeds class_member(?t2,?c1),
           [],
           ff)],
         succeeds member(?t2,?l1),
         [],
         succeeds member(?t2,?l1)),
	contra(?t1 = ?t2,
	 [succeeds class_member(?t1,?c1),
	  succeeds class_member(?t2,?c1),
	  ff]),
	?t1 <> ?t2,
	succeeds member(?t2,?l2) by lemma(delete:member:different),
	ex l3: succeeds delete(?t2,?l2,?l3) by 
         lemma(delete:member:existence),
	exist(l3,
         succeeds delete(?t2,?l2,?l3),
         [field(?t1,?t2,?p4,?l3) by lemma(field:delete),
	  succeeds list(?l3) by lemma(delete:types:1),
	  succeeds nat(lh(?l3)) by corollary(lh:types),
	  lh(?l2) = s(lh(?l3)) by theorem(delete:length),
	  lh(?l1) = s(s(lh(?l3))),
	  lh(?p1) @+ s(lh(?l3)) = s(lh(?p1)) @+ lh(?l3) by 
           lemma(plus:successor),
	  lh(?p4) @+ lh(?l3) = s(lh(?p1)) @+ lh(?l3) = lh(?p1) @+ s(lh(?l3)),
	  succeeds nat(s(lh(?l3))),
	  succeeds s(lh(?l3)) @< s(s(lh(?l3))) by lemma(less:one),
	  succeeds s(lh(?l3)) @< lh(?l1),
	  succeeds lh(?p1) @+ s(lh(?l3)) @< lh(?p1) @+ lh(?l1) by 
           lemma(less:plus:second),
	  succeeds lh(?p4) @+ lh(?l3) @< lh(?p1) @+ lh(?l1),
	  sub_field(?p1,?l1,?p4,?l2) by lemma(sub_field:delete),
	  sub_field(?p1,?l1,?p4,?l3) by lemma(sub_field:delete),
	  field(?t1,?t2,?p4,?l3) &
	  succeeds lh(?p4) @+ lh(?l3) @< lh(?p1) @+ lh(?l1),
	  ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
	   succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)],
         ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
          succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))],
       ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
        succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))],
     ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))],
   ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
    succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))],
 ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
  succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))
).

:- lemma(field_term:extensional,
all [t,p1,p2,l]: (all t: succeeds partition_member(?t,?p1) <=>
  succeeds partition_member(?t,?p2)) & field_term(?t,?p1,?l) =>
  field_term(?t,?p2,?l),
assume(
 (all t: succeeds partition_member(?t,?p1) <=>
   succeeds partition_member(?t,?p2)) & field_term(?t,?p1,?l),
 [all t1: succeeds subterm(?t1,?t) => succeeds partition_member(?t1,?p1) \/
    succeeds member(?t1,?l) by elimination(field_term,3),
  assume(succeeds subterm(?t1,?t),
   [succeeds partition_member(?t1,?p1) \/ succeeds member(?t1,?l),
    cases(succeeds partition_member(?t1,?p1),
     [succeeds partition_member(?t1,?p1) <=>
      succeeds partition_member(?t1,?p2),
      succeeds partition_member(?t1,?p2)],
     succeeds member(?t1,?l),
     [],
     succeeds partition_member(?t1,?p2) \/ succeeds member(?t1,?l))],
   succeeds partition_member(?t1,?p2) \/ succeeds member(?t1,?l)),
  field_term(?t,?p2,?l) by introduction(field_term,3)],
 field_term(?t,?p2,?l))
).

:- lemma(field:extensional,
all [t1,t2,p1,p2,l]: (all t: succeeds partition_member(?t,?p1) <=>
  succeeds partition_member(?t,?p2)) & field(?t1,?t2,?p1,?l) =>
  field(?t1,?t2,?p2,?l),
assume(
 (all t: succeeds partition_member(?t,?p1) <=>
   succeeds partition_member(?t,?p2)) & field(?t1,?t2,?p1,?l),
 [succeeds list(?l) & field_term(?t1,?p1,?l) & field_term(?t2,?p1,?l) &
  field_partition(?p1,?l) by elimination(field,4),
  field_term(?t1,?p2,?l) by lemma(field_term:extensional),
  field_term(?t2,?p2,?l) by lemma(field_term:extensional),
  all t: succeeds partition_member(?t,?p1) => field_term(?t,?p1,?l) by 
   elimination(field_partition,2),
  assume(succeeds partition_member(?t,?p2),
   [succeeds partition_member(?t,?p1) <=>
    succeeds partition_member(?t,?p2),
    succeeds partition_member(?t,?p1),
    field_term(?t,?p1,?l),
    field_term(?t,?p2,?l) by lemma(field_term:extensional)],
   field_term(?t,?p2,?l)),
  field_partition(?p2,?l) by introduction(field_partition,2),
  field(?t1,?t2,?p2,?l) by introduction(field,4)],
 field(?t1,?t2,?p2,?l))
).

:- lemma(sub_field:extensional,
all [p1,p2,p3,l1,l2]: (all t: succeeds partition_member(?t,?p2) <=>
  succeeds partition_member(?t,?p3)) & sub_field(?p1,?l1,?p2,?l2) =>
  sub_field(?p1,?l1,?p3,?l2),
assume(
 (all t: succeeds partition_member(?t,?p2) <=>
   succeeds partition_member(?t,?p3)) & sub_field(?p1,?l1,?p2,?l2),
 [(all t: succeeds partition_member(?t,?p1) => 
     succeeds partition_member(?t,?p2)) &
  (all t: succeeds member(?t,?l1) => succeeds partition_member(?t,?p2) \/
     succeeds member(?t,?l2)) by elimination(sub_field,4),
  assume(succeeds partition_member(?t,?p1),
   [succeeds partition_member(?t,?p2),
    succeeds partition_member(?t,?p2) <=>
    succeeds partition_member(?t,?p3),
    succeeds partition_member(?t,?p3)],
   succeeds partition_member(?t,?p3)),
  assume(succeeds member(?t,?l1),
   [succeeds partition_member(?t,?p2) \/ succeeds member(?t,?l2),
    cases(succeeds partition_member(?t,?p2),
     [succeeds partition_member(?t,?p2) <=>
      succeeds partition_member(?t,?p3),
      succeeds partition_member(?t,?p3)],
     succeeds member(?t,?l2),
     [],
     succeeds partition_member(?t,?p3) \/ succeeds member(?t,?l2))],
   succeeds partition_member(?t,?p3) \/ succeeds member(?t,?l2)),
  sub_field(?p1,?l1,?p3,?l2) by introduction(sub_field,4)],
 sub_field(?p1,?l1,?p3,?l2))
).

:- lemma(partition:extensional:1,
all [c1,c2,t1,t2,p1,p2,p,t]: ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) &
 succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]) =>
  succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]),
assume(?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) &
 succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]),
 [def succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]) by completion,
  cases(succeeds class_member(?t,cl(?t2,[?c1|?p2])),
   [def succeeds class_member(?t,cl(?t2,[?c1|?p2])) by completion,
    cases(?t = ?t2,
     [succeeds class_member(?t2, cl(?t2,?p2)),
      succeeds class_member(?t,?c2),
      succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p])],
     succeeds partition_member(?t,[?c1|?p2]),
     [def succeeds partition_member(?t,[?c1|?p2]) by completion,
      cases(succeeds class_member(?t,?c1),
       [succeeds class_member(?t,cl(?t1,?p1)),
	def succeeds class_member(?t,cl(?t1,?p1)) by completion,
	cases(?t = ?t1,
	 [],
	 succeeds partition_member(?t,?p1),
	 [],
	 succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]))],
       succeeds partition_member(?t,?p2),
       [succeeds class_member(?t,cl(?t2,?p2)),
	succeeds class_member(?t,?c2),
	succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p])],
       succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]))],
     succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]))],
   succeeds partition_member(?t,?p),
   [],
   succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]))],
 succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]))
).

:- lemma(partition:extensional:2,
all [c1,c2,t1,t2,p1,p2,p]: ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) =>
  (all t: succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]) <=>
    succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p])),
assume(?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2),
 [assume(succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]),
   succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]) by 
    lemma(partition:extensional:1),
   succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p])),
  assume(succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]),
   succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]) by 
    lemma(partition:extensional:1),
   succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p])),
  succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]) <=>
  succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p])],
 all t: succeeds partition_member(?t,[cl(?t2,[?c1|?p2])|?p]) <=>
  succeeds partition_member(?t,[cl(?t1,[?c2|?p1])|?p]))
).

:- lemma(find_delete:field:2,
all [t1,t2,t3,t4,q1,q2,p1,p2,p3,p4,c1,c2,l1]:
 succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t1,?p2,?c1) & fails class_member(?t2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] &
 field(?t1,?t2,?p1,?l1) =>
  (ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
    succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
 succeeds find_delete(?p1,?t1,?p2,?c1) & fails class_member(?t2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) & ?c1 = cl(?t3,?q1) &
 ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] & field(?t1,?t2,?p1,?l1),
 [all t: succeeds partition_member(?t,[cl(?t4,[?c1|?q2])|?p3]) <=>
   succeeds partition_member(?t,[cl(?t3,[?c2|?q1])|?p3]) by 
   lemma(partition:extensional:2),
  [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
  ex p5: ?p5 = [cl(?t4,[?c1|?q2])|?p3],
  exist(p5,
   ?p5 = [cl(?t4,[?c1|?q2])|?p3],
   [ex l2: field(?t1,?t2,?p5,?l2) & sub_field(?p1,?l1,?p5,?l2) &
     succeeds lh(?p5) @+ lh(?l2) @< lh(?p1) @+ lh(?l1) by 
     lemma(find_delete:field:1),
    exist(l2,
     field(?t1,?t2,?p5,?l2) & sub_field(?p1,?l1,?p5,?l2) &
     succeeds lh(?p5) @+ lh(?l2) @< lh(?p1) @+ lh(?l1),
     [all t: succeeds partition_member(?t,?p5) <=>
       succeeds partition_member(?t,?p4),
      field(?t1,?t2,?p4,?l2) by lemma(field:extensional),
      sub_field(?p1,?l1,?p4,?l2) by lemma(sub_field:extensional),
      succeeds partition(?p2) & succeeds class(?c1) by 
       lemma(find_delete:types),
      succeeds partition(?p3) & succeeds class(?c2) by 
       lemma(find_delete:types),
      succeeds list(?p3) by lemma(partition:list),
      lh([cl(?t4,[?c1|?q2])|?p3]) = s(lh(?p3)) by corollary(lh:cons),
      lh(?p5) = s(lh(?p3)),
      lh([cl(?t3,[?c2|?q1])|?p3]) = s(lh(?p3)) by corollary(lh:cons),
      lh(?p4) = s(lh(?p3)),
      lh(?p4) = lh(?p5),
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1),
      ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1)],
     ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))],
   ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
    succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))],
 ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
  succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1))
).

:- lemma(union_find:field:success,
(all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) =>
   (all l1: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) =>
      (ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
	succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)))) &
(all [tl1,tl2,p1,p2]: succeeds union_findL(?tl1,?tl2,?p1,?p2) =>
   (all l1: succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l1) =>
      (ex l2: fieldL(?tl1,?tl2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
	succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)))),
induction(
 [all [t1,t2,p1,p2]: succeeds union_find(?t1,?t2,?p1,?p2) => 
    (all l1: succeeds term(?t1) & succeeds term(?t2) &
      succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) => 
       (ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
         succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))),
  all [tl1,tl2,p1,p2]: succeeds union_findL(?tl1,?tl2,?p1,?p2) => 
    (all l1: succeeds termL(?tl1) & succeeds termL(?tl2) &
      succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l1) => 
       (ex l2: fieldL(?tl1,?tl2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
         succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)))],
 [step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    succeeds class_member(?t2,?c1),
    ?p4 = ?p1],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
    field(?t1,?t2,?p1,?l1),
    [sub_field(?p1,?l1,?p1,?l1) by lemma(sub_field:reflexive),
     succeeds list(?l1) & field_term(?t1,?p1,?l1) & 
     field_term(?t2,?p1,?l1) & field_partition(?p1,?l1) by 
      elimination(field,4),
     succeeds nat(lh(?l1)) by corollary(lh:types),
     succeeds list(?p1) by lemma(partition:list),
     succeeds nat(lh(?p1)) by corollary(lh:types),
     succeeds nat(lh(?p1) @+ lh(?l1)) by corollary(plus:types),
     succeeds lh(?p1) @+ lh(?l1) @=< lh(?p1) @+ lh(?l1) by 
      theorem(leq:reflexive),
     field(?t1,?t2,?p4,?l1) & sub_field(?p1,?l1,?p4,?l1) &
      succeeds lh(?p4) @+ lh(?l1) @=< lh(?p1) @+ lh(?l1),
     ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)],
    ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
     succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)),
   all l1: succeeds term(?t1) & succeeds term(?t2) & 
    succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) => 
     (ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    succeeds var_form(?t3),
    ?p4 = [cl(?t4,[?c1|?q2])|?p3]],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
    field(?t1,?t2,?p1,?l1),
    [ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1) by 
      lemma(find_delete:field:1),
     exist(l2,
      field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1),
      [succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1) by 
        lemma(less:leq),
       ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
	succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)],
      ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))],
    ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
     succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)),
   all l1: succeeds term(?t1) & succeeds term(?t2) & 
    succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) => 
     (ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    succeeds var_form(?t4),
    ?p4 = [cl(?t3,[?c2|?q1])|?p3]],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
    field(?t1,?t2,?p1,?l1),
    [ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1) by 
      lemma(find_delete:field:2),
     exist(l2,
      field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
      succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l1),
      [succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1) by 
        lemma(less:leq),
       ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
	succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)],
      ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))],
    ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
     succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)),
   all l1: succeeds term(?t1) & succeeds term(?t2) & 
    succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) => 
     (ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [all l1: succeeds termL(?t1L) & succeeds termL(?t2L) &
     succeeds partition([cl(?t4,[?c1|?q2])|?p3]) &
     fieldL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?l1) => 
      (ex l2: fieldL(?t1L,?t2L,?p4,?l2) &
        sub_field([cl(?t4,[?c1|?q2])|?p3],?l1,?p4,?l2) &
        succeeds lh(?p4) @+ lh(?l2) @=< lh([cl(?t4,[?c1|?q2])|?p3]) @+
        lh(?l1)),
    succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    fails var_form(?t4),
    ?t3 = [?tag|?t1L],
    ?t4 = [?tag|?t2L],
    succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)],
   assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
    field(?t1,?t2,?p1,?l1),
    [succeeds termL(?t1L) & succeeds termL(?t2L) &
     succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
      lemma(find_delete:twice:partition),
     [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
     ex p5: ?p5 = [cl(?t4,[?c1|?q2])|?p3],
     exist(p5,
      ?p5 = [cl(?t4,[?c1|?q2])|?p3],
      [ex l2: field(?t1,?t2,?p5,?l2) & sub_field(?p1,?l1,?p5,?l2) &
        succeeds lh(?p5) @+ lh(?l2) @< lh(?p1) @+ lh(?l1) by 
        lemma(find_delete:field:1),
       exist(l2,
        field(?t1,?t2,?p5,?l2) & sub_field(?p1,?l1,?p5,?l2) &
        succeeds lh(?p5) @+ lh(?l2) @< lh(?p1) @+ lh(?l1),
        [fieldL(?t1L,?t2L,?p5,?l2) by lemma(field:partition_member),
	 fieldL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?l2),
	 ex l3: fieldL(?t1L,?t2L,?p4,?l3) &
	  sub_field([cl(?t4,[?c1|?q2])|?p3],?l2,?p4,?l3) &
	  succeeds lh(?p4) @+ lh(?l3) @=<
	  lh([cl(?t4,[?c1|?q2])|?p3]) @+ lh(?l2),
	 exist(l3,
          fieldL(?t1L,?t2L,?p4,?l3) &
          sub_field([cl(?t4,[?c1|?q2])|?p3],?l2,?p4,?l3) &
          succeeds lh(?p4) @+ lh(?l3) @=< lh([cl(?t4,[?c1|?q2])|?p3]) @+
          lh(?l2),
          [sub_field(?p5,?l2,?p4,?l3),
	   succeeds lh(?p4) @+ lh(?l3) @=< lh(?p5) @+ lh(?l2),
	   sub_field(?p1,?l1,?p4,?l3) by lemma(sub_field:transitive),
	   field(?t1,?t2,?p4,?l3) by lemma(field:fieldL:sub_field),
	   succeeds lh(?p4) @+ lh(?l3) @< lh(?p1) @+ lh(?l1) by 
            theorem(leq:less:transitive),
	   succeeds lh(?p4) @+ lh(?l3) @=< lh(?p1) @+ lh(?l1) by 
            lemma(less:leq),
	   ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
            succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)],
          ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
           succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))],
        ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
         succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))],
      ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))],
    ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
     succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)),
   all l1: succeeds term(?t1) & succeeds term(?t2) & 
    succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) => 
     (ex l2: field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l1,?p4,?l2) &
       succeeds lh(?p4) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))),
  step([p],
   [],
   assume(succeeds termL([]) & succeeds termL([]) & succeeds partition(?p) &
    fieldL([],[],?p,?l1),
    [sub_field(?p,?l1,?p,?l1) by lemma(sub_field:reflexive),
     succeeds list(?p) by lemma(partition:list),
     succeeds nat(lh(?p)) by corollary(lh:types),
     succeeds list(?l1) & field_termL([],?p,?l1) & field_termL([],?p,?l1) &
     field_partition(?p,?l1) by elimination(fieldL,4),
     succeeds nat(lh(?l1)) by corollary(lh:types),
     succeeds nat(lh(?p) @+ lh(?l1)) by corollary(plus:types),
     succeeds lh(?p) @+ lh(?l1) @=< lh(?p) @+ lh(?l1) by 
      theorem(leq:reflexive),
     ex l2: fieldL([],[],?p,?l2) & sub_field(?p,?l1,?p,?l2) &
      succeeds lh(?p) @+ lh(?l2) @=< lh(?p) @+ lh(?l1)],
    ex l2: fieldL([],[],?p,?l2) & sub_field(?p,?l1,?p,?l2) &
     succeeds lh(?p) @+ lh(?l2) @=< lh(?p) @+ lh(?l1)),
   all l1: succeeds termL([]) & succeeds termL([]) & succeeds partition(?p) &
    fieldL([],[],?p,?l1) => 
     (ex l2: fieldL([],[],?p,?l2) & sub_field(?p,?l1,?p,?l2) &
       succeeds lh(?p) @+ lh(?l2) @=< lh(?p) @+ lh(?l1))),
  step([t1,t1L,t2,t2L,p1,p3,p2],
   [all l1: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) => 
      (ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
        succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)),
    all l1: succeeds termL(?t1L) & succeeds termL(?t2L) &
     succeeds partition(?p2) & fieldL(?t1L,?t2L,?p2,?l1) => 
      (ex l2: fieldL(?t1L,?t2L,?p3,?l2) & sub_field(?p2,?l1,?p3,?l2) &
        succeeds lh(?p3) @+ lh(?l2) @=< lh(?p2) @+ lh(?l1)),
    succeeds union_find(?t1,?t2,?p1,?p2),
    succeeds union_findL(?t1L,?t2L,?p2,?p3)],
   assume(succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
    succeeds partition(?p1) & fieldL([?t1|?t1L],[?t2|?t2L],?p1,?l1),
    [field(?t1,?t2,?p1,?l1) by lemma(fieldL:field),
     def succeeds termL([?t1|?t1L]) by completion,
     def succeeds termL([?t2|?t2L]) by completion,
     ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
        succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1),
     exist(l2,
      field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
      succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1),
      [fieldL(?t1L,?t2L,?p1,?l1) by lemma(fieldL:fieldL),
       fieldL(?t1L,?t2L,?p2,?l2) by lemma(fieldL:field:sub_field),
       succeeds partition(?p2) by corollary(union_find:types),
       ex l3: fieldL(?t1L,?t2L,?p3,?l3) & sub_field(?p2,?l2,?p3,?l3) &
        succeeds lh(?p3) @+ lh(?l3) @=< lh(?p2) @+ lh(?l2),
       exist(l3,
        fieldL(?t1L,?t2L,?p3,?l3) & sub_field(?p2,?l2,?p3,?l3) &
        succeeds lh(?p3) @+ lh(?l3) @=< lh(?p2) @+ lh(?l2),
        [sub_field(?p1,?l1,?p3,?l3) by lemma(sub_field:transitive),
	 field(?t1,?t2,?p3,?l3) by lemma(field:fieldL:sub_field),
	 fieldL([?t1|?t1L],[?t2|?t2L],?p3,?l3) by 
          lemma(fieldL:field:sub_field),
	 succeeds lh(?p3) @+ lh(?l3) @=< lh(?p1) @+ lh(?l1) by 
          theorem(leq:transitive),
	 ex l2: fieldL([?t1|?t1L],[?t2|?t2L],?p3,?l2) &
	  sub_field(?p1,?l1,?p3,?l2) &
	  succeeds lh(?p3) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)],
        ex l2: fieldL([?t1|?t1L],[?t2|?t2L],?p3,?l2) &
         sub_field(?p1,?l1,?p3,?l2) &
         succeeds lh(?p3) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))],
      ex l2: fieldL([?t1|?t1L],[?t2|?t2L],?p3,?l2) &
       sub_field(?p1,?l1,?p3,?l2) &
       succeeds lh(?p3) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))],
    ex l2: fieldL([?t1|?t1L],[?t2|?t2L],?p3,?l2) &
     sub_field(?p1,?l1,?p3,?l2) &
     succeeds lh(?p3) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)),
   all l1: succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
    succeeds partition(?p1) & fieldL([?t1|?t1L],[?t2|?t2L],?p1,?l1) => 
     (ex l2: fieldL([?t1|?t1L],[?t2|?t2L],?p3,?l2) &
       sub_field(?p1,?l1,?p3,?l2) &
       succeeds lh(?p3) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)))])
).

:- corollary(union_find:success,
all [t1,t2,p1,p2,l1]: succeeds union_find(?t1,?t2,?p1,?p2) &
 succeeds term(?t1) & succeeds term(?t2) &
 succeeds partition(?p1) & field(?t1,?t2,?p1,?l1) =>
  (ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
    succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)),
assume(succeeds union_find(?t1,?t2,?p1,?p2) & succeeds term(?t1) &
 succeeds term(?t2) & succeeds partition(?p1) & field(?t1,?t2,?p1,?l1),
 [all l1: succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1) &
   field(?t1,?t2,?p1,?l1) => 
    (ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
      succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)) by 
   lemma(union_find:field:success),
  ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
   succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1)],
 ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l1,?p2,?l2) &
  succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l1))
).

:- lemma(union_findL:termination,
all n: succeeds nat(?n) &
 (all [t1,t2,p1,p2,l]: succeeds term(?t1) & succeeds term(?t2) &
   succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
    succeeds lh(?p1) @+ lh(?l) @< ?n =>
    terminates union_find(?t1,?t2,?p1,?p2)) =>
  (all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
    succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
    succeeds lh(?p1) @+ lh(?l) @< ?n =>
     terminates union_findL(?tl1,?tl2,?p1,?p3)),
assume(succeeds nat(?n) &
 (all [t1,t2,p1,p2,l]: succeeds term(?t1) & succeeds term(?t2) &
   succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
   succeeds lh(?p1) @+ lh(?l) @< ?n => 
    terminates union_find(?t1,?t2,?p1,?p2)),
 [induction(
   [all tl1: succeeds termL(?tl1) => 
      (all [tl2,p1,p3,l]: succeeds termL(?tl2) & succeeds partition(?p1) &
        fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
         terminates union_findL(?tl1,?tl2,?p1,?p3))],
   [step([],
     [],
     succeeds termL(?tl2) & succeeds partition(?p1) & 
     fieldL([],?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
      terminates union_findL([],?tl2,?p1,?p3),
     all [tl2,p1,p3,l]: succeeds termL(?tl2) & succeeds partition(?p1) &
      fieldL([],?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
       terminates union_findL([],?tl2,?p1,?p3)),
    step([t,tL],
     [all [tl2,p1,p3,l]: succeeds termL(?tl2) & succeeds partition(?p1) &
       fieldL(?tL,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
        terminates union_findL(?tL,?tl2,?p1,?p3),
      succeeds term(?t),
      succeeds termL(?tL)],
     assume(succeeds termL(?tl2) & succeeds partition(?p1) &
      fieldL([?t|?tL],?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n,
      [assume(?tl2 = [?t2|?t2L],
        [def succeeds termL([?t2|?t2L]) by completion,
	 succeeds term(?t2),
	 fieldL([?t|?tL],[?t2|?t2L],?p1,?l),
	 field(?t,?t2,?p1,?l) by lemma(fieldL:field),
	 fieldL(?tL,?t2L,?p1,?l) by lemma(fieldL:fieldL),
	 terminates union_find(?t,?t2,?p1,?p2),
	 assume(succeeds union_find(?t,?t2,?p1,?p2),
	  [succeeds partition(?p2) by corollary(union_find:types),
	   ex l2: field(?t,?t2,?p2,?l2) & sub_field(?p1,?l,?p2,?l2) &
            succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l) by 
            corollary(union_find:success),
	   exist(l2,
            field(?t,?t2,?p2,?l2) & sub_field(?p1,?l,?p2,?l2) &
            succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l),
            [succeeds lh(?p2) @+ lh(?l2) @< ?n by 
              theorem(leq:less:transitive),
	     fieldL(?tL,?t2L,?p2,?l2) by lemma(fieldL:field:sub_field),
	     terminates union_findL(?tL,?t2L,?p2,?p3)],
            terminates union_findL(?tL,?t2L,?p2,?p3))],
	  terminates union_findL(?tL,?t2L,?p2,?p3)),
	 terminates 
	 (union_find(?t,?t2,?p1,?p2) & union_findL(?tL,?t2L,?p2,?p3))],
        terminates 
        (union_find(?t,?t2,?p1,?p2) & union_findL(?tL,?t2L,?p2,?p3))),
       all [t2,t2L,p2]: ?tl2 = [?t2|?t2L] => 
         terminates 
         (union_find(?t,?t2,?p1,?p2) & union_findL(?tL,?t2L,?p2,?p3)),
       terminates union_findL([?t|?tL],?tl2,?p1,?p3) by completion],
      terminates union_findL([?t|?tL],?tl2,?p1,?p3)),
     all [tl2,p1,p3,l]: succeeds termL(?tl2) & succeeds partition(?p1) &
      fieldL([?t|?tL],?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
       terminates union_findL([?t|?tL],?tl2,?p1,?p3))]),
  assume(succeeds termL(?tl1) & succeeds termL(?tl2) &
   succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
   succeeds lh(?p1) @+ lh(?l) @< ?n,
   [all [tl2,p1,p3,l]: succeeds termL(?tl2) & succeeds partition(?p1) &
     fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
      terminates union_findL(?tl1,?tl2,?p1,?p3),
    succeeds termL(?tl2) & succeeds partition(?p1) &
    fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
     terminates union_findL(?tl1,?tl2,?p1,?p3),
    terminates union_findL(?tl1,?tl2,?p1,?p3)],
   terminates union_findL(?tl1,?tl2,?p1,?p3))],
 all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
  succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
  succeeds lh(?p1) @+ lh(?l) @< ?n => 
   terminates union_findL(?tl1,?tl2,?p1,?p3))
).
  
:- lemma(union_find:termination,
all n: succeeds nat(?n) =>
  (all [t1,t2,p1,p4,l]: succeeds term(?t1) & succeeds term(?t2) &
    succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
    succeeds lh(?p1) @+ lh(?l) @< ?n =>
     terminates union_find(?t1,?t2,?p1,?p4)) &
  (all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
    succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
    succeeds lh(?p1) @+ lh(?l) @< ?n =>
     terminates union_findL(?tl1,?tl2,?p1,?p3)),
induction(
 [all n: succeeds nat(?n) => 
    (all [t1,t2,p1,p4,l]: succeeds term(?t1) & succeeds term(?t2) &
      succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
      succeeds lh(?p1) @+ lh(?l) @< ?n => 
       terminates union_find(?t1,?t2,?p1,?p4)) &
    (all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
      succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
      succeeds lh(?p1) @+ lh(?l) @< ?n => 
       terminates union_findL(?tl1,?tl2,?p1,?p3))],
 [step([],
   [],
   [assume(succeeds term(?t1) & succeeds term(?t2) & 
     succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< 0,
     [def succeeds lh(?p1) @+ lh(?l) @< 0 by completion,ff],
     terminates union_find(?t1,?t2,?p1,?p4)),
    assume(succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< 0,
     [def succeeds lh(?p1) @+ lh(?l) @< 0 by completion,ff],
     terminates union_findL(?tl1,?tl2,?p1,?p3))],
   (all [t1,t2,p1,p4,l]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< 0 => 
      terminates union_find(?t1,?t2,?p1,?p4)) &
   (all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< 0 => 
      terminates union_findL(?tl1,?tl2,?p1,?p3))),
  step([n],
   [(all [t1,t2,p1,p4,l]: succeeds term(?t1) & succeeds term(?t2) &
      succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
      succeeds lh(?p1) @+ lh(?l) @< ?n => 
       terminates union_find(?t1,?t2,?p1,?p4)) &
    (all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
      succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
      succeeds lh(?p1) @+ lh(?l) @< ?n => 
       terminates union_findL(?tl1,?tl2,?p1,?p3)),
    succeeds nat(?n)],
   [assume(succeeds term(?t1) & succeeds term(?t2) & 
     succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< s(?n),
     [gr(?t1) by corollary(term:gr),
      gr(?t2) by corollary(term:gr),
      terminates find_delete(?p1,?t1,?p2,?c1) by 
       lemma(find_delete:termination),
      assume(succeeds find_delete(?p1,?t1,?p2,?c1),
       [succeeds partition(?p2) & succeeds class(?c1) by 
         lemma(find_delete:types),
	terminates class_member(?t2,?c1) by 
         corollary(class_member:termination),
	terminates (class_member(?t2,?c1) & ?p4 = ?p1),
	gr(?c1) by corollary(class:gr),
	assume(fails class_member(?t2,?c1),
	 [terminates find_delete(?p2,?t2,?p3,?c2) by 
           lemma(find_delete:termination),
	  assume(succeeds find_delete(?p2,?t2,?p3,?c2),
	   [succeeds partition(?p3) & succeeds class(?c2) by 
             lemma(find_delete:types),
	    assume(?c1 = cl(?t3,?q1),
	     [assume(?c2 = cl(?t4,?q2),
               [gr(cl(?t3,?q1)), gr(?t3),
		gr(?c2) by corollary(class:gr), gr(cl(?t4,?q2)), gr(?t4),
                assume(fails var_form(?t4),
		 [assume(?t3 = [?tag|?t1L],
                   [assume(?t4 = [?tag|?t2L],
                     [succeeds termL(?t1L) & succeeds termL(?t2L) &
                      succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
                       lemma(find_delete:twice:partition),
		      [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
		      ex p5: ?p5 = [cl(?t4,[?c1|?q2])|?p3],
		      exist(p5,
                       ?p5 = [cl(?t4,[?c1|?q2])|?p3],
                       [ex l2: field(?t1,?t2,?p5,?l2) &
                         sub_field(?p1,?l,?p5,?l2) &
                         succeeds lh(?p5) @+ lh(?l2) @< lh(?p1) @+ lh(?l) by
                         lemma(find_delete:field:1),
			exist(l2,
                         field(?t1,?t2,?p5,?l2) & sub_field(?p1,?l,?p5,?l2) &
                         succeeds lh(?p5) @+ lh(?l2) @< lh(?p1) @+ lh(?l),
                         [fieldL(?t1L,?t2L,?p5,?l2) by 
                           lemma(field:partition_member),
			  fieldL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?l2),
			  succeeds lh(?p5) @+ lh(?l2) @< ?n by 
                           lemma(less:transitive:successor),
			  succeeds lh([cl(?t4,[?c1|?q2])|?p3]) @+ lh(?l2)
			  @< ?n,
			  terminates 
			  union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)],
                         terminates 
                         union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))],
                       terminates 
                       union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))],
                     terminates 
                     union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)),
                    terminates 
                    (?t4 = [?tag|?t2L] &
                     union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))],
                   terminates 
                   (?t4 = [?tag|?t2L] &
                    union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))),
                  terminates 
                  (?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
                   union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))],
		 terminates 
		 (?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
		  union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))),
		terminates 
		(~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
		 union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)),
                terminates 
                (~ var_form(?t3) &
                 (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
                  ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
                  union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)))],
               terminates (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3]) &
               terminates 
               (~ var_form(?t3) &
                (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
                 ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
                 union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)))),
              terminates 
              (?c2 = cl(?t4,?q2) &
               (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
                ~ var_form(?t3) &
                (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
                 ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
                 union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))],
	     terminates 
	     (?c2 = cl(?t4,?q2) &
	      (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	       ~ var_form(?t3) &
	       (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
		~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
		union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))),
	    terminates 
	    (?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
	     (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	      ~ var_form(?t3) &
	      (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
	       ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
	       union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))],
	   terminates 
	   (?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
	    (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	     ~ var_form(?t3) &
	     (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
	      ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
	      union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))),
	  terminates 
	  (find_delete(?p2,?t2,?p3,?c2) & ?c1 = cl(?t3,?q1) &
	   ?c2 = cl(?t4,?q2) &
	   (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	    ~ var_form(?t3) &
	    (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
	     ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
	     union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))],
	 terminates 
	 (find_delete(?p2,?t2,?p3,?c2) & ?c1 = cl(?t3,?q1) &
	  ?c2 = cl(?t4,?q2) &
	  (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	   ~ var_form(?t3) &
	   (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
	    ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
	    union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))),
	terminates 
	(~ class_member(?t2,?c1) & find_delete(?p2,?t2,?p3,?c2) &
	 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
	 (var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	  ~ var_form(?t3) &
	  (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
	   ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
	   union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))],
       terminates (class_member(?t2,?c1) & ?p4 = ?p1) &
       terminates 
       (~ class_member(?t2,?c1) & find_delete(?p2,?t2,?p3,?c2) &
	?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
	(var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	 ~ var_form(?t3) &
	 (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
	  ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
	  union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))),
      terminates 
      (find_delete(?p1,?t1,?p2,?c1) &
       (class_member(?t2,?c1) & ?p4 = ?p1 \/
	~ class_member(?t2,?c1) & find_delete(?p2,?t2,?p3,?c2) &
	?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
	(var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
	 ~ var_form(?t3) &
	 (var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
	  ~ var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
	  union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))))),
      terminates union_find(?t1,?t2,?p1,?p4) by completion],
     terminates union_find(?t1,?t2,?p1,?p4)),
    all [t1,t2,p1,p4,l]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
      terminates union_find(?t1,?t2,?p1,?p4),
    assume(succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< s(?n),
     [succeeds nat(s(?n)),
      all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
       succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
       succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
        terminates union_findL(?tl1,?tl2,?p1,?p3) by 
       lemma(union_findL:termination),
      terminates union_findL(?tl1,?tl2,?p1,?p3)],
     terminates union_findL(?tl1,?tl2,?p1,?p3))],
   (all [t1,t2,p1,p4,l]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & field(?t1,?t2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
      terminates union_find(?t1,?t2,?p1,?p4)) &
   (all [tl1,tl2,p1,p3,l]: succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & fieldL(?tl1,?tl2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
      terminates union_findL(?tl1,?tl2,?p1,?p3)))])
).

:- lemma(field:existence,
all [t1,t2,p]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds partition(?p) => (ex l: field(?t1,?t2,?p,?l)),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p),
 [ex l1: succeeds list(?l1) & subterms_term(?t1,?l1) by 
   corollary(subterms_term:list:existence),
  ex l2: succeeds list(?l2) & subterms_term(?t2,?l2) by 
   corollary(subterms_term:list:existence),
  ex l3: succeeds list(?l3) & subterms_partition(?p,?l3) by 
   lemma(subterms_class:subterms_partition:existence),
  exist(l1,
   succeeds list(?l1) & subterms_term(?t1,?l1),
   exist(l2,
    succeeds list(?l2) & subterms_term(?t2,?l2),
    exist(l3,
     succeeds list(?l3) & subterms_partition(?p,?l3),
     [succeeds list(?l1 ** ?l2) by corollary(app:types:1),
      succeeds list(?l1 ** ?l2 ** ?l3) by corollary(app:types:1),
      sub(?l3,?l1 ** ?l2 ** ?l3) by lemma(sub:app:2),
      sub(?l1,?l1 ** ?l2) by lemma(sub:app:1),
      sub(?l1 ** ?l2,?l1 ** ?l2 ** ?l3) by lemma(sub:app:1),
      sub(?l1,?l1 ** ?l2 ** ?l3) by lemma(sub:transitive),
      sub(?l2,?l1 ** ?l2) by lemma(sub:app:2),
      sub(?l2,?l1 ** ?l2 ** ?l3) by lemma(sub:transitive),
      subterms_term(?t1,?l1 ** ?l2 ** ?l3) by 
       lemma(subterms_term:monotonic),
      all s: succeeds subterm(?s,?t1) => 
	succeeds member(?s,?l1 ** ?l2 ** ?l3) by 
       elimination(subterms_term,2),
      assume(succeeds subterm(?s,?t1),
       [],
       succeeds partition_member(?s,?p) \/
       succeeds member(?s,?l1 ** ?l2 ** ?l3)),
      field_term(?t1,?p,?l1 ** ?l2 ** ?l3) by introduction(field_term,3),
      subterms_term(?t2,?l1 ** ?l2 ** ?l3) by 
       lemma(subterms_term:monotonic),
      all t1: succeeds subterm(?t1,?t2) => 
	succeeds member(?t1,?l1 ** ?l2 ** ?l3) by 
       elimination(subterms_term,2),
      assume(succeeds subterm(?0,?t2),
       [],
       succeeds partition_member(?0,?p) \/
       succeeds member(?0,?l1 ** ?l2 ** ?l3)),
      all s: succeeds subterm(?s,?t2) => succeeds partition_member(?s,?p) \/
	succeeds member(?s,?l1 ** ?l2 ** ?l3),
      field_term(?t2,?p,?l1 ** ?l2 ** ?l3) by introduction(field_term,3),
      subterms_partition(?p,?l1 ** ?l2 ** ?l3) by 
       lemma(subterms_partition:monotonic),
      all t: succeeds partition_member(?t,?p) => 
	subterms_term(?t,?l1 ** ?l2 ** ?l3) by 
       elimination(subterms_partition,2),
      assume(succeeds partition_member(?t,?p),
       [subterms_term(?t,?l1 ** ?l2 ** ?l3),
	all t1: succeeds subterm(?t1,?t) => 
	  succeeds member(?t1,?l1 ** ?l2 ** ?l3) by 
	 elimination(subterms_term,2),
	assume(succeeds subterm(?0,?t),
	 [],
	 succeeds partition_member(?0,?p) \/
	 succeeds member(?0,?l1 ** ?l2 ** ?l3)),
	all s: succeeds subterm(?s,?t) => succeeds partition_member(?s,?p) \/
	  succeeds member(?s,?l1 ** ?l2 ** ?l3),
	field_term(?t,?p,?l1 ** ?l2 ** ?l3) by introduction(field_term,3)],
       field_term(?t,?p,?l1 ** ?l2 ** ?l3)),
      field_partition(?p,?l1 ** ?l2 ** ?l3) by 
       introduction(field_partition,2),
      field(?t1,?t2,?p,?l1 ** ?l2 ** ?l3) by introduction(field,4),
      ex l: field(?t1,?t2,?p,?l)],
     ex l: field(?t1,?t2,?p,?l)),
    ex l: field(?t1,?t2,?p,?l)),
   ex l: field(?t1,?t2,?p,?l))],
 ex l: field(?t1,?t2,?p,?l))
).

:- theorem(union_find:termination,
all [t1,t2,p1,p2]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds partition(?p1) =>
  terminates union_find(?t1,?t2,?p1,?p2),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p1),
 [ex l: field(?t1,?t2,?p1,?l) by lemma(field:existence),
  exist(l,
   field(?t1,?t2,?p1,?l),
   [succeeds list(?p1) by lemma(partition:list),
    succeeds list(?l) & field_term(?t1,?p1,?l) & field_term(?t2,?p1,?l) &
    field_partition(?p1,?l) by elimination(field,4),
    succeeds nat(lh(?p1)) by corollary(lh:types),
    succeeds nat(lh(?l)) by corollary(lh:types),
    succeeds nat(lh(?p1) @+ lh(?l)) by corollary(plus:types),
    succeeds nat(s(lh(?p1) @+ lh(?l))),
    succeeds lh(?p1) @+ lh(?l) @< s(lh(?p1) @+ lh(?l)) by lemma(less:one),
    (all [t1,t2,p,p2,l1]: succeeds term(?t1) & succeeds term(?t2) &
      succeeds partition(?p) & field(?t1,?t2,?p,?l1) &
      succeeds lh(?p) @+ lh(?l1) @< s(lh(?p1) @+ lh(?l)) => 
       terminates union_find(?t1,?t2,?p,?p2)) &
    (all [tl1,tl2,p,p2,l1]: succeeds termL(?tl1) & succeeds termL(?tl2) &
      succeeds partition(?p) & fieldL(?tl1,?tl2,?p,?l1) &
      succeeds lh(?p) @+ lh(?l1) @< s(lh(?p1) @+ lh(?l)) => 
       terminates union_findL(?tl1,?tl2,?p,?p2)) by 
     lemma(union_find:termination),
    terminates union_find(?t1,?t2,?p1,?p2)],
   terminates union_find(?t1,?t2,?p1,?p2))],
 terminates union_find(?t1,?t2,?p1,?p2))
).

%-----------------------------------------------------------------------
% part5
%-----------------------------------------------------------------------

:- lemma(unifier:termination,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds substitution(?s) => terminates unifier(?t1,?t2,?s),
[induction(
  [all t1: succeeds term(?t1) => 
     (all [t2,s]: succeeds term(?t2) & succeeds substitution(?s) => 
        terminates unifier(?t1,?t2,?s))],
  [step([x],
    [succeeds atomic(?x)],
    assume(succeeds term(?t2) & succeeds substitution(?s),
     [succeeds term($(?x)),
      terminates apply($(?x),?s,?t3) by corollary(apply:termination),
      terminates apply(?t2,?s,?t3) by corollary(apply:termination),
      terminates (apply($(?x),?s,?t3) & apply(?t2,?s,?t3)),
      all t3: terminates (apply($(?x),?s,?t3) & apply(?t2,?s,?t3)),
      terminates unifier($(?x),?t2,?s) by completion],
     terminates unifier($(?x),?t2,?s)),
    all [t2,s]: succeeds term(?t2) & succeeds substitution(?s) => 
      terminates unifier($(?x),?t2,?s)),
   step([x,tL],
    [succeeds atomic(?x),
     succeeds termL(?tL)],
    assume(succeeds term(?t2) & succeeds substitution(?s),
     [succeeds term([?x|?tL]) by sld,
      terminates apply([?x|?tL],?s,?t3) by corollary(apply:termination),
      terminates apply(?t2,?s,?t3) by corollary(apply:termination),
      terminates (apply([?x|?tL],?s,?t3) & apply(?t2,?s,?t3)),
      all t3: terminates (apply([?x|?tL],?s,?t3) & apply(?t2,?s,?t3)),
      terminates unifier([?x|?tL],?t2,?s) by completion],
     terminates unifier([?x|?tL],?t2,?s)),
    all [t2,s]: succeeds term(?t2) & succeeds substitution(?s) => 
      terminates unifier([?x|?tL],?t2,?s))]),
 assume(succeeds term(?t1) & succeeds term(?t2) & succeeds substitution(?s),
  [all [t2,s]: succeeds term(?t2) & succeeds substitution(?s) => 
     terminates unifier(?t1,?t2,?s),
   succeeds term(?t2) & succeeds substitution(?s) => 
    terminates unifier(?t1,?t2,?s),
   terminates unifier(?t1,?t2,?s)],
  terminates unifier(?t1,?t2,?s))] 
).

:- lemma(applyL:unifierL,
all [tl1,tl2,tl,s]: succeeds applyL(?tl1,?s,?tl) &
 succeeds applyL(?tl2,?s,?tl) => succeeds unifierL(?tl1,?tl2,?s),
[induction(
  [all [tl1,s,tl]: succeeds applyL(?tl1,?s,?tl) => 
     (all tl2: succeeds applyL(?tl2,?s,?tl) => 
        succeeds unifierL(?tl1,?tl2,?s))],
  [step([0],
    [],
    assume(succeeds applyL(?tl2,?0,[]),
     [def succeeds applyL(?tl2,?0,[]) by completion,
      succeeds unifierL([],?tl2,?0)],
     succeeds unifierL([],?tl2,?0)),
    all tl2: succeeds applyL(?tl2,?0,[]) => succeeds unifierL([],?tl2,?0)),
   step([t1,t1L,s,t2,t2L],
    [all tl2: succeeds applyL(?tl2,?s,?t2L) => 
       succeeds unifierL(?t1L,?tl2,?s),
     succeeds apply(?t1,?s,?t2),
     succeeds applyL(?t1L,?s,?t2L)],
    assume(succeeds applyL(?tl2,?s,[?t2|?t2L]),
     [def succeeds applyL(?tl2,?s,[?t2|?t2L]) by completion,
      exist([0,1],
       ?tl2 = [?0|?1] & succeeds apply(?0,?s,?t2) &
       succeeds applyL(?1,?s,?t2L),
       [succeeds unifier(?t1,?0,?s) by sld,
	succeeds unifierL(?t1L,?1,?s),
	succeeds unifierL([?t1|?t1L],?tl2,?s)],
       succeeds unifierL([?t1|?t1L],?tl2,?s))],
     succeeds unifierL([?t1|?t1L],?tl2,?s)),
    all tl2: succeeds applyL(?tl2,?s,[?t2|?t2L]) => 
      succeeds unifierL([?t1|?t1L],?tl2,?s))]),
 assume(succeeds applyL(?tl1,?s,?tl) & succeeds applyL(?tl2,?s,?tl),
  [all tl2: succeeds applyL(?tl2,?s,?tl) => succeeds unifierL(?tl1,?tl2,?s),
   succeeds applyL(?tl2,?s,?tl) => succeeds unifierL(?tl1,?tl2,?s),
   succeeds unifierL(?tl1,?tl2,?s)],
  succeeds unifierL(?tl1,?tl2,?s))]
).

:- lemma(unifier:unifierL,
all [x1,x2,tl1,tl2,s]: succeeds unifier([?x1|?tl1],[?x2|?tl2],?s) =>
  succeeds unifierL(?tl1,?tl2,?s),
assume(succeeds unifier([?x1|?tl1],[?x2|?tl2],?s),
 [def succeeds unifier([?x1|?tl1],[?x2|?tl2],?s) by completion,
  exist(t3,
   succeeds apply([?x1|?tl1],?s,?t3) & succeeds apply([?x2|?tl2],?s,?t3),
   [def succeeds apply([?x1|?tl1],?s,?t3) by completion,
    exist(t2L,
     ?t3 = [?x1|?t2L] & succeeds applyL(?tl1,?s,?t2L),
     [def succeeds apply([?x2|?tl2],?s,[?x1|?t2L]) by completion,
      succeeds unifierL(?tl1,?tl2,?s) by lemma(applyL:unifierL)],
     succeeds unifierL(?tl1,?tl2,?s))],
   succeeds unifierL(?tl1,?tl2,?s))],
 succeeds unifierL(?tl1,?tl2,?s))
).

:- lemma(unifier:tag,
all [x1,x2,tl1,tl2,s]: succeeds unifier([?x1|?tl1],[?x2|?tl2],?s) => ?x1 = ?x2,
assume(succeeds unifier([?x1|?tl1],[?x2|?tl2],?s),
 [def succeeds unifier([?x1|?tl1],[?x2|?tl2],?s) by completion,
  exist(t3,
   succeeds apply([?x1|?tl1],?s,?t3) & succeeds apply([?x2|?tl2],?s,?t3),
   [def succeeds apply([?x1|?tl1],?s,?t3) by completion,
    exist(t2L,
     ?t3 = [?x1|?t2L] & succeeds applyL(?tl1,?s,?t2L),
     [def succeeds apply([?x2|?tl2],?s,?t3) by completion,
      exist(0,
       ?t3 = [?x2|?0] & succeeds applyL(?tl2,?s,?0),
       [],
       ?x1 = ?x2)],
     ?x1 = ?x2)],
   ?x1 = ?x2)],
 ?x1 = ?x2)
).

:- lemma(find_delete:existence,
all [p1,t]: succeeds partition(?p1) & succeeds term(?t) =>
  (ex [p2,c]: succeeds find_delete(?p1,?t,?p2,?c)),
[induction(
  [all p1: succeeds partition(?p1) => 
     (all t: succeeds term(?t) => 
        (ex [p2,c]: succeeds find_delete(?p1,?t,?p2,?c)))],
  [step([],
    [],
    assume(succeeds term(?t),
     [succeeds find_delete([],?t,[],cl(?t,[])) by sld,
      ex [p2,c]: succeeds find_delete([],?t,?p2,?c)],
     ex [p2,c]: succeeds find_delete([],?t,?p2,?c)),
    all t: succeeds term(?t) => 
      (ex [p2,c]: succeeds find_delete([],?t,?p2,?c))),
   step([c,p],
    [all t: succeeds term(?t) => 
       (ex [p2,c]: succeeds find_delete(?p,?t,?p2,?c)),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(succeeds term(?t),
     [terminates class_member(?t,?c) by 
       corollary(class_member:termination),
      succeeds class_member(?t,?c) \/ fails class_member(?t,?c),
      cases(succeeds class_member(?t,?c),
       [?p = ?p, ?c = ?c,
	succeeds find_delete([?c|?p],?t,?p,?c) by sld,
	ex [p2,0]: succeeds find_delete([?c|?p],?t,?p2,?0)],
       fails class_member(?t,?c),
       [ex [p2,c]: succeeds find_delete(?p,?t,?p2,?c),
	exist([p2,0],
         succeeds find_delete(?p,?t,?p2,?0),
         [[?c|?p2] = [?c|?p2],
	  succeeds find_delete([?c|?p],?t,[?c|?p2],?0) by sld,
	  ex [p2,0]: succeeds find_delete([?c|?p],?t,?p2,?0)],
         ex [p2,0]: succeeds find_delete([?c|?p],?t,?p2,?0))],
       ex [p2,0]: succeeds find_delete([?c|?p],?t,?p2,?0))],
     ex [p2,0]: succeeds find_delete([?c|?p],?t,?p2,?0)),
    all t: succeeds term(?t) => 
      (ex [p2,0]: succeeds find_delete([?c|?p],?t,?p2,?0)))]),
 assume(succeeds partition(?p1) & succeeds term(?t),
  [all t: succeeds term(?t) => 
     (ex [p2,c]: succeeds find_delete(?p1,?t,?p2,?c)),
   succeeds term(?t) => (ex [p2,c]: succeeds find_delete(?p1,?t,?p2,?c)),
   ex [p2,c]: succeeds find_delete(?p1,?t,?p2,?c)],
  ex [p2,c]: succeeds find_delete(?p1,?t,?p2,?c))]
).

:- lemma(class_solution:single,
all [s,t]: succeeds substitution(?s) & succeeds term(?t) =>
  succeeds class_solution(cl(?t,[]),?s),
assume(succeeds substitution(?s) & succeeds term(?t),
 [succeeds class(cl(?t,[])) by lemma(class:singleton),
  assume(succeeds class_member(?t1,cl(?t,[])) &
   succeeds class_member(?t2,cl(?t,[])),
   [def succeeds class_member(?t1,cl(?t,[])) by completion,
    cases(?t1 = ?t,
     [],
     succeeds partition_member(?t1,[]),
     [def succeeds partition_member(?t1,[]) by completion,ff],
     ?t1 = ?t),
    def succeeds class_member(?t2,cl(?t,[])) by completion,
    cases(?t2 = ?t,
     [],
     succeeds partition_member(?t2,[]),
     [def succeeds partition_member(?t2,[]) by completion,ff],
     ?t2 = ?t),
    ?t1 = ?t2,
    succeeds unifier(?t1,?t1,?s) by lemma(unifier:characterization:1),
    succeeds unifier(?t1,?t2,?s)],
   succeeds unifier(?t1,?t2,?s)),
  succeeds class_solution(cl(?t,[]),?s) by 
   lemma(class_solution:characterization:2)],
 succeeds class_solution(cl(?t,[]),?s))
).


:- lemma(find_delete:solution,
all [p1,p2,t,c,s]: succeeds find_delete(?p1,?t,?p2,?c) & succeeds term(?t) &
 succeeds substitution(?s) & succeeds partition_solution(?p1,?s) =>
  succeeds partition_solution(?p2,?s) & succeeds class_solution(?c,?s),
induction(
 [all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) => 
    (all s: succeeds term(?t) & succeeds substitution(?s) &
      succeeds partition_solution(?p1,?s) => 
       succeeds partition_solution(?p2,?s) & succeeds class_solution(?c,?s))],
 [step([t],
   [],
   assume(succeeds term(?t) & succeeds substitution(?s) &
    succeeds partition_solution([],?s),
    succeeds class_solution(cl(?t,[]),?s) by lemma(class_solution:single),
    succeeds partition_solution([],?s) &
    succeeds class_solution(cl(?t,[]),?s)),
   all s: succeeds term(?t) & succeeds substitution(?s) &
    succeeds partition_solution([],?s) => 
     succeeds partition_solution([],?s) &
     succeeds class_solution(cl(?t,[]),?s)),
  step([c1,p1,t,p3,c2,p2],
   [succeeds class_member(?t,?c1),
    ?c2 = ?c1,
    ?p3 = ?p1],
   assume(succeeds term(?t) & succeeds substitution(?s) &
    succeeds partition_solution([?c1|?p1],?s),
    [succeeds partition_solution([?c2|?p3],?s),
     def succeeds partition_solution([?c2|?p3],?s) by completion,
     succeeds partition_solution(?p3,?s),
     succeeds class_solution(?c2,?s)],
    succeeds partition_solution(?p3,?s) & succeeds class_solution(?c2,?s)),
   all s: succeeds term(?t) & succeeds substitution(?s) &
    succeeds partition_solution([?c1|?p1],?s) => 
     succeeds partition_solution(?p3,?s) & succeeds class_solution(?c2,?s)),
  step([c1,p1,t,p3,c2,p2],
   [all s: succeeds term(?t) & succeeds substitution(?s) &
     succeeds partition_solution(?p1,?s) => 
      succeeds partition_solution(?p2,?s) & succeeds class_solution(?c2,?s),
    fails class_member(?t,?c1),
    succeeds find_delete(?p1,?t,?p2,?c2),
    ?p3 = [?c1|?p2]],
   assume(succeeds term(?t) & succeeds substitution(?s) &
    succeeds partition_solution([?c1|?p1],?s),
    [def succeeds partition_solution([?c1|?p1],?s) by completion,
      succeeds partition_solution(?p2,?s) & 
      succeeds class_solution(?c2,?s),
      succeeds partition_solution(?p3,?s) by completion],
    succeeds partition_solution(?p3,?s) & succeeds class_solution(?c2,?s)),
   all s: succeeds term(?t) & succeeds substitution(?s) &
    succeeds partition_solution([?c1|?p1],?s) => 
     succeeds partition_solution(?p3,?s) & succeeds class_solution(?c2,?s))])
).


:- lemma(find_delete:twice:solution,
all [p3,p4,c1,c2,t3,t4,q2,q1,s]: succeeds substitution(?s) &
 succeeds class(?c1) & succeeds class_solution(?c1,?s) &
 succeeds class(?c2) & succeeds class_solution(?c2,?s) &
 succeeds partition_solution(?p3,?s) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & succeeds unifier(?t3,?t4,?s) &
 ?p4 = [cl(?t4,[?c1|?q2])|?p3] & succeeds partition(?p4) =>
  succeeds partition_solution(?p4,?s),
assume(succeeds substitution(?s) & succeeds class(?c1) &
 succeeds class_solution(?c1,?s) & succeeds class(?c2) &
 succeeds class_solution(?c2,?s) & succeeds partition_solution(?p3,?s) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & succeeds unifier(?t3,?t4,?s) &
 ?p4 = [cl(?t4,[?c1|?q2])|?p3] & succeeds partition(?p4),
 [def succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by completion,
  def succeeds class(cl(?t3,?q1)) by completion,
  def succeeds class(cl(?t4,?q2)) by completion,
  assume(succeeds class_member(?t,cl(?t4,[?c1|?q2])),
   [def succeeds class_member(?t,cl(?t4,[?c1|?q2])) by completion,
    cases(?t = ?t4,
     [],
     succeeds partition_member(?t,[?c1|?q2]),
     [def succeeds partition_member(?t,[?c1|?q2]) by completion,
      cases(succeeds class_member(?t,?c1),
       [succeeds term(?t) by corollary(class_member:types),
	succeeds class_member(?t3,cl(?t3,?q1)) by sld,
	succeeds class_member(?t3,?c1),
	succeeds unifier(?t,?t3,?s) by 
         lemma(class_solution:characterization:1),
	?t // ?s = ?t3 // ?s by lemma(unifier:characterization:2),
	?t3 // ?s = ?t4 // ?s by lemma(unifier:characterization:2),
	?t // ?s = ?t4 // ?s],
       succeeds partition_member(?t,?q2),
       [succeeds term(?t) by corollary(class_member:types),
	succeeds class_member(?t,cl(?t4,?q2)) by sld,
	succeeds class_member(?t,?c2),
	succeeds class_member(?t4,cl(?t4,?q2)) by sld,
	succeeds class_member(?t4,?c2),
	succeeds unifier(?t,?t4,?s) by 
         lemma(class_solution:characterization:1),
	?t // ?s = ?t4 // ?s by lemma(unifier:characterization:2)],
       succeeds term(?t) & ?t // ?s = ?t4 // ?s)],
     succeeds term(?t) & ?t // ?s = ?t4 // ?s)],
   succeeds term(?t) & ?t // ?s = ?t4 // ?s),
  all t: succeeds class_member(?t,cl(?t4,[?c1|?q2])) =>
    succeeds term(?t) & ?t // ?s = ?t4 // ?s,
  assume(succeeds class_member(?t1,cl(?t4,[?c1|?q2])) &
   succeeds class_member(?t2,cl(?t4,[?c1|?q2])),
   [succeeds term(?t1) & ?t1 // ?s = ?t4 // ?s,
    succeeds term(?t2) & ?t2 // ?s = ?t4 // ?s,
    ?t1 // ?s = ?t2 // ?s,
    succeeds unifier(?t1,?t2,?s) by lemma(unifier:characterization:1)],
   succeeds unifier(?t1,?t2,?s)),
  succeeds class_solution(cl(?t4,[?c1|?q2]),?s) by 
   lemma(class_solution:characterization:2),
  succeeds class_solution(cl(?t4,[?c1|?q2]),?s) &
  succeeds partition_solution(?p3,?s),
  succeeds partition_solution([cl(?t4,[?c1|?q2])|?p3],?s) by completion,
  succeeds partition_solution(?p4,?s)],
 succeeds partition_solution(?p4,?s))
).

:- lemma(unifier:class,
all [c1,c2,q1,q2,t1,t2,t3,t4,s]: succeeds substitution(?s) &
 succeeds class_member(?t1,?c1) & succeeds class_member(?t2,?c2) &
 succeeds unifier(?t1,?t2,?s) & succeeds class_solution(?c1,?s) &
 succeeds class_solution(?c2,?s) & succeeds class(?c1) &
 succeeds class(?c2) & ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) =>
  succeeds unifier(?t3,?t4,?s),
assume(succeeds substitution(?s) & succeeds class_member(?t1,?c1) &
 succeeds class_member(?t2,?c2) & succeeds unifier(?t1,?t2,?s) &
 succeeds class_solution(?c1,?s) & succeeds class_solution(?c2,?s) &
 succeeds class(?c1) & succeeds class(?c2) & ?c1 = cl(?t3,?q1) &
 ?c2 = cl(?t4,?q2),
 [succeeds class_member(?t3,cl(?t3,?q1)) by sld,
  succeeds class_member(?t3,?c1),
  succeeds unifier(?t1,?t3,?s) by 
   lemma(class_solution:characterization:1),
  succeeds term(?t1) by corollary(class_member:types),
  def succeeds class(cl(?t3,?q1)) by completion,
  ?t1 // ?s = ?t3 // ?s by lemma(unifier:characterization:2),
  succeeds term(?t2) by corollary(class_member:types),
  succeeds class_member(?t4,cl(?t4,?q2)) by sld,
  succeeds class_member(?t4,?c2),
  succeeds unifier(?t2,?t4,?s) by 
   lemma(class_solution:characterization:1),
  def succeeds class(cl(?t4,?q2)) by completion,
  ?t2 // ?s = ?t4 // ?s by lemma(unifier:characterization:2),
  ?t1 // ?s = ?t2 // ?s by lemma(unifier:characterization:2),
  ?t3 // ?s = ?t4 // ?s,
  succeeds unifier(?t3,?t4,?s) by lemma(unifier:characterization:1)],
 succeeds unifier(?t3,?t4,?s))
).

:- lemma(union_findL:solution,
all n: succeeds nat(?n) &
 (all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
   succeeds partition(?p1) & succeeds substitution(?s) &
   succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
   field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n =>
    (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
      succeeds partition_solution(?p4,?s))) =>
  (all [tl1,tl2,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl2) &
    succeeds partition(?p1) & succeeds substitution(?s) &
    succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
    fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n =>
     (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
       succeeds partition_solution(?p3,?s))),
assume(succeeds nat(?n) &
 (all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
   succeeds partition(?p1) & succeeds substitution(?s) &
   succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
   field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
    (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
      succeeds partition_solution(?p4,?s))),
 induction(
  [all tl1: succeeds termL(?tl1) => 
     (all [tl2,p1,p3,l,s]: succeeds termL(?tl2) & succeeds partition(?p1) &
       succeeds substitution(?s) & succeeds unifierL(?tl1,?tl2,?s) &
       succeeds partition_solution(?p1,?s) & fieldL(?tl1,?tl2,?p1,?l) &
       succeeds lh(?p1) @+ lh(?l) @< ?n => 
        (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
          succeeds partition_solution(?p3,?s)))],
  [step([],
    [],
    assume(succeeds termL(?tl2) & succeeds partition(?p1) &
     succeeds substitution(?s) & succeeds unifierL([],?tl2,?s) &
     succeeds partition_solution(?p1,?s) & fieldL([],?tl2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< ?n,
     [def succeeds unifierL([],?tl2,?s) by completion,
      ?tl2 = [],
      succeeds union_findL([],[],?p1,?p1) by sld,
      succeeds union_findL([],?tl2,?p1,?p1),
      ex p3: succeeds union_findL([],?tl2,?p1,?p3) &
       succeeds partition_solution(?p3,?s)],
     ex p3: succeeds union_findL([],?tl2,?p1,?p3) &
      succeeds partition_solution(?p3,?s)),
    all [tl2,p1,p3,l,s]: succeeds termL(?tl2) & succeeds partition(?p1) &
     succeeds substitution(?s) & succeeds unifierL([],?tl2,?s) &
     succeeds partition_solution(?p1,?s) & fieldL([],?tl2,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< ?n => 
      (ex p3: succeeds union_findL([],?tl2,?p1,?p3) &
        succeeds partition_solution(?p3,?s))),
   step([t1,tl1],
    [all [tl2,p1,p3,l,s]: succeeds termL(?tl2) & succeeds partition(?p1) &
      succeeds substitution(?s) & succeeds unifierL(?tl1,?tl2,?s) &
      succeeds partition_solution(?p1,?s) & fieldL(?tl1,?tl2,?p1,?l) &
      succeeds lh(?p1) @+ lh(?l) @< ?n => 
       (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
         succeeds partition_solution(?p3,?s)),
     succeeds term(?t1),
     succeeds termL(?tl1)],
    assume(succeeds termL(?tl) & succeeds partition(?p1) &
     succeeds substitution(?s) & succeeds unifierL([?t1|?tl1],?tl,?s) &
     succeeds partition_solution(?p1,?s) & fieldL([?t1|?tl1],?tl,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< ?n,
     [def succeeds unifierL([?t1|?tl1],?tl,?s) by completion,
      exist([t2,tl2],
       ?tl = [?t2|?tl2] & succeeds unifier(?t1,?t2,?s) &
       succeeds unifierL(?tl1,?tl2,?s),
       [field(?t1,?t2,?p1,?l) by lemma(fieldL:field),
	def succeeds termL([?t2|?tl2]) by completion,
	ex p2: succeeds union_find(?t1,?t2,?p1,?p2) &
	 succeeds partition_solution(?p2,?s),
	exist(p2,
         succeeds union_find(?t1,?t2,?p1,?p2) &
         succeeds partition_solution(?p2,?s),
         [ex l2: field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l,?p2,?l2) &
           succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l) by 
           corollary(union_find:success),
	  exist(l2,
           field(?t1,?t2,?p2,?l2) & sub_field(?p1,?l,?p2,?l2) &
           succeeds lh(?p2) @+ lh(?l2) @=< lh(?p1) @+ lh(?l),
           [succeeds lh(?p2) @+ lh(?l2) @< ?n by 
             theorem(leq:less:transitive),
	    succeeds partition(?p2) by corollary(union_find:types),
	    fieldL(?tl1,?tl2,?p1,?l) by lemma(fieldL:fieldL),
	    fieldL(?tl1,?tl2,?p2,?l2) by lemma(fieldL:field:sub_field),
	    ex p3: succeeds union_findL(?tl1,?tl2,?p2,?p3) &
	     succeeds partition_solution(?p3,?s),
	    exist(p3,
             succeeds union_findL(?tl1,?tl2,?p2,?p3) &
             succeeds partition_solution(?p3,?s),
             [succeeds union_findL([?t1|?tl1],[?t2|?tl2],?p1,?p3) by sld,
	      succeeds union_findL([?t1|?tl1],?tl,?p1,?p3),
	      ex p3: succeeds union_findL([?t1|?tl1],?tl,?p1,?p3) &
	       succeeds partition_solution(?p3,?s)],
             ex p3: succeeds union_findL([?t1|?tl1],?tl,?p1,?p3) &
              succeeds partition_solution(?p3,?s))],
           ex p3: succeeds union_findL([?t1|?tl1],?tl,?p1,?p3) &
            succeeds partition_solution(?p3,?s))],
         ex p3: succeeds union_findL([?t1|?tl1],?tl,?p1,?p3) &
          succeeds partition_solution(?p3,?s))],
       ex p3: succeeds union_findL([?t1|?tl1],?tl,?p1,?p3) &
        succeeds partition_solution(?p3,?s))],
     ex p3: succeeds union_findL([?t1|?tl1],?tl,?p1,?p3) &
      succeeds partition_solution(?p3,?s)),
    all [tl,p1,p3,l,s]: succeeds termL(?tl) & succeeds partition(?p1) &
     succeeds substitution(?s) & succeeds unifierL([?t1|?tl1],?tl,?s) &
     succeeds partition_solution(?p1,?s) & fieldL([?t1|?tl1],?tl,?p1,?l) &
     succeeds lh(?p1) @+ lh(?l) @< ?n => 
      (ex p3: succeeds union_findL([?t1|?tl1],?tl,?p1,?p3) &
        succeeds partition_solution(?p3,?s)))]),
 all [tl1,tl,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl) &
  succeeds partition(?p1) & succeeds substitution(?s) &
  succeeds unifierL(?tl1,?tl,?s) & succeeds partition_solution(?p1,?s) &
  fieldL(?tl1,?tl,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
   (ex p3: succeeds union_findL(?tl1,?tl,?p1,?p3) &
     succeeds partition_solution(?p3,?s)))
).

:- lemma(union_find:union_findL:solution,
all n: succeeds nat(?n) =>
  (all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
    succeeds partition(?p1) & succeeds substitution(?s) &
    succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
    field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n =>
     (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
      succeeds partition_solution(?p4,?s))) &
  (all [tl1,tl2,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl2) &
    succeeds partition(?p1) & succeeds substitution(?s) &
    succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
    fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n =>
     (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
       succeeds partition_solution(?p3,?s))),
induction(
 [all n: succeeds nat(?n) => 
    (all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
      succeeds partition(?p1) & succeeds substitution(?s) &
      succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
      field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
       (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
         succeeds partition_solution(?p4,?s))) &
    (all [tl1,tl2,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl2) &
      succeeds partition(?p1) & succeeds substitution(?s) &
      succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
      fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
       (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
         succeeds partition_solution(?p3,?s)))],
 [step([],
   [],
   [assume(succeeds term(?t1) & succeeds term(?t2) & 
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
     field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< 0,
     [def succeeds lh(?p1) @+ lh(?l) @< 0 by completion,ff],
     ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
      succeeds partition_solution(?p4,?s)),
    assume(succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
     fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< 0,
     [def succeeds lh(?p1) @+ lh(?l) @< 0 by completion,ff],
     ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
      succeeds partition_solution(?p3,?s))],
   (all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
     field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< 0 => 
      (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
        succeeds partition_solution(?p4,?s))) &
   (all [tl1,tl2,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
     fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< 0 => 
      (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
        succeeds partition_solution(?p3,?s)))),
  step([n],
   [(all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
      succeeds partition(?p1) & succeeds substitution(?s) &
      succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
      field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
       (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
         succeeds partition_solution(?p4,?s))) &
    (all [tl1,tl2,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl2) &
      succeeds partition(?p1) & succeeds substitution(?s) &
      succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
      fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< ?n => 
       (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
         succeeds partition_solution(?p3,?s))),
    succeeds nat(?n)],
   [assume(succeeds term(?t1) & succeeds term(?t2) & 
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
     field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< s(?n),
     [ex [p2,c1]: succeeds find_delete(?p1,?t1,?p2,?c1) by 
       lemma(find_delete:existence),
      exist([p2,c1],
       succeeds find_delete(?p1,?t1,?p2,?c1),
       [succeeds partition_solution(?p2,?s) &
        succeeds class_solution(?c1,?s) by lemma(find_delete:solution),
	succeeds partition(?p2) & succeeds class(?c1) by 
         lemma(find_delete:types),
	succeeds class_member(?t1,?c1) by lemma(find_delete:class_member),
	terminates class_member(?t2,?c1) by 
         corollary(class_member:termination),
	succeeds class_member(?t2,?c1) \/ fails class_member(?t2,?c1),
	cases(succeeds class_member(?t2,?c1),
	 [?p1 = ?p1,
	  succeeds union_find(?t1,?t2,?p1,?p1) by sld,
	  ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
	   succeeds partition_solution(?p4,?s)],
	 fails class_member(?t2,?c1),
	 [ex [p3,c2]: succeeds find_delete(?p2,?t2,?p3,?c2) by 
           lemma(find_delete:existence),
	  exist([p3,c2],
           succeeds find_delete(?p2,?t2,?p3,?c2),
           [succeeds partition_solution(?p3,?s) &
            succeeds class_solution(?c2,?s) by 
             lemma(find_delete:solution),
	    succeeds partition(?p3) & succeeds class(?c2) by 
             lemma(find_delete:types),
	    succeeds class_member(?t2,?c2) by 
             lemma(find_delete:class_member),
	    def succeeds class(?c1) by completion,
	    exist([t3,q1],
	     ?c1 = cl(?t3,?q1) & succeeds term(?t3) & succeeds partition(?q1) &
	     fails partition_member(?t3,?q1) & fails not_var_class(?t3,?q1),
	     [def succeeds class(?c2) by completion,
              exist([t4,q2],
               ?c2 = cl(?t4,?q2) & succeeds term(?t4) &
	       succeeds partition(?q2) &
               fails partition_member(?t4,?q2) & fails not_var_class(?t4,?q2),
               [succeeds unifier(?t3,?t4,?s) by lemma(unifier:class),
		def succeeds term(?t3) by completion,
		cases(ex x: ?t3 = $(?x) & succeeds atomic(?x),
		 exist(x,
		  ?t3 = $(?x) & succeeds atomic(?x),
		  [succeeds var_form($(?x)) by sld,
		   succeeds var_form(?t3),
		   [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
		   ex p4: ?p4 = [cl(?t4,[?c1|?q2])|?p3],
		   exist(p4,
                    ?p4 = [cl(?t4,[?c1|?q2])|?p3],
                    [succeeds union_find(?t1,?t2,?p1,?p4) by sld,
		     succeeds partition(?p4) by 
                      corollary(union_find:types),
		     succeeds partition_solution(?p4,?s) by 
                      lemma(find_delete:twice:solution),
		     ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
		      succeeds partition_solution(?p4,?s)],
                    ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                     succeeds partition_solution(?p4,?s))],
		  ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
		   succeeds partition_solution(?p4,?s)),
		 ex [x,tl1]: ?t3 = [?x|?tl1] & succeeds atomic(?x) &
		  succeeds termL(?tl1),
		 exist([x,tl1],
		  ?t3 = [?x|?tl1] & succeeds atomic(?x) &
		  succeeds termL(?tl1),
		  [fails var_form([?x|?tl1]) by completion,
		   fails var_form(?t3),
		   def succeeds term(?t4) by completion,
                   cases(ex x: ?t4 = $(?x) & succeeds atomic(?x),
                    exist(0,
                     ?t4 = $(?0) & succeeds atomic(?0),
                     [succeeds var_form($(?0)) by sld,
		      succeeds var_form(?t4),
		      [cl(?t3,[?c2|?q1])|?p3] = [cl(?t3,[?c2|?q1])|?p3],
		      ex p4: ?p4 = [cl(?t3,[?c2|?q1])|?p3],
		      exist(p4,
                       ?p4 = [cl(?t3,[?c2|?q1])|?p3],
                       [succeeds union_find(?t1,?t2,?p1,?p4) by sld,
			succeeds partition(?p4) by 
                         corollary(union_find:types),
			?t3 // ?s = ?t4 // ?s by 
                         lemma(unifier:characterization:2),
			succeeds unifier(?t4,?t3,?s) by 
                         lemma(unifier:characterization:1),
			succeeds partition_solution(?p4,?s) by 
                         lemma(find_delete:twice:solution),
			ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
			 succeeds partition_solution(?p4,?s)],
                       ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                        succeeds partition_solution(?p4,?s))],
                     ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                      succeeds partition_solution(?p4,?s)),
                    ex [x,tL]: ?t4 = [?x|?tL] & succeeds atomic(?x) &
                     succeeds termL(?tL),
                    exist([0,tl2],
                     ?t4 = [?0|?tl2] & succeeds atomic(?0) &
                     succeeds termL(?tl2),
                     [succeeds unifier([?x|?tl1],[?0|?tl2],?s),
		      ?x = ?0 by lemma(unifier:tag),
		      ?t4 = [?x|?tl2],
		      fails var_form([?x|?tl2]) by completion,
		      fails var_form(?t4),
		      succeeds unifierL(?tl1,?tl2,?s) by 
                       lemma(unifier:unifierL),
		      succeeds termL(?tl1) & succeeds termL(?tl2) &
                      succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
                       lemma(find_delete:twice:partition),
		      [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
		      ex p4: ?p4 = [cl(?t4,[?c1|?q2])|?p3],
		      exist(p4,
                       ?p4 = [cl(?t4,[?c1|?q2])|?p3],
                       [succeeds partition(?p4),
			succeeds partition_solution(?p4,?s) by 
                         lemma(find_delete:twice:solution),
			ex l2: field(?t1,?t2,?p4,?l2) &
                         sub_field(?p1,?l,?p4,?l2) &
                         succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l) by
                         lemma(find_delete:field:1),
			exist(l2,
                         field(?t1,?t2,?p4,?l2) & sub_field(?p1,?l,?p4,?l2) &
                         succeeds lh(?p4) @+ lh(?l2) @< lh(?p1) @+ lh(?l),
                         [succeeds lh(?p4) @+ lh(?l2) @< ?n by 
                           lemma(less:transitive:successor),
			  fieldL(?tl1,?tl2,?p4,?l2) by 
                           lemma(field:partition_member),
			  ex p5: succeeds union_findL(?tl1,?tl2,?p4,?p5) &
			   succeeds partition_solution(?p5,?s),
			  exist(p5,
                           succeeds union_findL(?tl1,?tl2,?p4,?p5) &
                           succeeds partition_solution(?p5,?s),
                           [succeeds union_findL(?tl1,?tl2,
			     [cl(?t4,[?c1|?q2])|?p3],?p5),
			    succeeds union_find(?t1,?t2,?p1,?p5) by sld,
			    ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
			     succeeds partition_solution(?p4,?s)],
                           ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                            succeeds partition_solution(?p4,?s))],
                         ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                          succeeds partition_solution(?p4,?s))],
                       ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                        succeeds partition_solution(?p4,?s))],
                     ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                      succeeds partition_solution(?p4,?s)),
                    ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                     succeeds partition_solution(?p4,?s))],
		  ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
		   succeeds partition_solution(?p4,?s)),
		 ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
		  succeeds partition_solution(?p4,?s))],
               ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
                succeeds partition_solution(?p4,?s))],
	     ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
	      succeeds partition_solution(?p4,?s))],
           ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
            succeeds partition_solution(?p4,?s))],
	 ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
	  succeeds partition_solution(?p4,?s))],
       ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
        succeeds partition_solution(?p4,?s))],
     ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
      succeeds partition_solution(?p4,?s)),
    all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
     field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
      (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
        succeeds partition_solution(?p4,?s)),
    all [tl1,tl2,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
     fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
      (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
        succeeds partition_solution(?p3,?s)) by 
     lemma(union_findL:solution)],
   (all [t1,t2,p1,l,s]: succeeds term(?t1) & succeeds term(?t2) &
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) &
     field(?t1,?t2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
      (ex p4: succeeds union_find(?t1,?t2,?p1,?p4) &
        succeeds partition_solution(?p4,?s))) &
   (all [tl1,tl2,p1,p3,l,s]: succeeds termL(?tl1) & succeeds termL(?tl2) &
     succeeds partition(?p1) & succeeds substitution(?s) &
     succeeds unifierL(?tl1,?tl2,?s) & succeeds partition_solution(?p1,?s) &
     fieldL(?tl1,?tl2,?p1,?l) & succeeds lh(?p1) @+ lh(?l) @< s(?n) => 
      (ex p3: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
        succeeds partition_solution(?p3,?s))))])
).

:- theorem(union_find:solution,
all [t1,t2,p1,p2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds substitution(?s) & succeeds partition(?p1) &
 succeeds unifier(?t1,?t2,?s) & succeeds partition_solution(?p1,?s) =>
 (ex p2: succeeds union_find(?t1,?t2,?p1,?p2) &
   succeeds partition_solution(?p2,?s)),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds substitution(?s) &
 succeeds partition(?p1) & succeeds unifier(?t1,?t2,?s) &
 succeeds partition_solution(?p1,?s),
 [ex l: field(?t1,?t2,?p1,?l) by lemma(field:existence),
  exist(l,
   field(?t1,?t2,?p1,?l),
   [succeeds list(?l) & field_term(?t1,?p1,?l) & field_term(?t2,?p1,?l) &
    field_partition(?p1,?l) by elimination(field,4),
    succeeds list(?l),
    succeeds nat(lh(?l)) by corollary(lh:types),
    succeeds list(?p1) by lemma(partition:list),
    succeeds nat(lh(?p1)) by corollary(lh:types),
    succeeds nat(lh(?p1) @+ lh(?l)) by corollary(plus:types),
    succeeds lh(?p1) @+ lh(?l) @< s(lh(?p1) @+ lh(?l)) by lemma(less:one),
    succeeds nat(s(lh(?p1) @+ lh(?l))) by sld,
    ex p2: succeeds union_find(?t1,?t2,?p1,?p2) &
     succeeds partition_solution(?p2,?s) by 
     lemma(union_find:union_findL:solution)],
   ex p2: succeeds union_find(?t1,?t2,?p1,?p2) &
    succeeds partition_solution(?p2,?s))],
 ex p2: succeeds union_find(?t1,?t2,?p1,?p2) &
  succeeds partition_solution(?p2,?s))
).

%-----------------------------------------------------------------------
% part6
%-----------------------------------------------------------------------

:- definition_pred(roots_termL,3,
all [tl,p,l]: roots_termL(?tl,?p,?l) <=>
 (all [t1,t2]: succeeds member(?t1,?tl) & succeeds find(?p,?t1,?t2) =>
   succeeds member(?t2,?l))
).

:- definition_pred(roots_list,2,
all [p,l]: roots_list(?p,?l) <=>
 (all [f,tl,q]: succeeds member([?f|?tl],?l) =>
    roots_termL(?tl,?p,?l))
).

:- definition_pred(roots_cover,3,
all [tl,p,l]: roots_cover(?tl,?p,?l) <=>
 roots_termL(?tl,?p,?l) & roots_list(?p,?l)
).

:- lemma(cycle_free:types,
all [tl,p,c,wf1,wf2]: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) &
 succeeds termL(?tl) & succeeds partition(?p) &
 succeeds termL(?wf1) => succeeds termL(?wf2),
[induction(
  [all [tl,p,c,wf1,wf2]: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) => 
     succeeds termL(?tl) & succeeds partition(?p) & succeeds termL(?wf1) =>
      succeeds termL(?wf2)],
  [step([0,1,wF],
    [],
    assume(succeeds termL([]) & succeeds partition(?0) & 
     succeeds termL(?wF),
     [],
     succeeds termL(?wF)),
    succeeds termL([]) & succeeds partition(?0) & succeeds termL(?wF) => 
     succeeds termL(?wF)),
   step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
    [succeeds termL(?t1L) & succeeds partition(?p) & succeeds termL(?wF1) =>
      succeeds termL(?wF3),
     succeeds find(?p,?t1,?t2),
     fails member_check(?t2,?c),
     succeeds member_check(?t2,?wF1),
     succeeds cycle_freeL(?t1L,?p,?c,?wF1,?wF3)],
    assume(succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
     succeeds termL(?wF1),
     [def succeeds termL([?t1|?t1L]) by completion,
      succeeds termL(?wF3)],
     succeeds termL(?wF3)),
    succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
    succeeds termL(?wF1) => succeeds termL(?wF3)),
   step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
    [succeeds termL(?t1L) & succeeds partition(?p) &
     succeeds termL([?t2|?wF1]) => succeeds termL(?wF3),
     succeeds find(?p,?t1,?t2),
     fails member_check(?t2,?c),
     fails member_check(?t2,?wF1),
     succeeds var_form(?t2),
     succeeds cycle_freeL(?t1L,?p,?c,[?t2|?wF1],?wF3)],
    assume(succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
     succeeds termL(?wF1),
     [def succeeds termL([?t1|?t1L]) by completion,
      succeeds term(?t2) by lemma(find:types),
      succeeds termL([?t2|?wF1]) by sld,
      succeeds termL(?wF3)],
     succeeds termL(?wF3)),
    succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
    succeeds termL(?wF1) => succeeds termL(?wF3)),
   step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
    [succeeds termL(?t2L) & succeeds partition(?p) & succeeds termL(?wF1) =>
      succeeds termL(?wF2),
     succeeds termL(?t1L) & succeeds partition(?p) &
     succeeds termL([?t2|?wF2]) => succeeds termL(?wF3),
     succeeds find(?p,?t1,?t2),
     fails member_check(?t2,?c),
     fails member_check(?t2,?wF1),
     fails var_form(?t2),
     ?t2 = [?0|?t2L],
     succeeds cycle_freeL(?t2L,?p,[?t2|?c],?wF1,?wF2),
     succeeds cycle_freeL(?t1L,?p,?c,[?t2|?wF2],?wF3)],
    assume(succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
     succeeds termL(?wF1),
     [def succeeds termL([?t1|?t1L]) by completion,
      succeeds term(?t2) by lemma(find:types),
      def succeeds term([?0|?t2L]) by completion,
      succeeds termL(?wF2),
      succeeds termL([?t2|?wF2]) by sld,
      succeeds termL(?wF3)],
     succeeds termL(?wF3)),
    succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
    succeeds termL(?wF1) => succeeds termL(?wF3))]),
 assume(succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) & succeeds termL(?tl) &
  succeeds partition(?p) & succeeds termL(?wf1),
  [succeeds termL(?tl) & succeeds partition(?p) & succeeds termL(?wf1) => 
    succeeds termL(?wf2),
   succeeds termL(?tl) & succeeds partition(?p) & succeeds termL(?wf1) => 
    succeeds termL(?wf2),
   succeeds termL(?wf2)],
  succeeds termL(?wf2))]
).

:- lemma(roots:existence,
all p: succeeds partition(?p) => (ex tl: succeeds roots(?p,?tl)),
induction(
 [all p: succeeds partition(?p) => (ex tl: succeeds roots(?p,?tl))],
 [step([],
   [],
   [succeeds roots([],[]) by sld,
    ex tl: succeeds roots([],?tl)],
   ex tl: succeeds roots([],?tl)),
  step([c,p],
   [ex tl: succeeds roots(?p,?tl),
    succeeds class(?c),
    succeeds partition(?p),
    succeeds disjoint(?c,?p)],
   exist(tl,
    succeeds roots(?p,?tl),
    [def succeeds class(?c) by completion,
     exist([t,0],
      ?c = cl(?t,?0) & succeeds term(?t) & succeeds partition(?0) &
      fails partition_member(?t,?0) & fails not_var_class(?t,?0),
      [succeeds roots([cl(?t,?0)|?p],[?t|?tl]) by sld,
       succeeds roots([?c|?p],[?t|?tl]),
       ex tl: succeeds roots([?c|?p],?tl)],
      ex tl: succeeds roots([?c|?p],?tl))],
    ex tl: succeeds roots([?c|?p],?tl)),
   ex tl: succeeds roots([?c|?p],?tl))])
).

:- lemma(roots:types,
all [p,tl]: succeeds roots(?p,?tl) & succeeds partition(?p) =>
  succeeds termL(?tl),
[induction(
  [all [p,tl]: succeeds roots(?p,?tl) => succeeds partition(?p) => 
      succeeds termL(?tl)],
  [step([],[],[],succeeds partition([]) => succeeds termL([])),
   step([t,0,p,tL],
    [succeeds partition(?p) => succeeds termL(?tL),
     succeeds roots(?p,?tL)],
    assume(succeeds partition([cl(?t,?0)|?p]),
     [def succeeds partition([cl(?t,?0)|?p]) by completion,
      succeeds termL(?tL),
      def succeeds class(cl(?t,?0)) by completion,
      succeeds termL([?t|?tL]) by sld],
     succeeds termL([?t|?tL])),
    succeeds partition([cl(?t,?0)|?p]) => succeeds termL([?t|?tL]))]),
 assume(succeeds roots(?p,?tl) & succeeds partition(?p),
  [succeeds partition(?p) => succeeds termL(?tl),
   succeeds partition(?p) => succeeds termL(?tl),
   succeeds termL(?tl)],
  succeeds termL(?tl))]
).

:- lemma(roots:uniqueneness,
all [p,tl1,tl2]: succeeds roots(?p,?tl1) & succeeds roots(?p,?tl2) =>
  ?tl1 = ?tl2,
[induction(
  [all [p,tl1]: succeeds roots(?p,?tl1) => 
     (all tl2: succeeds roots(?p,?tl2) => ?tl1 = ?tl2)],
  [step([],
    [],
    assume(succeeds roots([],?tl2),
     [def succeeds roots([],?tl2) by completion,
      [] = ?tl2],
     [] = ?tl2),
    all tl2: succeeds roots([],?tl2) => [] = ?tl2),
   step([t,0,p,tL],
    [all tl2: succeeds roots(?p,?tl2) => ?tL = ?tl2,
     succeeds roots(?p,?tL)],
    assume(succeeds roots([cl(?t,?0)|?p],?tl2),
     [def succeeds roots([cl(?t,?0)|?p],?tl2) by completion,
      exist(1,
       ?tl2 = [?t|?1] & succeeds roots(?p,?1),
       [?tL = ?1,
	[?t|?tL] = ?tl2],
       [?t|?tL] = ?tl2)],
     [?t|?tL] = ?tl2),
    all tl2: succeeds roots([cl(?t,?0)|?p],?tl2) => [?t|?tL] = ?tl2)]),
 assume(succeeds roots(?p,?tl1) & succeeds roots(?p,?tl2),
  [all tl2: succeeds roots(?p,?tl2) => ?tl1 = ?tl2,
   succeeds roots(?p,?tl2) => ?tl1 = ?tl2,
   ?tl1 = ?tl2],
  ?tl1 = ?tl2)]
).

:- definition_fun(roots,1,
all [p,tl]: succeeds partition(?p) =>
  (roots(?p) = ?tl <=> succeeds roots(?p,?tl)),
existence by lemma(roots:existence),
uniqueness by lemma(roots:uniqueneness)
).

:- corollary(roots:types,
all p: succeeds partition(?p) => succeeds termL(roots(?p)),
assume(succeeds partition(?p),
 [succeeds roots(?p,roots(?p)) by existence(roots,1),
  succeeds termL(roots(?p)) by lemma(roots:types)],
 succeeds termL(roots(?p)))
).

:- lemma(roots:termination,
all [p,tl]: succeeds partition(?p) => terminates roots(?p,?tl),
[induction(
  [all p: succeeds partition(?p) => (all tl: terminates roots(?p,?tl))],
  [step([],[],terminates roots([],?tl),all tl: terminates roots([],?tl)),
   step([c,p],
    [all tl: terminates roots(?p,?tl),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    [?c = cl(?t,?0) & ?tl = [?t|?tL] => terminates roots(?p,?tL),
     all [t,0,tL]: ?c = cl(?t,?0) & ?tl = [?t|?tL] => 
       terminates roots(?p,?tL),
     terminates roots([?c|?p],?tl) by completion],
    all tl: terminates roots([?c|?p],?tl))]),
 assume(succeeds partition(?p),
  [all tl: terminates roots(?p,?tl),
   terminates roots(?p,?tl)],
  terminates roots(?p,?tl))]
).

:- lemma(roots:member,
all [p,q,t,tl]: succeeds roots(?p,?tl) & succeeds member(cl(?t,?q),?p) =>
  succeeds member(?t,?tl),
[induction(
  [all [p,tl]: succeeds roots(?p,?tl) => 
     (all [q,t]: succeeds member(cl(?t,?q),?p) => succeeds member(?t,?tl))],
  [step([],
    [],
    assume(succeeds member(cl(?t,?q),[]),
     [def succeeds member(cl(?t,?q),[]) by completion,ff],
     succeeds member(?t,[])),
    all [q,t]: succeeds member(cl(?t,?q),[]) => succeeds member(?t,[])),
   step([t,0,p,tL],
    [all [q,t]: succeeds member(cl(?t,?q),?p) => succeeds member(?t,?tL),
     succeeds roots(?p,?tL)],
    assume(succeeds member(cl(?1,?q),[cl(?t,?0)|?p]),
     [def succeeds member(cl(?1,?q),[cl(?t,?0)|?p]) by completion,
      cases(?1 = ?t & ?q = ?0,
       [],
       succeeds member(cl(?1,?q),?p),
       [],
       succeeds member(?1,[?t|?tL]))],
     succeeds member(?1,[?t|?tL])),
    all [q,1]: succeeds member(cl(?1,?q),[cl(?t,?0)|?p]) => 
      succeeds member(?1,[?t|?tL]))]),
 assume(succeeds roots(?p,?tl) & succeeds member(cl(?t,?q),?p),
  [all [q,t]: succeeds member(cl(?t,?q),?p) => succeeds member(?t,?tl),
   succeeds member(cl(?t,?q),?p) => succeeds member(?t,?tl),
   succeeds member(?t,?tl)],
  succeeds member(?t,?tl))]
).

:- corollary(roots:member,
all [p,q,t]: succeeds partition(?p) & succeeds member(cl(?t,?q),?p) =>
  succeeds member(?t,roots(?p)),
assume(succeeds partition(?p) & succeeds member(cl(?t,?q),?p),
 [succeeds roots(?p,roots(?p)) by existence(roots,1),
  succeeds member(?t,roots(?p)) by lemma(roots:member)],
 succeeds member(?t,roots(?p)))
).

:- lemma(find:roots,
all [p,t1,t2]: succeeds partition(?p) & succeeds find(?p,?t1,?t2) =>
  succeeds member(?t2,roots(?p)) \/ ?t1 = ?t2,
assume(succeeds partition(?p) & succeeds find(?p,?t1,?t2),
 [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
    ?c = cl(?t2,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t2 by 
   lemma(find:characterization:1),
  cases(
   ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
    ?c = cl(?t2,?q),
   exist([c,q],
    succeeds member(?c,?p) & succeeds class_member(?t1,?c) & 
    ?c = cl(?t2,?q),
    [succeeds member(cl(?t2,?q),?p),
     succeeds member(?t2,roots(?p)) by corollary(roots:member)],
    succeeds member(?t2,roots(?p)) \/ ?t1 = ?t2),
   fails partition_member(?t1,?p) & ?t1 = ?t2,
   [],
   succeeds member(?t2,roots(?p)) \/ ?t1 = ?t2)],
 succeeds member(?t2,roots(?p)) \/ ?t1 = ?t2)
).

:- lemma(sub:roots:roots_lermL,
all [p,l,tl]: succeeds partition(?p) & sub(?tl,?l) & sub(roots(?p),?l) =>
  roots_termL(?tl,?p,?l),
assume(succeeds partition(?p) & sub(?tl,?l) & sub(roots(?p),?l),
 [assume(succeeds member(?t1,?tl) & succeeds find(?p,?t1,?t2),
   [succeeds member(?t2,roots(?p)) \/ ?t1 = ?t2 by lemma(find:roots),
    cases(succeeds member(?t2,roots(?p)),
     [all x: succeeds member(?x,roots(?p)) => succeeds member(?x,?l) by 
       elimination(sub,2),
      succeeds member(?t2,?l)],
     ?t1 = ?t2,
     [all x: succeeds member(?x,?tl) => succeeds member(?x,?l) by 
       elimination(sub,2),
      succeeds member(?t2,?l)],
     succeeds member(?t2,?l))],
   succeeds member(?t2,?l)),
  roots_termL(?tl,?p,?l) by introduction(roots_termL,3)],
 roots_termL(?tl,?p,?l))
).

:- lemma(sub:subterms_closed:roots_cover,
all [p,l,tl]: succeeds partition(?p) & sub(?tl,?l) & sub(roots(?p),?l) &
 subterms_closed(?l) => roots_cover(?tl,?p,?l),
assume(succeeds partition(?p) & sub(?tl,?l) & sub(roots(?p),?l) &
 subterms_closed(?l),
 [roots_termL(?tl,?p,?l) by lemma(sub:roots:roots_lermL),
  assume(succeeds member([?f|?tl1],?l),
   [sub(?tl1,?l) by lemma(subterms_closed:sub),
    roots_termL(?tl1,?p,?l) by lemma(sub:roots:roots_lermL)],
   roots_termL(?tl1,?p,?l)),
  all [f,tl1,q]: succeeds member([?f|?tl1],?l) => roots_termL(?tl1,?p,?l),
  roots_list(?p,?l) by introduction(roots_list,2),
  roots_cover(?tl,?p,?l) by introduction(roots_cover,3)],
 roots_cover(?tl,?p,?l))
).

:- lemma(roots_cover:existence,
all [p,tl]: succeeds termL(?tl) & succeeds partition(?p) =>
  (ex l: succeeds termL(?l) & roots_cover(?tl,?p,?l)),
assume(succeeds termL(?tl) & succeeds partition(?p),
 [succeeds termL(roots(?p)) by corollary(roots:types),
  succeeds termL(?tl ** roots(?p)) by corollary(termL:app),
  ex l: subterms_closed(?l) & subterms_termL(?tl ** roots(?p),?l) by 
   lemma(subterms_closed:existence),
  exist(l,
   subterms_closed(?l) & subterms_termL(?tl ** roots(?p),?l),
   [sub(?tl ** roots(?p),?l) by lemma(subterms_termL:sub),
    succeeds list(?tl) by lemma(termL:list),
    succeeds list(roots(?p)) by lemma(termL:list),
    sub(?tl,?tl ** roots(?p)) by lemma(sub:app:1),
    sub(?tl,?l) by lemma(sub:transitive),
    sub(roots(?p),?tl ** roots(?p)) by lemma(sub:app:2),
    sub(roots(?p),?l) by lemma(sub:transitive),
    roots_cover(?tl,?p,?l) by lemma(sub:subterms_closed:roots_cover),
    succeeds termL(?l) & subterms_termL(?l,?l) by 
     elimination(subterms_closed,1),
    succeeds termL(?l),
    ex l: succeeds termL(?l) & roots_cover(?tl,?p,?l)],
   ex l: succeeds termL(?l) & roots_cover(?tl,?p,?l))],
 ex l: succeeds termL(?l) & roots_cover(?tl,?p,?l))
).

:- lemma(roots_termL:tail,
all [l,p,t,tl]: roots_termL([?t|?tl],?p,?l) => roots_termL(?tl,?p,?l),
assume(roots_termL([?t|?tl],?p,?l),
 [assume(succeeds member(?t1,?tl) & succeeds find(?p,?t1,?t2),
   [all [t1,t2]: succeeds member(?t1,[?t|?tl]) & succeeds find(?p,?t1,?t2) =>
      succeeds member(?t2,?l) by elimination(roots_termL,3),
    succeeds member(?t2,?l)],
   succeeds member(?t2,?l)),
  roots_termL(?tl,?p,?l) by introduction(roots_termL,3)],
 roots_termL(?tl,?p,?l))
).

:- lemma(roots_cover:tail,
all [l,p,t,tl]: roots_cover([?t|?tl],?p,?l) => roots_cover(?tl,?p,?l),
assume(roots_cover([?t|?tl],?p,?l),
 [roots_termL([?t|?tl],?p,?l) & roots_list(?p,?l) by 
   elimination(roots_cover,3),
  roots_termL(?tl,?p,?l) by lemma(roots_termL:tail),
  roots_cover(?tl,?p,?l) by introduction(roots_cover,3)],
 roots_cover(?tl,?p,?l))
).

:- lemma(roots_termL:sub,
all [tl,p,l1,l2]: roots_termL(?tl,?p,?l1) & sub(?l1,?l2) =>
  roots_termL(?tl,?p,?l2),
assume(roots_termL(?tl,?p,?l1) & sub(?l1,?l2),
 [assume(succeeds member(?t1,?tl) & succeeds find(?p,?t1,?t2),
   [all [t1,t2]: succeeds member(?t1,?tl) & succeeds find(?p,?t1,?t2) => 
      succeeds member(?t2,?l1) by elimination(roots_termL,3),
    all x: succeeds member(?x,?l1) => succeeds member(?x,?l2) by 
     elimination(sub,2),
    succeeds member(?t2,?l2)],
   succeeds member(?t2,?l2)),
  roots_termL(?tl,?p,?l2) by introduction(roots_termL,3)],
 roots_termL(?tl,?p,?l2))
).

:- lemma(roots_list:sub,
all [p,l1,l2]: roots_list(?p,?l1) & sub(?l1,?l2) & sub(?l2,?l1) =>
  roots_list(?p,?l2),
assume(roots_list(?p,?l1) & sub(?l1,?l2) & sub(?l2,?l1),
 [assume(succeeds member([?f|?tl],?l2),
   [all x: succeeds member(?x,?l2) => succeeds member(?x,?l1) by 
     elimination(sub,2),
    succeeds member([?f|?tl],?l1),
    all [f,tl,q]: succeeds member([?f|?tl],?l1) => roots_termL(?tl,?p,?l1) by
     elimination(roots_list,2),
    roots_termL(?tl,?p,?l1),
    roots_termL(?tl,?p,?l2) by lemma(roots_termL:sub)],
   roots_termL(?tl,?p,?l2)),
  roots_list(?p,?l2) by introduction(roots_list,2)],
 roots_list(?p,?l2))
).

:- lemma(delete:app:sub:1,
all [l1,l2,l3,x]: succeeds delete(?x,?l2,?l3) & succeeds list(?l1) =>
  sub(?l1 ** ?l2,[?x|?l1] ** ?l3),
assume(succeeds delete(?x,?l2,?l3) & succeeds list(?l1),
 [assume(succeeds member(?y,?l1 ** ?l2),
   [succeeds member(?y,?l1) \/ succeeds member(?y,?l2) by 
     corollary(app:member:3),
    cases(succeeds member(?y,?l1),
     [succeeds member(?y,[?x|?l1]) by sld,
      succeeds member(?y,[?x|?l1] ** ?l3) by corollary(app:member:1)],
     succeeds member(?y,?l2),
     [succeeds member(?y,?l3) \/ ?y = ?x by lemma(delete:member:1),
      cases(succeeds member(?y,?l3),
       succeeds member(?y,[?x|?l1] ** ?l3) by corollary(app:member:2),
       ?y = ?x,
       [succeeds member(?y,[?x|?l1]),
	succeeds member(?y,[?x|?l1] ** ?l3) by corollary(app:member:1)],
       succeeds member(?y,[?x|?l1] ** ?l3))],
     succeeds member(?y,[?x|?l1] ** ?l3))],
   succeeds member(?y,[?x|?l1] ** ?l3)),
  sub(?l1 ** ?l2,[?x|?l1] ** ?l3) by introduction(sub,2)],
 sub(?l1 ** ?l2,[?x|?l1] ** ?l3))
).

:- lemma(delete:app:sub:2,
all [l1,l2,l3,x]: succeeds delete(?x,?l2,?l3) & succeeds list(?l1) =>
  sub([?x|?l1] ** ?l3,?l1 ** ?l2),
assume(succeeds delete(?x,?l2,?l3) & succeeds list(?l1),
 [assume(succeeds member(?y,[?x|?l1] ** ?l3),
   [succeeds member(?y,[?x|?l1]) \/ succeeds member(?y,?l3) by 
     corollary(app:member:3),
    cases(succeeds member(?y,[?x|?l1]),
     [def succeeds member(?y,[?x|?l1]) by completion,
      cases(?y = ?x,
       [succeeds member(?x,?l2) by lemma(delete:member:2),
	succeeds member(?y,?l2),
	succeeds member(?y,?l1 ** ?l2) by corollary(app:member:2)],
       succeeds member(?y,?l1),
       succeeds member(?y,?l1 ** ?l2) by corollary(app:member:1),
       succeeds member(?y,?l1 ** ?l2))],
     succeeds member(?y,?l3),
     [succeeds member(?y,?l2) by lemma(delete:member:3),
      succeeds member(?y,?l1 ** ?l2) by corollary(app:member:2)],
     succeeds member(?y,?l1 ** ?l2))],
   succeeds member(?y,?l1 ** ?l2)),
  sub([?x|?l1] ** ?l3,?l1 ** ?l2) by introduction(sub,2)],
 sub([?x|?l1] ** ?l3,?l1 ** ?l2))
).

:- lemma(member_check:member,
all [x,l]: succeeds member_check(?x,?l) => succeeds member(?x,?l),
induction(
 [all [x,l]: succeeds member_check(?x,?l) => succeeds member(?x,?l)],
 [step([x,y,l],[?x = ?y],[],succeeds member(?x,[?y|?l])),
  step([x,y,l],
   [succeeds member(?x,?l),
    ?x <> ?y,
    succeeds member_check(?x,?l)],
   [],
   succeeds member(?x,[?y|?l]))])
).

:- lemma(member:member_check,
all [x,l]: succeeds member(?x,?l) => succeeds member_check(?x,?l),
induction(
 [all [x,l]: succeeds member(?x,?l) => succeeds member_check(?x,?l)],
 [step([x,l],[],[],succeeds member_check(?x,[?x|?l])),
  step([x,y,l],
   [succeeds member_check(?x,?l),
    succeeds member(?x,?l)],
   [?x = ?y \/ ?x <> ?y,
    cases(?x = ?y,
     [],
     ?x <> ?y,
     [],
     succeeds member_check(?x,[?y|?l]))],
   succeeds member_check(?x,[?y|?l]))])
).

:- lemma(member_check:termination,
all [x,l]: succeeds list(?l) & gr(?x) & gr(?l) =>
  terminates member_check(?x,?l),
[induction(
  [all l: succeeds list(?l) => 
     (all x: gr(?x) & gr(?l) => terminates member_check(?x,?l))],
  [step([],
    [],
    gr(?x) & gr([]) => terminates member_check(?x,[]),
    all x: gr(?x) & gr([]) => terminates member_check(?x,[])),
   step([x,l],
    [all x: gr(?x) & gr(?l) => terminates member_check(?x,?l),
     succeeds list(?l)],
    assume(gr(?y) & gr([?x|?l]),
     [],
     terminates member_check(?y,[?x|?l])),
    all y: gr(?y) & gr([?x|?l]) => terminates member_check(?y,[?x|?l]))]),
 assume(succeeds list(?l) & gr(?x) & gr(?l),
  [all x: gr(?x) & gr(?l) => terminates member_check(?x,?l),
   gr(?x) & gr(?l) => terminates member_check(?x,?l),
   terminates member_check(?x,?l)],
  terminates member_check(?x,?l))]
).

:- lemma(roots_cover:delete,
all [t1,tl1,p,c,l1,t2,tl2,f]: roots_cover([?t1|?tl1],?p,?c ** ?l1) &
 succeeds find(?p,?t1,?t2) & ?t2 = [?f|?tl2] & succeeds list(?l1) &
 succeeds partition(?p) & succeeds termL(?c) & succeeds termL([?t1|?tl1]) &
 fails member_check(?t2,?c) =>
  (ex l2: succeeds delete(?t2,?l1,?l2) & roots_cover(?tl2,?p,[?t2|?c] ** ?l2)),
assume(roots_cover([?t1|?tl1],?p,?c ** ?l1) & succeeds find(?p,?t1,?t2) &
 ?t2 = [?f|?tl2] & succeeds list(?l1) & succeeds partition(?p) &
 succeeds termL(?c) & succeeds termL([?t1|?tl1]) &
 fails member_check(?t2,?c),
 [roots_termL([?t1|?tl1],?p,?c ** ?l1) & roots_list(?p,?c ** ?l1) by 
   elimination(roots_cover,3),
  all [t3,t2]: succeeds member(?t3,[?t1|?tl1]) & succeeds find(?p,?t3,?t2) =>
    succeeds member(?t2,?c ** ?l1) by elimination(roots_termL,3),
  succeeds member(?t1,[?t1|?tl1]) by sld,
  succeeds member(?t2,?c ** ?l1),
  succeeds list(?c) by lemma(termL:list),
  succeeds member(?t2,?c) \/ succeeds member(?t2,?l1) by 
   corollary(app:member:3),
  cases(succeeds member(?t2,?c),
   [succeeds member_check(?t2,?c) by lemma(member:member_check),
    ff],
   succeeds member(?t2,?l1),
   [],
   succeeds member(?t2,?l1)),
  ex l2: succeeds delete(?t2,?l1,?l2) by 
   lemma(delete:member:existence),
  exist(l2,
   succeeds delete(?t2,?l1,?l2),
   [all [f,tl,q]: succeeds member([?f|?tl],?c ** ?l1) => 
      roots_termL(?tl,?p,?c ** ?l1) by elimination(roots_list,2),
    succeeds member([?f|?tl2],?c ** ?l1),
    roots_termL(?tl2,?p,?c ** ?l1),
    sub(?c ** ?l1,[?t2|?c] ** ?l2) by lemma(delete:app:sub:1),
    sub([?t2|?c] ** ?l2,?c ** ?l1) by lemma(delete:app:sub:2),
    roots_termL(?tl2,?p,[?t2|?c] ** ?l2) by lemma(roots_termL:sub),
    roots_list(?p,[?t2|?c] ** ?l2) by lemma(roots_list:sub),
    roots_cover(?tl2,?p,[?t2|?c] ** ?l2) by introduction(roots_cover,3),
    ex l2: succeeds delete(?t2,?l1,?l2) &
     roots_cover(?tl2,?p,[?t2|?c] ** ?l2)],
   ex l2: succeeds delete(?t2,?l1,?l2) &
    roots_cover(?tl2,?p,[?t2|?c] ** ?l2))],
 ex l2: succeeds delete(?t2,?l1,?l2) & roots_cover(?tl2,?p,[?t2|?c] ** ?l2))
).

:- lemma(cycle_freeL:termination:list,
all n: succeeds nat(?n) &
 (all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
   succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
   roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< ?n => 
    terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)) =>
  (all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
    succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
    roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
     terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
assume(succeeds nat(?n) &
 (all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
   succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
   roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< ?n => 
    terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
 [induction(
   [all tl: succeeds termL(?tl) => 
      (all [p,c,wf1,wf2,l]: succeeds partition(?p) & succeeds termL(?c) &
        succeeds termL(?wf1) & succeeds list(?l) &
        roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
         terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2))],
   [step([],
     [],
     succeeds partition(?p) & succeeds termL(?c) & succeeds termL(?wf1) &
     succeeds list(?l) & roots_cover([],?p,?c ** ?l) &
     succeeds lh(?l) @< s(?n) => terminates cycle_freeL([],?p,?c,?wf1,?wf2),
     all [p,c,wf1,wf2,l]: succeeds partition(?p) & succeeds termL(?c) &
      succeeds termL(?wf1) & succeeds list(?l) & 
      roots_cover([],?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
       terminates cycle_freeL([],?p,?c,?wf1,?wf2)),
    step([t,tL],
     [all [p,c,wf1,wf2,l]: succeeds partition(?p) & succeeds termL(?c) &
       succeeds termL(?wf1) & succeeds list(?l) &
       roots_cover(?tL,?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
        terminates cycle_freeL(?tL,?p,?c,?wf1,?wf2),
      succeeds term(?t),
      succeeds termL(?tL)],
     assume(succeeds partition(?p) & succeeds termL(?c) &
      succeeds termL(?wf1) & succeeds list(?l) &
      roots_cover([?t|?tL],?p,?c ** ?l) & succeeds lh(?l) @< s(?n),
      [gr(?t) by corollary(term:gr),
       terminates find(?p,?t,?t2) by lemma(find:termination),
       assume(succeeds find(?p,?t,?t2),
	[succeeds term(?t2) by lemma(find:types),
	 gr(?t2) by corollary(term:gr),
	 gr(?c) by lemma(term:termL:gr),
	 succeeds list(?c) by lemma(termL:list),
	 terminates member_check(?t2,?c) by 
          lemma(member_check:termination),
	 terminates (member_check(?t2,?c) & ff),
	 assume(fails member_check(?t2,?c),
	  [gr(?wf1) by lemma(term:termL:gr),
	   succeeds list(?wf1) by lemma(termL:list),
	   terminates member_check(?t2,?wf1) by 
            lemma(member_check:termination),
	   roots_cover(?tL,?p,?c ** ?l) by lemma(roots_cover:tail),
	   terminates cycle_freeL(?tL,?p,?c,?wf1,?wf2),
	   terminates 
	   (member_check(?t2,?wf1) & cycle_freeL(?tL,?p,?c,?wf1,?wf2)),
	   assume(?t2 = [?0|?t2L],
	    [def succeeds term([?0|?t2L]) by completion,
	     succeeds termL([?t|?tL]) by sld,
	     ex l2: succeeds delete(?t2,?l,?l2) &
              roots_cover(?t2L,?p,[?t2|?c] ** ?l2) by 
              lemma(roots_cover:delete),
	     exist(l2,
              succeeds delete(?t2,?l,?l2) &
              roots_cover(?t2L,?p,[?t2|?c] ** ?l2),
              [succeeds list(?l2) by lemma(delete:types:1),
	       lh(?l) = s(lh(?l2)) by theorem(delete:length),
	       succeeds nat(lh(?l2)) by corollary(lh:types),
	       succeeds lh(?l2) @< s(lh(?l2)) by lemma(less:one),
	       succeeds lh(?l2) @< lh(?l),
	       succeeds lh(?l2) @< ?n by 
                lemma(less:transitive:successor),
	       succeeds termL([?t2|?c]) by sld,
	       terminates cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2)],
              terminates cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2)),
	     assume(succeeds cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2),
	      [succeeds termL(?wF2) by lemma(cycle_free:types),
	       terminates cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2)],
	      terminates cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2)),
	     terminates 
	     (cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	      cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2))],
	    terminates 
	    (cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	     cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2))),
	   terminates 
	   (?t2 = [?0|?t2L] & cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	    cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2)),
	   terminates 
	   (~ var_form(?t2) & ?t2 = [?0|?t2L] &
	    cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	    cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2)),
	   terminates 
	   (~ member_check(?t2,?wf1) &
	    (var_form(?t2) & cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2) \/
	     ~ var_form(?t2) & ?t2 = [?0|?t2L] &
	     cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	     cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2)))],
	  terminates 
	  (member_check(?t2,?wf1) & cycle_freeL(?tL,?p,?c,?wf1,?wf2)) &
	  terminates 
	  (~ member_check(?t2,?wf1) &
	   (var_form(?t2) & cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2) \/
	    ~ var_form(?t2) & ?t2 = [?0|?t2L] &
	    cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	    cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2)))),
	 terminates 
	 (~ member_check(?t2,?c) &
	  (member_check(?t2,?wf1) & cycle_freeL(?tL,?p,?c,?wf1,?wf2) \/
	   ~ member_check(?t2,?wf1) &
	   (var_form(?t2) & cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2) \/
	    ~ var_form(?t2) & ?t2 = [?0|?t2L] &
	    cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	    cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2))))],
	terminates (member_check(?t2,?c) & ff) &
	terminates 
	(~ member_check(?t2,?c) &
	 (member_check(?t2,?wf1) & cycle_freeL(?tL,?p,?c,?wf1,?wf2) \/
	  ~ member_check(?t2,?wf1) &
	  (var_form(?t2) & cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2) \/
	   ~ var_form(?t2) & ?t2 = [?0|?t2L] &
	   cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	   cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2))))),
       terminates 
       (find(?p,?t,?t2) &
	(member_check(?t2,?c) & ff \/
	 ~ member_check(?t2,?c) &
	 (member_check(?t2,?wf1) & cycle_freeL(?tL,?p,?c,?wf1,?wf2) \/
	  ~ member_check(?t2,?wf1) &
	  (var_form(?t2) & cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2) \/
	   ~ var_form(?t2) & ?t2 = [?0|?t2L] &
	   cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
	   cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2))))),
       all [t2,0,t2L,wF2]: 
        terminates 
        (find(?p,?t,?t2) &
         (member_check(?t2,?c) & ff \/
          ~ member_check(?t2,?c) &
          (member_check(?t2,?wf1) & cycle_freeL(?tL,?p,?c,?wf1,?wf2) \/
           ~ member_check(?t2,?wf1) &
           (var_form(?t2) & cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2) \/
            ~ var_form(?t2) & ?t2 = [?0|?t2L] &
            cycle_freeL(?t2L,?p,[?t2|?c],?wf1,?wF2) &
            cycle_freeL(?tL,?p,?c,[?t2|?wF2],?wf2))))),
       terminates cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2) by completion],
      terminates cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)),
     all [p,c,wf1,wf2,l]: succeeds partition(?p) & succeeds termL(?c) &
      succeeds termL(?wf1) & succeeds list(?l) &
      roots_cover([?t|?tL],?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
       terminates cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))]),
  assume(succeeds termL(?tl) & succeeds partition(?p) & succeeds termL(?c) &
   succeeds termL(?wf1) & succeeds list(?l) & roots_cover(?tl,?p,?c ** ?l) &
   succeeds lh(?l) @< s(?n),
   [all [p,c,wf1,wf2,l]: succeeds partition(?p) & succeeds termL(?c) &
     succeeds termL(?wf1) & succeeds list(?l) & 
     roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
      terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2),
    succeeds partition(?p) & succeeds termL(?c) & succeeds termL(?wf1) &
    succeeds list(?l) & roots_cover(?tl,?p,?c ** ?l) &
    succeeds lh(?l) @< s(?n) => terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2),
    terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)],
   terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2))],
 all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
  succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
  roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
   terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2))
).

:- lemma(cycle_freeL:termination,
all n: succeeds nat(?n) =>
  (all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
    succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) & 
    roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< ?n =>
     terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
induction(
 [all n: succeeds nat(?n) => 
    (all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
      succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
      roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< ?n => 
       terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2))],
 [step([],
   [],
   assume(succeeds termL(?tl) & succeeds partition(?p) & succeeds termL(?c) &
    succeeds termL(?wf1) & succeeds list(?l) & roots_cover(?tl,?p,?c ** ?l) &
    succeeds lh(?l) @< 0,
    [def succeeds lh(?l) @< 0 by completion,ff],
    terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
   all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
    succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
    roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< 0 => 
     terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
  step([n],
   [all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
     succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
     roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< ?n => 
      terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2),
    succeeds nat(?n)],
   assume(succeeds termL(?tl) & succeeds partition(?p) & succeeds termL(?c) &
    succeeds termL(?wf1) & succeeds list(?l) & roots_cover(?tl,?p,?c ** ?l) &
    succeeds lh(?l) @< s(?n),
    [all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
      succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
      roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
       terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2) by 
      lemma(cycle_freeL:termination:list),
     terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)],
    terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
   all [tl,p,c,wf1,wf2,l]: succeeds termL(?tl) & succeeds partition(?p) &
    succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l) &
    roots_cover(?tl,?p,?c ** ?l) & succeeds lh(?l) @< s(?n) => 
     terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2))])
).

:- theorem(cycle_freeL:termination,
all [tl,p,wf]: succeeds termL(?tl) & succeeds partition(?p) =>
  terminates cycle_freeL(?tl,?p,[],[],?wf),
assume(succeeds termL(?tl) & succeeds partition(?p),
 [ex l: succeeds termL(?l) & roots_cover(?tl,?p,?l) by 
   lemma(roots_cover:existence),
  exist(l,
   succeeds termL(?l) & roots_cover(?tl,?p,?l),
   [succeeds list(?l) by lemma(termL:list),
    [] ** ?l = ?l by corollary(app:nil),
    roots_cover(?tl,?p,[] ** ?l),
    succeeds nat(lh(?l)) by corollary(lh:types),
    succeeds lh(?l) @< s(lh(?l)) by lemma(less:one),
    succeeds nat(s(lh(?l))),
    succeeds termL([]) by sld,
    all [tl,p,c,wf1,wf2,l1]: succeeds termL(?tl) & succeeds partition(?p) &
     succeeds termL(?c) & succeeds termL(?wf1) & succeeds list(?l1) &
     roots_cover(?tl,?p,?c ** ?l1) & succeeds lh(?l1) @< s(lh(?l)) => 
      terminates cycle_freeL(?tl,?p,?c,?wf1,?wf2) by 
     lemma(cycle_freeL:termination),
    terminates cycle_freeL(?tl,?p,[],[],?wf)],
   terminates cycle_freeL(?tl,?p,[],[],?wf))],
 terminates cycle_freeL(?tl,?p,[],[],?wf))
).

:- theorem(cycle_free:termination,
all p: succeeds partition(?p) => terminates cycle_free(?p),
assume(succeeds partition(?p),
 [terminates roots(?p,?tL) by lemma(roots:termination),
  assume(succeeds roots(?p,?tL),
   [succeeds termL(?tL) by lemma(roots:types),
    succeeds termL([]) by sld,
    terminates cycle_freeL(?tL,?p,[],[],?wf) by 
     theorem(cycle_freeL:termination)],
   terminates cycle_freeL(?tL,?p,[],[],?wf)),
  terminates (roots(?p,?tL) & cycle_freeL(?tL,?p,[],[],?wf)),
  all [tL,wf]: terminates (roots(?p,?tL) & cycle_freeL(?tL,?p,[],[],?wf)),
  terminates cycle_free(?p) by completion],
 terminates cycle_free(?p))
).

:- theorem(unify_terms_part:termination,
all [t1,t2,p]: succeeds term(?t1) & succeeds term(?t2) =>
  terminates unify_terms_part(?t1,?t2,?p),
assume(succeeds term(?t1) & succeeds term(?t2),
 [succeeds partition([]) by sld,
  terminates union_find(?t1,?t2,[],?p) by theorem(union_find:termination),
  assume(succeeds union_find(?t1,?t2,[],?p),
   [succeeds partition(?p) by corollary(union_find:types),
    terminates cycle_free(?p) by theorem(cycle_free:termination)],
   terminates cycle_free(?p)),
  terminates (union_find(?t1,?t2,[],?p) & cycle_free(?p)),
  terminates unify_terms_part(?t1,?t2,?p) by completion],
 terminates unify_terms_part(?t1,?t2,?p))
).

:- theorem(unifiable_terms:termination,
all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) =>
  terminates unifiable_terms(?t1,?t2),
assume(succeeds term(?t1) & succeeds term(?t2),
 [terminates unify_terms_part(?t1,?t2,?p) by 
   theorem(unify_terms_part:termination),
  all p: terminates unify_terms_part(?t1,?t2,?p),
  terminates unifiable_terms(?t1,?t2) by completion],
 terminates unifiable_terms(?t1,?t2))
).

%-----------------------------------------------------------------------
% part7
%-----------------------------------------------------------------------

:- lemma(size:sizeL:types,
(all [t,n]: succeeds size(?t,?n) => succeeds nat(?n)) &
(all [tl,n]: succeeds sizeL(?tl,?n) => succeeds nat(?n)),
induction(
 [all [t,n]: succeeds size(?t,?n) => succeeds nat(?n),
  all [tl,n]: succeeds sizeL(?tl,?n) => succeeds nat(?n)],
 [step([0],[],[],succeeds nat(s(0))),
  step([0,tL,n],
   [succeeds nat(?n),
    succeeds sizeL(?tL,?n)],
   [],
   succeeds nat(s(?n))),
  step([],
   [],
   [],
   succeeds nat(0)),
  step([t,tL,n3,n1,n2],
   [succeeds nat(?n1),
    succeeds nat(?n2),
    succeeds size(?t,?n1),
    succeeds sizeL(?tL,?n2),
    succeeds plus(?n1,?n2,?n3)],
   succeeds nat(?n3) by lemma(plus:types:2),
   succeeds nat(?n3))])
).

:- lemma(size:sizeL:existence,
(all t: succeeds term(?t) => (ex n: succeeds size(?t,?n))) &
(all tl: succeeds termL(?tl) => (ex n: succeeds sizeL(?tl,?n))),
induction(
 [all t: succeeds term(?t) => (ex n: succeeds size(?t,?n)),
  all tl: succeeds termL(?tl) => (ex n: succeeds sizeL(?tl,?n))],
 [step([x],
   [succeeds atomic(?x)],
   [succeeds size($(?x),s(0)) by sld,
    ex n: succeeds size($(?x),?n)],
   ex n: succeeds size($(?x),?n)),
  step([x,tL],
   [ex n: succeeds sizeL(?tL,?n),
    succeeds atomic(?x),
    succeeds termL(?tL)],
   exist(n,
    succeeds sizeL(?tL,?n),
    [succeeds size([?x|?tL],s(?n)) by sld,
     ex n: succeeds size([?x|?tL],?n)],
    ex n: succeeds size([?x|?tL],?n)),
   ex n: succeeds size([?x|?tL],?n)),
  step([],
   [],
   [succeeds sizeL([],0) by sld,
    ex n: succeeds sizeL([],?n)],
   ex n: succeeds sizeL([],?n)),
  step([t,tL],
   [ex n: succeeds size(?t,?n),
    ex n: succeeds sizeL(?tL,?n),
    succeeds term(?t),
    succeeds termL(?tL)],
   exist(n,
    succeeds size(?t,?n),
    exist(m,
     succeeds sizeL(?tL,?m),
     [succeeds nat(?n) by lemma(size:sizeL:types),
      succeeds nat(?m) by lemma(size:sizeL:types),
      succeeds plus(?n,?m,?n @+ ?m) by existence(@+,2),
      succeeds sizeL([?t|?tL],?n @+ ?m) by sld,
      ex n: succeeds sizeL([?t|?tL],?n)],
     ex n: succeeds sizeL([?t|?tL],?n)),
    ex n: succeeds sizeL([?t|?tL],?n)),
   ex n: succeeds sizeL([?t|?tL],?n))])
).

:- lemma(size:sizeL:uniqueness,
(all [t,n]: succeeds size(?t,?n) =>
   (all m: succeeds size(?t,?m) => ?n = ?m)) &
(all [tl,n]: succeeds sizeL(?tl,?n) =>
   (all m: succeeds sizeL(?tl,?m) => ?n = ?m)),
induction(
 [all [t,n]: succeeds size(?t,?n) => 
    (all m: succeeds size(?t,?m) => ?n = ?m),
  all [tl,n]: succeeds sizeL(?tl,?n) => 
    (all m: succeeds sizeL(?tl,?m) => ?n = ?m)],
 [step([x],
   [],
   assume(succeeds size($(?x),?m),
    [def succeeds size($(?x),?m) by completion,
     s(0) = ?m],
    s(0) = ?m),
   all m: succeeds size($(?x),?m) => s(0) = ?m),
  step([x,tL,n],
   [all m: succeeds sizeL(?tL,?m) => ?n = ?m,
    succeeds sizeL(?tL,?n)],
   assume(succeeds size([?x|?tL],?m),
    [def succeeds size([?x|?tL],?m) by completion,
     exist(m1,
      ?m = s(?m1) & succeeds sizeL(?tL,?m1),
      [?n = ?m1,
       s(?n) = ?m],
      s(?n) = ?m)],
    s(?n) = ?m),
   all m: succeeds size([?x|?tL],?m) => s(?n) = ?m),
  step([],
   [],
   assume(succeeds sizeL([],?m),
    [def succeeds sizeL([],?m) by completion,
     0 = ?m],
    0 = ?m),
   all m: succeeds sizeL([],?m) => 0 = ?m),
  step([t,tL,n3,n1,n2],
   [all m: succeeds size(?t,?m) => ?n1 = ?m,
    all m: succeeds sizeL(?tL,?m) => ?n2 = ?m,
    succeeds size(?t,?n1),
    succeeds sizeL(?tL,?n2),
    succeeds plus(?n1,?n2,?n3)],
   assume(succeeds sizeL([?t|?tL],?m),
    [def succeeds sizeL([?t|?tL],?m) by completion,
     exist([m1,m2],
      succeeds size(?t,?m1) & succeeds sizeL(?tL,?m2) &
      succeeds plus(?m1,?m2,?m),
      [?n1 = ?m1, ?n2 = ?m2,
       succeeds plus(?n1,?n2,?m),
       ?n3 = ?m by lemma(plus:uniqueness)],
      ?n3 = ?m)],
    ?n3 = ?m),
   all m: succeeds sizeL([?t|?tL],?m) => ?n3 = ?m)])
).

:- corollary(size:uniqueness,
all [t,m,n]: succeeds size(?t,?m) & succeeds size(?t,?n) => ?m = ?n,
assume(succeeds size(?t,?m) & succeeds size(?t,?n),
 [all n: succeeds size(?t,?n) => ?m = ?n by 
   lemma(size:sizeL:uniqueness),
  ?m = ?n],
 ?m = ?n)
).

:- definition_fun(size,1,
all [t,n]: succeeds term(?t) =>
  (size(?t) = ?n <=> succeeds size(?t,?n)),
existence by lemma(size:sizeL:existence),
uniqueness by corollary(size:uniqueness)
).

:- corollary(size:type,
all t: succeeds term(?t) => succeeds nat(size(?t)),
assume(succeeds term(?t),
 [succeeds size(?t,size(?t)) by existence(size,1),
  succeeds nat(size(?t)) by lemma(size:sizeL:types)],
 succeeds nat(size(?t)))
).

:- lemma(sizeL:less,
all [tl,n,t]: succeeds sizeL(?tl,?n) & succeeds termL(?tl) &
 succeeds member(?t,?tl) => succeeds size(?t) @=< ?n,
[induction(
  [all [tl,n]: succeeds sizeL(?tl,?n) => 
     (all t: succeeds termL(?tl) & succeeds member(?t,?tl) => 
        succeeds size(?t) @=< ?n)],
  [step([],
    [],
    assume(succeeds termL([]) & succeeds member(?t,[]),
     [def succeeds member(?t,[]) by completion, ff],
     succeeds size(?t) @=< 0),
    all t: succeeds termL([]) & succeeds member(?t,[]) => 
      succeeds size(?t) @=< 0),
   step([t,tL,n3,n1,n2],
    [all t: succeeds termL(?tL) & succeeds member(?t,?tL) => 
       succeeds size(?t) @=< ?n2,
     succeeds size(?t,?n1),
     succeeds sizeL(?tL,?n2),
     succeeds plus(?n1,?n2,?n3)],
    assume(succeeds termL([?t|?tL]) & succeeds member(?t1,[?t|?tL]),
     [def succeeds termL([?t|?tL]) by completion,
      def succeeds member(?t1,[?t|?tL]) by completion,
      succeeds nat(?n1) by lemma(plus:types:1),
      succeeds nat(?n2) by lemma(size:sizeL:types),
      ?n3 = ?n1 @+ ?n2 by uniqueness(@+,2),
      cases(?t1 = ?t,
       [size(?t) = ?n1 by uniqueness(size,1),
	size(?t1) = ?n1,
	succeeds ?n1 @=< ?n1 @+ ?n2 by corollary(leq:plus:first),
	succeeds size(?t1) @=< ?n3],
       succeeds member(?t1,?tL),
       [succeeds size(?t1) @=< ?n2,
	succeeds ?n2 @=< ?n1 @+ ?n2 by corollary(leq:plus:second),
	succeeds size(?t1) @=< ?n1 @+ ?n2 by theorem(leq:transitive),
	succeeds size(?t1) @=< ?n3],
       succeeds size(?t1) @=< ?n3)],
     succeeds size(?t1) @=< ?n3),
    all t1: succeeds termL([?t|?tL]) & succeeds member(?t1,[?t|?tL]) => 
      succeeds size(?t1) @=< ?n3)]),
 assume(succeeds sizeL(?tl,?n) & succeeds termL(?tl) &
  succeeds member(?t,?tl),
  [all t: succeeds termL(?tl) & succeeds member(?t,?tl) => 
     succeeds size(?t) @=< ?n,
   succeeds termL(?tl) & succeeds member(?t,?tl) => 
    succeeds size(?t) @=< ?n,
   succeeds size(?t) @=< ?n],
  succeeds size(?t) @=< ?n)]
).

:- corollary(term:argument:size,
all [x,tl,t]: succeeds term([?x|?tl]) & succeeds member(?t,?tl) =>
  succeeds size(?t) @< size([?x|?tl]),
assume(succeeds term([?x|?tl]) & succeeds member(?t,?tl),
 [succeeds size([?x|?tl],size([?x|?tl])) by existence(size,1),
  def succeeds size([?x|?tl],size([?x|?tl])) by completion,
  def succeeds term([?x|?tl]) by completion,
  exist(n,
   size([?x|?tl]) = s(?n) & succeeds sizeL(?tl,?n),
   [succeeds size(?t) @=< ?n by lemma(sizeL:less),
    succeeds nat(?n) by lemma(size:sizeL:types),
    succeeds ?n @< s(?n) by lemma(less:one),
    succeeds size(?t) @< s(?n) by theorem(leq:less:transitive),
    succeeds size(?t) @< size([?x|?tl])],
   succeeds size(?t) @< size([?x|?tl]))],
 succeeds size(?t) @< size([?x|?tl]))
).

:- lemma(applyL:member,
all [t,tl1,tl2,s]: succeeds applyL(?tl1,?s,?tl2) & succeeds termL(?tl1) &
 succeeds substitution(?s) & succeeds member(?t,?tl1) =>
  succeeds member(?t // ?s,?tl2),
[induction(
  [all [tl1,s,tl2]: succeeds applyL(?tl1,?s,?tl2) => 
     (all t: succeeds termL(?tl1) & succeeds substitution(?s) &
       succeeds member(?t,?tl1) => succeeds member(?t // ?s,?tl2))],
  [step([0],
    [],
    assume(succeeds termL([]) & succeeds substitution(?0) &
     succeeds member(?t,[]),
     [def succeeds member(?t,[]) by completion,ff],
     succeeds member(?t // ?0,[])),
    all t: succeeds termL([]) & succeeds substitution(?0) &
     succeeds member(?t,[]) => succeeds member(?t // ?0,[])),
   step([t1,t1L,s,t2,t2L],
    [all t: succeeds termL(?t1L) & succeeds substitution(?s) &
      succeeds member(?t,?t1L) => succeeds member(?t // ?s,?t2L),
     succeeds apply(?t1,?s,?t2),
     succeeds applyL(?t1L,?s,?t2L)],
    assume(succeeds termL([?t1|?t1L]) & succeeds substitution(?s) &
     succeeds member(?t,[?t1|?t1L]),
     [def succeeds termL([?t1|?t1L]) by completion,
      def succeeds member(?t,[?t1|?t1L]) by completion,
      cases(?t = ?t1,
       [succeeds apply(?t,?s,?t2),
	succeeds term(?t),
	?t2 = ?t // ?s by uniqueness(//,2),
	succeeds member(?t2,[?t2|?t2L]) by sld,
	succeeds member(?t // ?s,[?t2|?t2L])],
       succeeds member(?t,?t1L),
       [succeeds member(?t // ?s,?t2L),
	succeeds member(?t // ?s,[?t2|?t2L]) by sld],
       succeeds member(?t // ?s,[?t2|?t2L]))],
     succeeds member(?t // ?s,[?t2|?t2L])),
    all t: succeeds termL([?t1|?t1L]) & succeeds substitution(?s) &
     succeeds member(?t,[?t1|?t1L]) => succeeds member(?t // ?s,[?t2|?t2L]))]),
 assume(succeeds applyL(?tl1,?s,?tl2) & succeeds termL(?tl1) &
  succeeds substitution(?s) & succeeds member(?t,?tl1),
  [all t: succeeds termL(?tl1) & succeeds substitution(?s) &
    succeeds member(?t,?tl1) => succeeds member(?t // ?s,?tl2),
   succeeds termL(?tl1) & succeeds substitution(?s) &
   succeeds member(?t,?tl1) => succeeds member(?t // ?s,?tl2),
   succeeds member(?t // ?s,?tl2)],
  succeeds member(?t // ?s,?tl2))]
).

:- corollary(term:argument:size:substitution,
all [x,s,tl,t]: succeeds term([?x|?tl]) & succeeds member(?t,?tl) &
  succeeds substitution(?s) =>
  succeeds size(?t // ?s) @< size([?x|?tl] // ?s),
assume(succeeds term([?x|?tl]) & succeeds member(?t,?tl) &
 succeeds substitution(?s),
 [succeeds apply([?x|?tl],?s,[?x|?tl] // ?s) by existence(//,2),
  def succeeds apply([?x|?tl],?s,[?x|?tl] // ?s) by completion,
  exist(t2L,
   [?x|?tl] // ?s = [?x|?t2L] & succeeds applyL(?tl,?s,?t2L),
   [def succeeds term([?x|?tl]) by completion,
    succeeds member(?t // ?s,?t2L) by lemma(applyL:member),
    succeeds term([?x|?tl] // ?s) by corollary(apply:types),
    succeeds term([?x|?t2L]),
    succeeds size(?t // ?s) @< size([?x|?t2L]) by 
     corollary(term:argument:size),
    succeeds size(?t // ?s) @< size([?x|?tl] // ?s)],
   succeeds size(?t // ?s) @< size([?x|?tl] // ?s))],
 succeeds size(?t // ?s) @< size([?x|?tl] // ?s))
).

:- lemma(find:solution,
all [p,s,t1,t2]: succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) & succeeds term(?t1) &
 succeeds find(?p,?t1,?t2) => ?t1 // ?s = ?t2 // ?s,
assume(succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) & succeeds term(?t1) &
 succeeds find(?p,?t1,?t2),
 [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
    ?c = cl(?t2,?q)) \/ fails partition_member(?t1,?p) & ?t1 = ?t2 by 
   lemma(find:characterization:1),
  cases(
   ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
    ?c = cl(?t2,?q),
   exist([c,q],
    succeeds member(?c,?p) & succeeds class_member(?t1,?c) & 
    ?c = cl(?t2,?q),
    [succeeds class_solution(?c,?s) by lemma(partition_solution:member),
     succeeds class_member(?t2,cl(?t2,?q)) by sld,
     succeeds class_member(?t2,?c),
     succeeds class(?c) by lemma(partition:member),
     succeeds unifier(?t1,?t2,?s) by 
      lemma(class_solution:characterization:1),
     succeeds term(?t2) by lemma(find:types),
     ?t1 // ?s = ?t2 // ?s by lemma(unifier:characterization:2)],
    ?t1 // ?s = ?t2 // ?s),
   fails partition_member(?t1,?p) & ?t1 = ?t2,
   [],
   ?t1 // ?s = ?t2 // ?s)],
 ?t1 // ?s = ?t2 // ?s)
).

:- definition_pred(cycle_free_abr,6,
all [tl,p,c,wf1,s,n]: cycle_free_abr(?tl,?p,?c,?wf1,?s,?n) <=>
 succeeds termL(?tl) & succeeds partition(?p) &
 succeeds substitution(?s) & succeeds partition_solution(?p,?s) &
 succeeds termL(?c) & succeeds termL(?wf1) &
 (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n) &
 (all t: succeeds member(?t,?c) => succeeds ?n @=< size(?t // ?s))
).

:- lemma(cycle_freeL:success:termL,
all n: succeeds nat(?n) &
 (all [tl,p,c,wf1,s,m]: succeeds ?m @< ?n &
   cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
    (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2))) =>
  (all [tl,p,c,wf1,s,m]: succeeds termL(?tl) & succeeds ?m @< s(?n) &
    cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
     (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2))),
assume(succeeds nat(?n) &
 (all [tl,p,c,wf1,s,m]: succeeds ?m @< ?n &
   cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
    (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2))),
 [induction(
   [all tl: succeeds termL(?tl) => 
      (all [p,c,wf1,s,m]: succeeds ?m @< s(?n) &
        cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
         (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)))],
   [step([],
     [],
     assume(succeeds ?m @< s(?n) & cycle_free_abr([],?p,?c,?wf1,?s,?m),
      [succeeds cycle_freeL([],?p,?c,?wf1,?wf1) by sld,
       ex wf2: succeeds cycle_freeL([],?p,?c,?wf1,?wf2)],
      ex wf2: succeeds cycle_freeL([],?p,?c,?wf1,?wf2)),
     all [p,c,wf1,s,m]: succeeds ?m @< s(?n) &
      cycle_free_abr([],?p,?c,?wf1,?s,?m) => 
       (ex wf2: succeeds cycle_freeL([],?p,?c,?wf1,?wf2))),
    step([t,tL],
     [all [p,c,wf1,s,m]: succeeds ?m @< s(?n) &
       cycle_free_abr(?tL,?p,?c,?wf1,?s,?m) => 
        (ex wf2: succeeds cycle_freeL(?tL,?p,?c,?wf1,?wf2)),
      succeeds term(?t),
      succeeds termL(?tL)],
     assume(succeeds ?m @< s(?n) & 
      cycle_free_abr([?t|?tL],?p,?c,?wf1,?s,?m),
      [succeeds termL([?t|?tL]) & succeeds partition(?p) &
       succeeds substitution(?s) & succeeds partition_solution(?p,?s) &
       succeeds termL(?c) & succeeds termL(?wf1) &
       (all t1: succeeds member(?t1,[?t|?tL]) => 
          succeeds size(?t1 // ?s) @< ?m) &
       (all t1: succeeds member(?t1,?c) => succeeds ?m @=< size(?t1 // ?s)) by
        elimination(cycle_free_abr,6),
       def succeeds termL([?t|?tL]) by completion,
       ex t2: succeeds find(?p,?t,?t2) by lemma(find:existence),
       exist(t2,
        succeeds find(?p,?t,?t2),
        [succeeds term(?t2) by lemma(find:types),
	 gr(?t2) by corollary(term:gr),
	 succeeds list(?c) by lemma(termL:list),
	 gr(?c) by lemma(term:termL:gr),
	 terminates member_check(?t2,?c) by 
          lemma(member_check:termination),
	 succeeds member_check(?t2,?c) \/ fails member_check(?t2,?c),
	 succeeds member(?t,[?t|?tL]) by sld,
	 succeeds size(?t // ?s) @< ?m,
	 ?t // ?s = ?t2 // ?s by lemma(find:solution),
	 succeeds size(?t2 // ?s) @< ?m,
	 succeeds nat(size(?t2 // ?s)) by lemma(less:types),
	 cases(succeeds member_check(?t2,?c),
	  [succeeds member(?t2,?c) by lemma(member_check:member),
	   succeeds ?m @=< size(?t2 // ?s),
	   succeeds size(?t2 // ?s) @< size(?t2 // ?s) by 
            theorem(less:leq:transitive),
	   succeeds term(?t2 // ?s) by 
            corollary(apply:substitution:types),
	   succeeds nat(size(?t2 // ?s)) by lemma(less:types),
	   ~ succeeds size(?t2 // ?s) @< size(?t2 // ?s) by 
            theorem(less:strictness),
	   ff],
	  fails member_check(?t2,?c),
	  [succeeds list(?wf1) by lemma(termL:list),
	   gr(?wf1) by lemma(term:termL:gr),
	   terminates member_check(?t2,?wf1) by 
            lemma(member_check:termination),
	   succeeds member_check(?t2,?wf1) \/ fails member_check(?t2,?wf1),
	   cases(succeeds member_check(?t2,?wf1),
	    [assume(succeeds member(?0,?tL),
	      [],
	      succeeds size(?0 // ?s) @< ?m),
	     all 0: succeeds member(?0,?tL) => 
	       succeeds size(?0 // ?s) @< ?m,
	     cycle_free_abr(?tL,?p,?c,?wf1,?s,?m) by 
	      introduction(cycle_free_abr,6),
	     ex wf2: succeeds cycle_freeL(?tL,?p,?c,?wf1,?wf2),
	     exist(wf2,
              succeeds cycle_freeL(?tL,?p,?c,?wf1,?wf2),
              [succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2) by sld,
	       ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)],
              ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
	    fails member_check(?t2,?wf1),
	    [def succeeds term(?t2) by completion,
	     cases(ex x: ?t2 = $(?x) & succeeds atomic(?x),
              exist(x,
               ?t2 = $(?x) & succeeds atomic(?x),
               [succeeds var_form($(?x)) by sld,
		succeeds var_form(?t2),
		assume(succeeds member(?0,?tL),
		 [],
		 succeeds size(?0 // ?s) @< ?m),
		all 0: succeeds member(?0,?tL) => 
		  succeeds size(?0 // ?s) @< ?m,
		cycle_free_abr(?tL,?p,?c,[?t2|?wf1],?s,?m) by 
		 introduction(cycle_free_abr,6),
		ex wf2: succeeds cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2),
		exist(wf2,
                 succeeds cycle_freeL(?tL,?p,?c,[?t2|?wf1],?wf2),
                 [succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2) by sld,
		  ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)],
                 ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
               ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)),
              ex [x,tL]: ?t2 = [?x|?tL] & succeeds atomic(?x) &
               succeeds termL(?tL),
              exist([x,tl2],
               ?t2 = [?x|?tl2] & succeeds atomic(?x) & succeeds termL(?tl2),
               [fails var_form([?x|?tl2]),
		fails var_form(?t2),
		succeeds ?m @< s(?n),
		succeeds size(?t2 // ?s) @< ?n by 
                 lemma(less:transitive:successor),
		assume(succeeds member(?0,?tl2),
		 [succeeds size(?0 // ?s) @< size([?x|?tl2] // ?s) by 
                   corollary(term:argument:size:substitution),
		  succeeds size(?0 // ?s) @< size(?t2 // ?s)],
		 succeeds size(?0 // ?s) @< size(?t2 // ?s)),
		all 0: succeeds member(?0,?tl2) => 
		  succeeds size(?0 // ?s) @< size(?t2 // ?s),
		assume(succeeds member(?0,[?t2|?c]),
		 [def succeeds member(?0,[?t2|?c]) by completion,
                  cases(?0 = ?t2,
                   [succeeds size(?t2 // ?s) @=< size(?t2 // ?s) by 
                     theorem(leq:reflexive),
		    succeeds size(?t2 // ?s) @=< size(?0 // ?s)],
                   succeeds member(?0,?c),
                   [succeeds ?m @=< size(?0 // ?s),
		    succeeds size(?t2 // ?s) @< size(?0 // ?s) by 
                     theorem(less:leq:transitive),
		    succeeds size(?t2 // ?s) @=< size(?0 // ?s) by 
                     lemma(less:leq)],
                   succeeds size(?t2 // ?s) @=< size(?0 // ?s))],
		 succeeds size(?t2 // ?s) @=< size(?0 // ?s)),
		all 0: succeeds member(?0,[?t2|?c]) => 
		  succeeds size(?t2 // ?s) @=< size(?0 // ?s),
		cycle_free_abr(?tl2,?p,[?t2|?c],?wf1,?s,size(?t2 // ?s)) by
		 introduction(cycle_free_abr,6),
		ex wf2: succeeds cycle_freeL(?tl2,?p,[?t2|?c],?wf1,?wf2),
		exist(wf2,
                 succeeds cycle_freeL(?tl2,?p,[?t2|?c],?wf1,?wf2),
                 [succeeds termL(?wf2) by lemma(cycle_free:types),
		  assume(succeeds member(?0,?tL),
		   [],
		   succeeds size(?0 // ?s) @< ?m),
		  all 0: succeeds member(?0,?tL) => 
		    succeeds size(?0 // ?s) @< ?m,
		  cycle_free_abr(?tL,?p,?c,[?t2|?wf2],?s,?m) by 
		   introduction(cycle_free_abr,6),
		  ex wf3: succeeds cycle_freeL(?tL,?p,?c,[?t2|?wf2],?wf3),
		  exist(wf3,
                   succeeds cycle_freeL(?tL,?p,?c,[?t2|?wf2],?wf3),
                   [succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf3) by sld,
		    ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)],
                   ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
                 ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
               ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)),
              ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
	    ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
	  ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
        ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2))],
      ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)),
     all [p,c,wf1,s,m]: succeeds ?m @< s(?n) &
      cycle_free_abr([?t|?tL],?p,?c,?wf1,?s,?m) => 
       (ex wf2: succeeds cycle_freeL([?t|?tL],?p,?c,?wf1,?wf2)))]),
  assume(succeeds termL(?tl) & succeeds ?m @< s(?n) &
   cycle_free_abr(?tl,?p,?c,?wf1,?s,?m),
   [all [p,c,wf1,s,m]: succeeds ?m @< s(?n) &
     cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
      (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
    succeeds ?m @< s(?n) & cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
     (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
    ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)],
   ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2))],
 all [tl,p,c,wf1,s,m]: succeeds termL(?tl) & succeeds ?m @< s(?n) &
  cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
   (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)))
).

:- lemma(cycle_freeL:success,
all n: succeeds nat(?n) => (all [tl,p,c,wf1,s,m]: succeeds ?m @< ?n &
  cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) =>
   (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2))),
induction(
 [all n: succeeds nat(?n) => 
    (all [tl,p,c,wf1,s,m]: succeeds ?m @< ?n &
      cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
       (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)))],
 [step([],
   [],
   assume(succeeds ?m @< 0 & cycle_free_abr(?tl,?p,?c,?wf1,?s,?m),
    [def succeeds ?m @< 0 by completion,ff],
    ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
   all [tl,p,c,wf1,s,m]: succeeds ?m @< 0 &
    cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
     (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2))),
  step([n],
   [all [tl,p,c,wf1,s,m]: succeeds ?m @< ?n &
     cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
      (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
    succeeds nat(?n)],
   assume(succeeds ?m @< s(?n) & cycle_free_abr(?tl,?p,?c,?wf1,?s,?m),
    [all [tl,p,c,wf1,s,m]: succeeds termL(?tl) & succeeds ?m @< s(?n) &
      cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
       (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)) by 
      lemma(cycle_freeL:success:termL),
     succeeds termL(?tl) & succeeds partition(?p) &
     succeeds substitution(?s) & succeeds partition_solution(?p,?s) &
     succeeds termL(?c) & succeeds termL(?wf1) &
     (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?m) &
     (all t: succeeds member(?t,?c) => succeeds ?m @=< size(?t // ?s)) by
      elimination(cycle_free_abr,6),
     succeeds termL(?tl),
     ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)],
    ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)),
   all [tl,p,c,wf1,s,m]: succeeds ?m @< s(?n) &
    cycle_free_abr(?tl,?p,?c,?wf1,?s,?m) => 
     (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)))])
).

:- lemma(termL:size:bound,
all [tl,s]: succeeds termL(?tl) & succeeds substitution(?s) =>
  (ex n: succeeds nat(?n) &
    (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n)),
[induction(
  [all tl: succeeds termL(?tl) => succeeds substitution(?s) => 
      (ex n: succeeds nat(?n) &
        (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n))],
  [step([],
    [],
    assume(succeeds substitution(?s),
     [succeeds nat(0) by sld,
      assume(succeeds member(?t,[]),
       [def succeeds member(?t,[]) by completion,ff],
       succeeds size(?t // ?s) @< 0),
      all t: succeeds member(?t,[]) => succeeds size(?t // ?s) @< 0,
      ex n: succeeds nat(?n) &
       (all t: succeeds member(?t,[]) => succeeds size(?t // ?s) @< ?n)],
     ex n: succeeds nat(?n) &
      (all t: succeeds member(?t,[]) => succeeds size(?t // ?s) @< ?n)),
    succeeds substitution(?s) => 
     (ex n: succeeds nat(?n) &
       (all t: succeeds member(?t,[]) => succeeds size(?t // ?s) @< ?n))),
   step([t,tL],
    [succeeds substitution(?s) => 
      (ex n: succeeds nat(?n) &
        (all t: succeeds member(?t,?tL) => succeeds size(?t // ?s) @< ?n)),
     succeeds term(?t),
     succeeds termL(?tL)],
    assume(succeeds substitution(?s),
     [ex n: succeeds nat(?n) &
        (all t: succeeds member(?t,?tL) => succeeds size(?t // ?s) @< ?n),
      exist(n,
       succeeds nat(?n) &
       (all t: succeeds member(?t,?tL) => succeeds size(?t // ?s) @< ?n),
       [succeeds term(?t // ?s) by corollary(apply:substitution:types),
	succeeds nat(size(?t // ?s)) by corollary(size:type),
	succeeds size(?t // ?s) @< ?n \/ succeeds ?n @=< size(?t // ?s) by 
         corollary(less:leq:total),
	cases(succeeds size(?t // ?s) @< ?n,
         [assume(succeeds member(?t1,[?t|?tL]),
           [def succeeds member(?t1,[?t|?tL]) by completion,
            cases(?t1 = ?t,
             [],
             succeeds member(?t1,?tL),
             [],
             succeeds size(?t1 // ?s) @< ?n)],
           succeeds size(?t1 // ?s) @< ?n),
	  all t1: succeeds member(?t1,[?t|?tL]) => 
	      succeeds size(?t1 // ?s) @< ?n,
	  ex n: succeeds nat(?n) &
	   (all t1: succeeds member(?t1,[?t|?tL]) => 
	      succeeds size(?t1 // ?s) @< ?n)],
         succeeds ?n @=< size(?t // ?s),
         [succeeds nat(s(size(?t // ?s))) by sld,
	  assume(succeeds member(?t1,[?t|?tL]),
           [def succeeds member(?t1,[?t|?tL]) by completion,
            succeeds size(?t // ?s) @< s(size(?t // ?s)) by 
	     lemma(less:one),
	    cases(?t1 = ?t,
             [succeeds size(?t1 // ?s) @< s(size(?t // ?s))],
             succeeds member(?t1,?tL),
             [succeeds size(?t1 // ?s) @< ?n,
	      succeeds ?n @< s(size(?t // ?s)) by 
               theorem(leq:less:transitive),
	      succeeds size(?t1 // ?s) @< s(size(?t // ?s)) by 
               theorem(less:transitive)],
             succeeds size(?t1 // ?s) @< s(size(?t // ?s)))],
           succeeds size(?t1 // ?s) @< s(size(?t // ?s))),
	  all t1: succeeds member(?t1,[?t|?tL]) => 
	    succeeds size(?t1 // ?s) @< s(size(?t // ?s)),
	  ex n: succeeds nat(?n) &
	   (all t1: succeeds member(?t1,[?t|?tL]) => 
	      succeeds size(?t1 // ?s) @< ?n)],
         ex n: succeeds nat(?n) &
          (all t1: succeeds member(?t1,[?t|?tL]) => 
             succeeds size(?t1 // ?s) @< ?n))],
       ex n: succeeds nat(?n) &
        (all t1: succeeds member(?t1,[?t|?tL]) => 
           succeeds size(?t1 // ?s) @< ?n))],
     ex n: succeeds nat(?n) &
      (all t1: succeeds member(?t1,[?t|?tL]) =>
	 succeeds size(?t1 // ?s) @< ?n)),
    succeeds substitution(?s) => 
     (ex n: succeeds nat(?n) &
       (all t1: succeeds member(?t1,[?t|?tL]) => 
          succeeds size(?t1 // ?s) @< ?n)))]),
 assume(succeeds termL(?tl) & succeeds substitution(?s),
  [succeeds substitution(?s) => 
    (ex n: succeeds nat(?n) &
      (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n)),
   ex n: succeeds nat(?n) &
    (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n)],
  ex n: succeeds nat(?n) &
   (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n))]
).

:- lemma(cycle_free_abr:existence,
all [tl,p,s]: succeeds termL(?tl) & succeeds partition(?p) &
 succeeds partition_solution(?p,?s) & succeeds substitution(?s) =>
  (ex m: succeeds nat(?m) & cycle_free_abr(?tl,?p,[],[],?s,?m)),
assume(succeeds termL(?tl) & succeeds partition(?p) &
 succeeds partition_solution(?p,?s) & succeeds substitution(?s),
 [ex n: succeeds nat(?n) &
   (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n) by 
   lemma(termL:size:bound),
  exist(n,
   succeeds nat(?n) &
   (all t: succeeds member(?t,?tl) => succeeds size(?t // ?s) @< ?n),
   [assume(succeeds member(?t,[]),
     [def succeeds member(?t,[]) by completion,ff],
     succeeds ?n @=< size(?t // ?s)),
    cycle_free_abr(?tl,?p,[],[],?s,?n) by introduction(cycle_free_abr,6),
    ex m: succeeds nat(?m) & cycle_free_abr(?tl,?p,[],[],?s,?m)],
   ex m: succeeds nat(?m) & cycle_free_abr(?tl,?p,[],[],?s,?m))],
 ex m: succeeds nat(?m) & cycle_free_abr(?tl,?p,[],[],?s,?m))
).

:- theorem(cycle_free:success,
all [p,s]: succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) =>
  succeeds cycle_free(?p),
assume(succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s),
 [succeeds roots(?p,roots(?p)) by existence(roots,1),
  succeeds termL(roots(?p)) by lemma(roots:types),
  ex m: succeeds nat(?m) & cycle_free_abr(roots(?p),?p,[],[],?s,?m) by 
   lemma(cycle_free_abr:existence),
  exist(m,
   succeeds nat(?m) & cycle_free_abr(roots(?p),?p,[],[],?s,?m),
   [succeeds ?m @< s(?m) by lemma(less:one),
    all [tl,p,c,wf1,s,n]: succeeds ?n @< s(?m) &
     cycle_free_abr(?tl,?p,?c,?wf1,?s,?n) => 
      (ex wf2: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2)) by 
     lemma(cycle_freeL:success),
    ex wf: succeeds cycle_freeL(roots(?p),?p,[],[],?wf),
    exist(wf,
     succeeds cycle_freeL(roots(?p),?p,[],[],?wf),
     [succeeds cycle_free(?p) by sld],
     succeeds cycle_free(?p))],
   succeeds cycle_free(?p))],
 succeeds cycle_free(?p))
).

:- theorem(unify_terms_part:success,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s) =>
  (ex p: succeeds unify_terms_part(?t1,?t2,?p) &
    succeeds partition_solution(?p,?s)),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds substitution(?s) &
 succeeds unifier(?t1,?t2,?s),
 [succeeds partition_solution([],?s) by sld,
  ex p: succeeds union_find(?t1,?t2,[],?p) &
   succeeds partition_solution(?p,?s) by theorem(union_find:solution),
  exist(p,
   succeeds union_find(?t1,?t2,[],?p) & succeeds partition_solution(?p,?s),
   [succeeds partition([]) by sld,
    succeeds partition(?p) by corollary(union_find:types),
    succeeds cycle_free(?p) by theorem(cycle_free:success),
    succeeds unify_terms_part(?t1,?t2,?p) by sld,
    ex p: succeeds unify_terms_part(?t1,?t2,?p) &
     succeeds partition_solution(?p,?s)],
   ex p: succeeds unify_terms_part(?t1,?t2,?p) &
    succeeds partition_solution(?p,?s))],
 ex p: succeeds unify_terms_part(?t1,?t2,?p) &
  succeeds partition_solution(?p,?s))
).

%-----------------------------------------------------------------------
% part8
%-----------------------------------------------------------------------

:- lemma(partition_term:partition_termL:types,
(all [t1,p,t2]: succeeds partition_term(?t1,?p,?t2) =>
   (succeeds term(?t1) & succeeds partition(?p) =>
     succeeds term(?t2))) &
(all [tl1,p,tl2]: succeeds partition_termL(?tl1,?p,?tl2) =>
   (succeeds termL(?tl1) & succeeds partition(?p) =>
     succeeds termL(?tl2))),
induction(
 [all [t1,p,t2]: succeeds partition_term(?t1,?p,?t2) => succeeds term(?t1) &
    succeeds partition(?p) => succeeds term(?t2),
  all [tl1,p,tl2]: succeeds partition_termL(?tl1,?p,?tl2) => 
    succeeds termL(?tl1) & succeeds partition(?p) => succeeds termL(?tl2)],
 [step([t1,p,t3,t2,tag,t1L,t2L],
   [succeeds find(?p,?t1,?t2),
    succeeds var_form(?t2),
    ?t3 = ?t2],
   assume(succeeds term(?t1) & succeeds partition(?p),
    [succeeds term(?t2) by lemma(find:types),
     succeeds term(?t3)],
    succeeds term(?t3)),
   succeeds term(?t1) & succeeds partition(?p) => succeeds term(?t3)),
  step([t1,p,t3,t2,tag,t1L,t2L],
   [succeeds termL(?t1L) & succeeds partition(?p) => succeeds termL(?t2L),
    succeeds find(?p,?t1,?t2),
    fails var_form(?t2),
    ?t2 = [?tag|?t1L],
    succeeds partition_termL(?t1L,?p,?t2L),
    ?t3 = [?tag|?t2L]],
   assume(succeeds term(?t1) & succeeds partition(?p),
    [succeeds term(?t2) by lemma(find:types),
     def succeeds term([?tag|?t1L]) by completion,
     succeeds termL(?t2L),
     succeeds term([?tag|?t2L]) by sld,
     succeeds term(?t3)],
    succeeds term(?t3)),
   succeeds term(?t1) & succeeds partition(?p) => succeeds term(?t3)),
  step([0],
   [],
   [],
   succeeds termL([]) & succeeds partition(?0) => succeeds termL([])),
  step([t1,t1L,p,t2,t2L],
   [succeeds term(?t1) & succeeds partition(?p) => succeeds term(?t2),
    succeeds termL(?t1L) & succeeds partition(?p) => succeeds termL(?t2L),
    succeeds partition_term(?t1,?p,?t2),
    succeeds partition_termL(?t1L,?p,?t2L)],
   assume(succeeds termL([?t1|?t1L]) & succeeds partition(?p),
    [def succeeds termL([?t1|?t1L]) by completion,
     succeeds termL([?t2|?t2L])],
    succeeds termL([?t2|?t2L])),
   succeeds termL([?t1|?t1L]) & succeeds partition(?p) => 
    succeeds termL([?t2|?t2L]))])
).

:- corollary(partition_term:types,
all [t1,p,t2]: succeeds partition_term(?t1,?p,?t2) &
 succeeds term(?t1) & succeeds partition(?p) =>
  succeeds term(?t2),
assume(succeeds partition_term(?t1,?p,?t2) & succeeds term(?t1) &
 succeeds partition(?p),
 [succeeds term(?t1) & succeeds partition(?p) => succeeds term(?t2) by 
   lemma(partition_term:partition_termL:types),
  succeeds term(?t2)],
 succeeds term(?t2))
).

:- lemma(domain:cons,
all [s,t,x,y]: succeeds domain(?y,[bind(?x,?t)|?s]) =>
  ?y = ?x \/ succeeds domain(?y,?s),
assume(succeeds domain(?y,[bind(?x,?t)|?s]),
 [def succeeds domain(?y,[bind(?x,?t)|?s]) by completion,
  exist(t1,
   succeeds member(bind(?y,?t1),[bind(?x,?t)|?s]),
   [def succeeds member(bind(?y,?t1),[bind(?x,?t)|?s]) by completion,
    cases(?y = ?x & ?t1 = ?t,
     [],
     succeeds member(bind(?y,?t1),?s),
     [],
     ?y = ?x \/ succeeds domain(?y,?s))],
   ?y = ?x \/ succeeds domain(?y,?s))],
 ?y = ?x \/ succeeds domain(?y,?s))
).

:- lemma(class_sub:partition_sub:domain,
(all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) =>
   (all x: succeeds domain(?x,?s2) =>
      succeeds domain(?x,?s1) \/ succeeds class_member($(?x),?c))) &
(all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) =>
   (all x: succeeds domain(?x,?s2) =>
      succeeds domain(?x,?s1) \/ succeeds partition_member($(?x),?p1))),
induction(
 [all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) => 
    (all x: succeeds domain(?x,?s2) => succeeds domain(?x,?s1) \/
       succeeds class_member($(?x),?c)),
  all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) => 
    (all x: succeeds domain(?x,?s2) => succeeds domain(?x,?s1) \/
       succeeds partition_member($(?x),?p1))],
 [step([x,p1,p2,s1,s2,t],
   [all y: succeeds domain(?y,?s2) => succeeds domain(?y,[bind(?x,?t)|?s1]) \/
      succeeds partition_member($(?y),?p1),
    succeeds partition_term($(?x),?p2,?t),
    succeeds partition_sub(?p1,?p2,[bind(?x,?t)|?s1],?s2)],
   assume(succeeds domain(?y,?s2),
    [succeeds domain(?y,[bind(?x,?t)|?s1]) \/
     succeeds partition_member($(?y),?p1),
     cases(succeeds domain(?y,[bind(?x,?t)|?s1]),
      [?y = ?x \/ succeeds domain(?y,?s1) by lemma(domain:cons),
       cases(?y = ?x,
        [],
        succeeds domain(?y,?s1),
        [],
        succeeds domain(?y,?s1) \/
        succeeds class_member($(?y),cl($(?x),?p1)))],
      succeeds partition_member($(?y),?p1),
      [],
      succeeds domain(?y,?s1) \/ succeeds class_member($(?y),cl($(?x),?p1)))],
    succeeds domain(?y,?s1) \/ succeeds class_member($(?y),cl($(?x),?p1))),
   all y: succeeds domain(?y,?s2) => succeeds domain(?y,?s1) \/
     succeeds class_member($(?y),cl($(?x),?p1))),
  step([0,1,p1,p2,s1,s2],
   [all x: succeeds domain(?x,?s2) => succeeds domain(?x,?s1) \/
      succeeds partition_member($(?x),?p1),
    succeeds partition_sub(?p1,?p2,?s1,?s2)],
   assume(succeeds domain(?x,?s2),
    [succeeds domain(?x,?s1) \/
     succeeds partition_member($(?x),?p1),
     cases(succeeds domain(?x,?s1),
      [],
      succeeds partition_member($(?x),?p1),
      [],
      succeeds domain(?x,?s1) \/
      succeeds class_member($(?x),cl([?0|?1],?p1)))],
    succeeds domain(?x,?s1) \/ succeeds class_member($(?x),cl([?0|?1],?p1))),
   all x: succeeds domain(?x,?s2) => succeeds domain(?x,?s1) \/
     succeeds class_member($(?x),cl([?0|?1],?p1))),
  step([0,s],
   [],
   assume(succeeds domain(?x,?s),
    [],
    succeeds domain(?x,?s) \/ succeeds partition_member($(?x),[])),
   all x: succeeds domain(?x,?s) => succeeds domain(?x,?s) \/
     succeeds partition_member($(?x),[])),
  step([c,p1,p2,s1,s3,s2],
   [all x: succeeds domain(?x,?s2) => succeeds domain(?x,?s1) \/
      succeeds class_member($(?x),?c),
    all x: succeeds domain(?x,?s3) => succeeds domain(?x,?s2) \/
      succeeds partition_member($(?x),?p1),
    succeeds class_sub(?c,?p2,?s1,?s2),
    succeeds partition_sub(?p1,?p2,?s2,?s3)],
   assume(succeeds domain(?x,?s3),
    [succeeds domain(?x,?s2) \/
     succeeds partition_member($(?x),?p1),
     cases(succeeds domain(?x,?s2),
      [succeeds domain(?x,?s1) \/
       succeeds class_member($(?x),?c),
       cases(succeeds domain(?x,?s1),
        [],
        succeeds class_member($(?x),?c),
        [],
        succeeds domain(?x,?s1) \/ 
        succeeds partition_member($(?x),[?c|?p1]))],
      succeeds partition_member($(?x),?p1),
      [],
      succeeds domain(?x,?s1) \/ succeeds partition_member($(?x),[?c|?p1]))],
    succeeds domain(?x,?s1) \/ succeeds partition_member($(?x),[?c|?p1])),
   all x: succeeds domain(?x,?s3) => succeeds domain(?x,?s1) \/
     succeeds partition_member($(?x),[?c|?p1]))])
).

:- corollary(class_sub:domain,
all [c,p,s1,s2,x]: succeeds class_sub(?c,?p,?s1,?s2) &
 succeeds domain(?x,?s2) =>
  succeeds domain(?x,?s1) \/ succeeds class_member($(?x),?c),
assume(succeeds class_sub(?c,?p,?s1,?s2) & succeeds domain(?x,?s2),
 [all x: succeeds domain(?x,?s2) => succeeds domain(?x,?s1) \/
    succeeds class_member($(?x),?c) by 
   lemma(class_sub:partition_sub:domain),
  succeeds domain(?x,?s1) \/ succeeds class_member($(?x),?c)],
 succeeds domain(?x,?s1) \/ succeeds class_member($(?x),?c))
).

:- definition_pred(domain_disjoint_partition,2,
all [s,p]: domain_disjoint_partition(?s,?p) <=>
 (all x: succeeds domain(?x,?s) => fails partition_member($(?x),?p))
).

:- definition_pred(domain_disjoint_class,2,
all [s,c]: domain_disjoint_class(?s,?c) <=>
 (all x: succeeds domain(?x,?s) => fails class_member($(?x),?c))
).

:- lemma(domain_disjoint_class:bind,
all [p,s,x,t]: succeeds class(cl($(?x),?p)) & succeeds substitution(?s) &
 domain_disjoint_class(?s,cl($(?x),?p)) & succeeds term(?t) =>
  succeeds substitution([bind(?x,?t)|?s]) &
  domain_disjoint_partition([bind(?x,?t)|?s],?p),
assume(succeeds class(cl($(?x),?p)) & succeeds substitution(?s) &
 domain_disjoint_class(?s,cl($(?x),?p)) & succeeds term(?t),
 [def succeeds class(cl($(?x),?p)) by completion,
  def succeeds term($(?x)) by completion,
  terminates domain(?x,?s) by lemma(domain:termination),
  succeeds domain(?x,?s) \/ fails domain(?x,?s),
  cases(succeeds domain(?x,?s),
   [all 0: succeeds domain(?0,?s) => 
      fails class_member($(?0),cl($(?x),?p)) by 
      elimination(domain_disjoint_class,2),
    fails class_member($(?x),cl($(?x),?p)),
    succeeds class_member($(?x),cl($(?x),?p)) by sld,
    ff],
   fails domain(?x,?s),
   [],
   fails domain(?x,?s)),
  succeeds substitution([bind(?x,?t)|?s]) by sld,
  assume(succeeds domain(?y,[bind(?x,?t)|?s]),
   [?y = ?x \/ succeeds domain(?y,?s) by lemma(domain:cons),
    cases(?y = ?x,
     [],
     succeeds domain(?y,?s),
     [all 0: succeeds domain(?0,?s) => 
	fails class_member($(?0),cl($(?x),?p)) by 
	elimination(domain_disjoint_class,2),
      fails class_member($(?y),cl($(?x),?p)),
      def fails class_member($(?y),cl($(?x),?p)) by completion,
      fails partition_member($(?y),?p)],
     fails partition_member($(?y),?p))],
   fails partition_member($(?y),?p)),
  domain_disjoint_partition([bind(?x,?t)|?s],?p) by 
   introduction(domain_disjoint_partition,2)],
 succeeds substitution([bind(?x,?t)|?s]) &
 domain_disjoint_partition([bind(?x,?t)|?s],?p))
).

:- lemma(domain_disjoint_class:partition,
all [c,p,s]: domain_disjoint_class(?s,cl(?c,?p)) =>
  domain_disjoint_partition(?s,?p),
assume(domain_disjoint_class(?s,cl(?c,?p)),
 [assume(succeeds domain(?x,?s),
   [all x: succeeds domain(?x,?s) => fails class_member($(?x),cl(?c,?p)) by
     elimination(domain_disjoint_class,2),
    fails class_member($(?x),cl(?c,?p)),
    def fails class_member($(?x),cl(?c,?p)) by completion,
    fails partition_member($(?x),?p)],
   fails partition_member($(?x),?p)),
  domain_disjoint_partition(?s,?p) by 
   introduction(domain_disjoint_partition,2)],
 domain_disjoint_partition(?s,?p))
).

:- lemma(domain_disjoint_partition:class,
all [c,p,s]: domain_disjoint_partition(?s,[?c|?p]) =>
  domain_disjoint_class(?s,?c),
assume(domain_disjoint_partition(?s,[?c|?p]),
 [assume(succeeds domain(?x,?s),
   [all x: succeeds domain(?x,?s) => fails partition_member($(?x),[?c|?p]) by
     elimination(domain_disjoint_partition,2),
    fails partition_member($(?x),[?c|?p]),
    def fails partition_member($(?x),[?c|?p]) by completion,
    fails class_member($(?x),?c)],
   fails class_member($(?x),?c)),
  domain_disjoint_class(?s,?c) by introduction(domain_disjoint_class,2)],
 domain_disjoint_class(?s,?c))
).

:- lemma(domain_disjoint_partition:class_sub,
all [c,p1,p2,s1,s2]: succeeds partition([?c|?p1]) &
 domain_disjoint_partition(?s1,[?c|?p1]) &
 succeeds class_sub(?c,?p2,?s1,?s2) =>
  domain_disjoint_partition(?s2,?p1),
assume(succeeds partition([?c|?p1]) &
 domain_disjoint_partition(?s1,[?c|?p1]) &
 succeeds class_sub(?c,?p2,?s1,?s2),
 [assume(succeeds domain(?x,?s2),
   [succeeds domain(?x,?s1) \/ succeeds class_member($(?x),?c) by 
     corollary(class_sub:domain),
    cases(succeeds domain(?x,?s1),
     [all x: succeeds domain(?x,?s1) => 
        fails partition_member($(?x),[?c|?p1]) by 
       elimination(domain_disjoint_partition,2),
      fails partition_member($(?x),[?c|?p1]),
      def fails partition_member($(?x),[?c|?p1]) by completion,
      fails partition_member($(?x),?p1)],
     succeeds class_member($(?x),?c),
     [def succeeds partition([?c|?p1]) by completion,
      fails partition_member($(?x),?p1) by lemma(disjoint:class_member)],
     fails partition_member($(?x),?p1))],
   fails partition_member($(?x),?p1)),
  domain_disjoint_partition(?s2,?p1) by 
   introduction(domain_disjoint_partition,2)],
 domain_disjoint_partition(?s2,?p1))
).

:- lemma(class_sub:partition_sub:types,
(all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) =>
   (succeeds class(?c) & succeeds partition(?p) &
    succeeds substitution(?s1) & domain_disjoint_class(?s1,?c) =>
     succeeds substitution(?s2))) &
(all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) =>
   (succeeds partition(?p1) & succeeds partition(?p2) &
    succeeds substitution(?s1) & domain_disjoint_partition(?s1,?p1) =>
     succeeds substitution(?s2))),
induction(
 [all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) => succeeds class(?c) &
    succeeds partition(?p) & succeeds substitution(?s1) &
    domain_disjoint_class(?s1,?c) => succeeds substitution(?s2),
  all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) => 
    succeeds partition(?p1) & succeeds partition(?p2) &
    succeeds substitution(?s1) & domain_disjoint_partition(?s1,?p1) => 
     succeeds substitution(?s2)],
 [step([x,p1,p2,s1,s2,t],
   [succeeds partition(?p1) & succeeds partition(?p2) &
    succeeds substitution([bind(?x,?t)|?s1]) &
    domain_disjoint_partition([bind(?x,?t)|?s1],?p1) => 
     succeeds substitution(?s2),
    succeeds partition_term($(?x),?p2,?t),
    succeeds partition_sub(?p1,?p2,[bind(?x,?t)|?s1],?s2)],
   assume(succeeds class(cl($(?x),?p1)) & succeeds partition(?p2) &
    succeeds substitution(?s1) & domain_disjoint_class(?s1,cl($(?x),?p1)),
    [def succeeds class(cl($(?x),?p1)) by completion,
     def succeeds term($(?x)) by completion,
     succeeds term(?t) by corollary(partition_term:types),
     succeeds substitution([bind(?x,?t)|?s1]) &
     domain_disjoint_partition([bind(?x,?t)|?s1],?p1) by 
      lemma(domain_disjoint_class:bind),
     succeeds substitution(?s2)],
    succeeds substitution(?s2)),
   succeeds class(cl($(?x),?p1)) & succeeds partition(?p2) &
   succeeds substitution(?s1) & domain_disjoint_class(?s1,cl($(?x),?p1)) =>
    succeeds substitution(?s2)),
  step([0,1,p1,p2,s1,s2],
   [succeeds partition(?p1) & succeeds partition(?p2) &
    succeeds substitution(?s1) & domain_disjoint_partition(?s1,?p1) => 
     succeeds substitution(?s2),
    succeeds partition_sub(?p1,?p2,?s1,?s2)],
   assume(succeeds class(cl([?0|?1],?p1)) & succeeds partition(?p2) &
    succeeds substitution(?s1) & domain_disjoint_class(?s1,cl([?0|?1],?p1)),
    [def succeeds class(cl([?0|?1],?p1)) by completion,
     domain_disjoint_partition(?s1,?p1) by 
      lemma(domain_disjoint_class:partition),
     succeeds substitution(?s2)],
    succeeds substitution(?s2)),
   succeeds class(cl([?0|?1],?p1)) & succeeds partition(?p2) &
   succeeds substitution(?s1) & domain_disjoint_class(?s1,cl([?0|?1],?p1)) =>
    succeeds substitution(?s2)),
  step([0,s],
   [],
   assume(succeeds partition([]) & succeeds partition(?0) &
    succeeds substitution(?s) & domain_disjoint_partition(?s,[]),
    [],
    succeeds substitution(?s)),
   succeeds partition([]) & succeeds partition(?0) &
   succeeds substitution(?s) & domain_disjoint_partition(?s,[]) => 
    succeeds substitution(?s)),
  step([c,p1,p2,s1,s3,s2],
   [succeeds class(?c) & succeeds partition(?p2) &
    succeeds substitution(?s1) & domain_disjoint_class(?s1,?c) => 
     succeeds substitution(?s2),
    succeeds partition(?p1) & succeeds partition(?p2) &
    succeeds substitution(?s2) & domain_disjoint_partition(?s2,?p1) => 
     succeeds substitution(?s3),
    succeeds class_sub(?c,?p2,?s1,?s2),
    succeeds partition_sub(?p1,?p2,?s2,?s3)],
   assume(succeeds partition([?c|?p1]) & succeeds partition(?p2) &
    succeeds substitution(?s1) & domain_disjoint_partition(?s1,[?c|?p1]),
    [def succeeds partition([?c|?p1]) by completion,
     domain_disjoint_class(?s1,?c) by 
      lemma(domain_disjoint_partition:class),
     succeeds substitution(?s2),
     domain_disjoint_partition(?s2,?p1) by 
      lemma(domain_disjoint_partition:class_sub),
     succeeds substitution(?s3)],
    succeeds substitution(?s3)),
   succeeds partition([?c|?p1]) & succeeds partition(?p2) &
   succeeds substitution(?s1) & domain_disjoint_partition(?s1,[?c|?p1]) => 
    succeeds substitution(?s3))])
).

:- lemma(domain_disjoint_partition:nil,
all p: domain_disjoint_partition([],?p),
[assume(succeeds domain(?x,[]),
  [def succeeds domain(?x,[]) by completion,
   exist(t,
    succeeds member(bind(?x,?t),[]),
    [def succeeds member(bind(?x,?t),[]) by completion,ff],
    ff)],
  fails partition_member($(?x),?p)),
 domain_disjoint_partition([],?p) by 
  introduction(domain_disjoint_partition,2)]
).

:- lemma(partition_sub:types,
all [p,s]: succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s) =>
  succeeds substitution(?s),
assume(succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s),
 [domain_disjoint_partition([],?p) by 
   lemma(domain_disjoint_partition:nil),
  succeeds partition(?p) & succeeds partition(?p) &
  succeeds substitution([]) & domain_disjoint_partition([],?p) => 
   succeeds substitution(?s) by lemma(class_sub:partition_sub:types),
  succeeds substitution([]) by sld,
  succeeds substitution(?s)],
 succeeds substitution(?s))
).

:- theorem(unify_terms_sub:types,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_sub(?t1,?t2,?s) =>
  succeeds substitution(?s),
assume(succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_sub(?t1,?t2,?s),
 [def succeeds unify_terms_sub(?t1,?t2,?s) by completion,
  exist(p,
   succeeds unify_terms_part(?t1,?t2,?p) &
   succeeds partition_sub(?p,?p,[],?s),
   [succeeds partition(?p) by corollary(unify_terms_part:types),
    succeeds substitution(?s) by lemma(partition_sub:types)],
   succeeds substitution(?s))],
 succeeds substitution(?s))
).

:- lemma(composition:bind,
all [s1,s2,x,t]: succeeds substitution([bind(?x,?t)|?s1]) &
 succeeds substitution(?s2) & $(?x) // ?s2 = ?t // ?s2 &
 composition(?s1,?s2,?s2) => composition([bind(?x,?t)|?s1],?s2,?s2),
assume(succeeds substitution([bind(?x,?t)|?s1]) & 
 succeeds substitution(?s2) & $(?x) // ?s2 = ?t // ?s2 &
 composition(?s1,?s2,?s2),
 [assume(succeeds atomic(?y),
   [?x = ?y \/ ?x <> ?y,
    cases(?x = ?y,
     [$(?x) // [bind(?x,?t)|?s1] = ?t by lemma(apply:var:bind:1),
      $(?y) // [bind(?x,?t)|?s1] = ?t,
      $(?y) // [bind(?x,?t)|?s1] // ?s2 = ?t // ?s2 =
      $(?x) // ?s2 = $(?y) // ?s2,
      $(?y) // [bind(?x,?t)|?s1] // ?s2 = $(?y) // ?s2],
     ?x <> ?y,
     [$(?y) // [bind(?x,?t)|?s1] = $(?y) // ?s1 by 
       lemma(apply:var:bind:2),
      all x: succeeds atomic(?x) => $(?x) // ?s1 // ?s2 = $(?x) // ?s2 by
       elimination(composition,3),
      $(?y) // ?s1 // ?s2 = $(?y) // ?s2,
      $(?y) // [bind(?x,?t)|?s1] // ?s2 = $(?y) // ?s2],
     $(?y) // [bind(?x,?t)|?s1] // ?s2 = $(?y) // ?s2)],
   $(?y) // [bind(?x,?t)|?s1] // ?s2 = $(?y) // ?s2),
  composition([bind(?x,?t)|?s1],?s2,?s2) by introduction(composition,3)],
 composition([bind(?x,?t)|?s1],?s2,?s2))
).

:- lemma(partition_term:partition_termL:solution,
all s: succeeds substitution(?s) =>
  (all [t1,p,t2]: succeeds partition_term(?t1,?p,?t2) =>
     (succeeds term(?t1) & succeeds partition(?p) &
      succeeds partition_solution(?p,?s) =>
       (all t: succeeds apply(?t1,?s,?t) =>
	  succeeds apply(?t2,?s,?t)))) &
  (all [tl1,p,tl2]: succeeds partition_termL(?tl1,?p,?tl2) =>
     (succeeds termL(?tl1) & succeeds partition(?p) &
      succeeds partition_solution(?p,?s) =>
       (all tl: succeeds applyL(?tl1,?s,?tl) =>
	  succeeds applyL(?tl2,?s,?tl)))),
assume(succeeds substitution(?s),
 induction(
  [all [t1,p,t2]: succeeds partition_term(?t1,?p,?t2) => succeeds term(?t1) &
     succeeds partition(?p) & succeeds partition_solution(?p,?s) => 
      (all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t2,?s,?t)),
   all [tl1,p,tl2]: succeeds partition_termL(?tl1,?p,?tl2) => 
     succeeds termL(?tl1) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s) => 
      (all tl: succeeds applyL(?tl1,?s,?tl) => succeeds applyL(?tl2,?s,?tl))],
  [step([t1,p,t3,t2,tag,t1L,t2L],
    [succeeds find(?p,?t1,?t2),
     succeeds var_form(?t2),
     ?t3 = ?t2],
    assume(succeeds term(?t1) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s),
     assume(succeeds apply(?t1,?s,?t),
      [?t1 // ?s = ?t2 // ?s by lemma(find:solution),
       ?t = ?t1 // ?s by uniqueness(//,2),
       succeeds term(?t2) by lemma(find:types),
       succeeds apply(?t2,?s,?t2 // ?s) by existence(//,2),
       ?t = ?t2 // ?s,
       succeeds apply(?t3,?s,?t)],
      succeeds apply(?t3,?s,?t)),
     all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t3,?s,?t)),
    succeeds term(?t1) & succeeds partition(?p) &
    succeeds partition_solution(?p,?s) => 
     (all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t3,?s,?t))),
   step([t1,p,t3,t2,tag,t1L,t2L],
    [succeeds termL(?t1L) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s) => 
      (all tl: succeeds applyL(?t1L,?s,?tl) => succeeds applyL(?t2L,?s,?tl)),
     succeeds find(?p,?t1,?t2),
     fails var_form(?t2),
     ?t2 = [?tag|?t1L],
     succeeds partition_termL(?t1L,?p,?t2L),
     ?t3 = [?tag|?t2L]],
    assume(succeeds term(?t1) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s),
     assume(succeeds apply(?t1,?s,?t),
      [?t1 // ?s = ?t2 // ?s by lemma(find:solution),
       ?t = ?t1 // ?s by uniqueness(//,2),
       ?t = ?t2 // ?s,
       succeeds term(?t2) by lemma(find:types),
       succeeds apply(?t2,?s,?t2 // ?s) by existence(//,2),
       def succeeds apply([?tag|?t1L],?s,?t) by completion,
       exist(0,
        ?t = [?tag|?0] & succeeds applyL(?t1L,?s,?0),
        [def succeeds term([?tag|?t1L]) by completion,
	 all tl: succeeds applyL(?t1L,?s,?tl) =>
	   succeeds applyL(?t2L,?s,?tl),
	 succeeds applyL(?t2L,?s,?0),
	 succeeds apply([?tag|?t2L],?s,[?tag|?0]) by sld,
	 succeeds apply(?t3,?s,?t)],
        succeeds apply(?t3,?s,?t))],
      succeeds apply(?t3,?s,?t)),
     all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t3,?s,?t)),
    succeeds term(?t1) & succeeds partition(?p) &
    succeeds partition_solution(?p,?s) => 
     (all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t3,?s,?t))),
   step([0],
    [],
    assume(succeeds termL([]) & succeeds partition(?0) &
     succeeds partition_solution(?0,?s),
     succeeds applyL([],?s,?tl) => succeeds applyL([],?s,?tl),
     all tl: succeeds applyL([],?s,?tl) => succeeds applyL([],?s,?tl)),
    succeeds termL([]) & succeeds partition(?0) &
    succeeds partition_solution(?0,?s) => 
     (all tl: succeeds applyL([],?s,?tl) => succeeds applyL([],?s,?tl))),
   step([t1,t1L,p,t2,t2L],
    [succeeds term(?t1) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s) => 
      (all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t2,?s,?t)),
     succeeds termL(?t1L) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s) => 
      (all tl: succeeds applyL(?t1L,?s,?tl) => succeeds applyL(?t2L,?s,?tl)),
     succeeds partition_term(?t1,?p,?t2),
     succeeds partition_termL(?t1L,?p,?t2L)],
    assume(succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s),
     assume(succeeds applyL([?t1|?t1L],?s,?tl),
      [def succeeds applyL([?t1|?t1L],?s,?tl) by completion,
       def succeeds termL([?t1|?t1L]) by completion,
       exist([0,1],
        ?tl = [?0|?1] & succeeds apply(?t1,?s,?0) &
        succeeds applyL(?t1L,?s,?1),
        [all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t2,?s,?t),
	 succeeds apply(?t2,?s,?0),
	 all tl: succeeds applyL(?t1L,?s,?tl) =>
	   succeeds applyL(?t2L,?s,?tl),
	 succeeds applyL(?t2L,?s,?1),
	 succeeds applyL([?t2|?t2L],?s,[?0|?1]) by sld,
	 succeeds applyL([?t2|?t2L],?s,?tl)],
        succeeds applyL([?t2|?t2L],?s,?tl))],
      succeeds applyL([?t2|?t2L],?s,?tl)),
     all tl: succeeds applyL([?t1|?t1L],?s,?tl) => 
       succeeds applyL([?t2|?t2L],?s,?tl)),
    succeeds termL([?t1|?t1L]) & succeeds partition(?p) &
    succeeds partition_solution(?p,?s) => 
     (all tl: succeeds applyL([?t1|?t1L],?s,?tl) => 
        succeeds applyL([?t2|?t2L],?s,?tl)))]),
 (all [t1,p,t2]: succeeds partition_term(?t1,?p,?t2) => succeeds term(?t1) &
    succeeds partition(?p) & succeeds partition_solution(?p,?s) => 
     (all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t2,?s,?t))) &
 (all [tl1,p,tl2]: succeeds partition_termL(?tl1,?p,?tl2) => 
    succeeds termL(?tl1) & succeeds partition(?p) &
    succeeds partition_solution(?p,?s) => 
     (all tl: succeeds applyL(?tl1,?s,?tl) => succeeds applyL(?tl2,?s,?tl))))
).

:- corollary(partition_term:solution,
all [t1,t2,p,s]:  succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) & succeeds term(?t1) &
 succeeds partition_term(?t1,?p,?t2) => ?t1 // ?s = ?t2 // ?s,
assume(succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) & succeeds term(?t1) &
 succeeds partition_term(?t1,?p,?t2),
 [(all [t1,p,t2]: succeeds partition_term(?t1,?p,?t2) => succeeds term(?t1) &
     succeeds partition(?p) & succeeds partition_solution(?p,?s) => 
      (all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t2,?s,?t))) &
  (all [tl1,p,tl2]: succeeds partition_termL(?tl1,?p,?tl2) => 
     succeeds termL(?tl1) & succeeds partition(?p) &
     succeeds partition_solution(?p,?s) => 
      (all tl: succeeds applyL(?tl1,?s,?tl) => succeeds applyL(?tl2,?s,?tl)))
   by lemma(partition_term:partition_termL:solution),
  succeeds term(?t1) & succeeds partition(?p) &
  succeeds partition_solution(?p,?s) => 
   (all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t2,?s,?t)),
  all t: succeeds apply(?t1,?s,?t) => succeeds apply(?t2,?s,?t),
  succeeds apply(?t1,?s,?t1 // ?s) by existence(//,2),
  succeeds apply(?t2,?s,?t1 // ?s),
  succeeds term(?t2) by corollary(partition_term:types),
  ?t1 // ?s = ?t2 // ?s by uniqueness(//,2)],
 ?t1 // ?s = ?t2 // ?s)
).

:- lemma(partition_termL:existence,
all [p,n,s]:
(all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< s(?n) => 
   (ex t2: succeeds partition_term(?t1,?p,?t2))) =>
 (all tl1: succeeds termL(?tl1) =>
    (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< s(?n)) =>
     (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
assume(
 all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< s(?n) => 
   (ex t2: succeeds partition_term(?t1,?p,?t2)),
 induction(
  [all tl1: succeeds termL(?tl1) => 
     (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< s(?n)) =>
      (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))],
  [step([],
    [],
    assume(
     all t: succeeds member(?t,[]) => succeeds size(?t // ?s) @< s(?n),
     [succeeds partition_termL([],?p,[]) by sld,
      ex tl2: succeeds partition_termL([],?p,?tl2)],
     ex tl2: succeeds partition_termL([],?p,?tl2)),
    (all t: succeeds member(?t,[]) => succeeds size(?t // ?s) @< s(?n)) =>
     (ex tl2: succeeds partition_termL([],?p,?tl2))),
   step([t,tL],
    [(all t: succeeds member(?t,?tL) => succeeds size(?t // ?s) @< s(?n)) =>
      (ex tl2: succeeds partition_termL(?tL,?p,?tl2)),
     succeeds term(?t),
     succeeds termL(?tL)],
    assume(
     all t1: succeeds member(?t1,[?t|?tL]) => 
       succeeds size(?t1 // ?s) @< s(?n),
     [succeeds member(?t,[?t|?tL]) by sld,
      succeeds size(?t // ?s) @< s(?n),
      ex t2: succeeds partition_term(?t,?p,?t2),
      exist(t2,
       succeeds partition_term(?t,?p,?t2),
       [assume(succeeds member(?t1,?tL),
	 [],
	 succeeds size(?t1 // ?s) @< s(?n)),
	all t1: succeeds member(?t1,?tL) => succeeds size(?t1 // ?s) @< s(?n),
	all t: succeeds member(?t,?tL) => succeeds size(?t // ?s) @< s(?n),
	ex tl2: succeeds partition_termL(?tL,?p,?tl2),
	exist(tl2,
         succeeds partition_termL(?tL,?p,?tl2),
         [succeeds partition_termL([?t|?tL],?p,[?t2|?tl2]) by sld,
	  ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2)],
         ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2))],
       ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2))],
     ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2)),
    (all t1: succeeds member(?t1,[?t|?tL]) => 
       succeeds size(?t1 // ?s) @< s(?n)) => 
     (ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2)))]),
 all tl1: succeeds termL(?tl1) => 
   (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< s(?n)) =>
    (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))
).

:- lemma(partition_term:partition_termL:existence,
all [p,s]: succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) =>
  (all n: succeeds nat(?n) =>
     (all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< ?n =>
	(ex t2: succeeds partition_term(?t1,?p,?t2))) &
     (all tl1: succeeds termL(?tl1) &
       (all t: succeeds member(?t,?tl1) =>
	  succeeds size(?t // ?s) @< ?n) =>
	(ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))),
assume(succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s),
 induction(
  [all n: succeeds nat(?n) => 
     (all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< ?n => 
        (ex t2: succeeds partition_term(?t1,?p,?t2))) &
     (all tl1: succeeds termL(?tl1) &
       (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< ?n) =>
        (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))],
  [step([],
    [],
    [assume(succeeds term(?t1) & succeeds size(?t1 // ?s) @< 0,
      [def succeeds size(?t1 // ?s) @< 0 by completion,ff],
      ex t2: succeeds partition_term(?t1,?p,?t2)),
     assume(succeeds termL(?tl1) &
      (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< 0),
      [def succeeds termL(?tl1) by completion,
       cases(?tl1 = [],
        [succeeds partition_termL([],?p,[]) by sld,
	 succeeds partition_termL(?tl1,?p,[]),
	 ex tl2: succeeds partition_termL(?tl1,?p,?tl2)],
        ex [t,tL]: ?tl1 = [?t|?tL] & succeeds term(?t) & 
         succeeds termL(?tL),
        exist([t,tL],
         ?tl1 = [?t|?tL] & succeeds term(?t) & succeeds termL(?tL),
         [succeeds member(?t,[?t|?tL]) by sld,
	  succeeds member(?t,?tl1),
	  succeeds size(?t // ?s) @< 0,
	  def succeeds size(?t // ?s) @< 0 by completion,ff],
         ex tl2: succeeds partition_termL(?tl1,?p,?tl2)),
        ex tl2: succeeds partition_termL(?tl1,?p,?tl2))],
      ex tl2: succeeds partition_termL(?tl1,?p,?tl2))],
    (all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< 0 => 
       (ex t2: succeeds partition_term(?t1,?p,?t2))) &
    (all tl1: succeeds termL(?tl1) &
      (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< 0) =>
       (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))),
   step([n],
    [(all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< ?n => 
        (ex t2: succeeds partition_term(?t1,?p,?t2))) &
     (all tl1: succeeds termL(?tl1) &
       (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< ?n) =>
        (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
     succeeds nat(?n)],
    [assume(succeeds term(?t1) & succeeds size(?t1 // ?s) @< s(?n),
      [ex t2: succeeds find(?p,?t1,?t2) by lemma(find:existence),
       exist(t2,
        succeeds find(?p,?t1,?t2),
        [?t1 // ?s = ?t2 // ?s by lemma(find:solution),
	 succeeds term(?t2) by lemma(find:types),
	 def succeeds term(?t2) by completion,
	 cases(ex x: ?t2 = $(?x) & succeeds atomic(?x),
	  exist(x,
	   ?t2 = $(?x) & succeeds atomic(?x),
	   [succeeds var_form($(?x)) by sld,
	    succeeds var_form(?t2),
	    ?t2 = ?t2,
	    succeeds partition_term(?t1,?p,?t2) by sld,
	    ex t3: succeeds partition_term(?t1,?p,?t3)],
	   ex t3: succeeds partition_term(?t1,?p,?t3)),
	  ex [x,tL]: ?t2 = [?x|?tL] & succeeds atomic(?x) &
	   succeeds termL(?tL),
	  exist([x,tL],
	   ?t2 = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
	   [fails var_form([?x|?tL]),
	    fails var_form(?t2),
	    def succeeds term([?x|?tL]) by completion,
	    assume(succeeds member(?t,?tL),
             [succeeds size(?t // ?s) @< size([?x|?tL] // ?s) by 
               corollary(term:argument:size:substitution),
	      succeeds size(?t2 // ?s) @< s(?n),
	      succeeds size([?x|?tL] // ?s) @< s(?n),
	      succeeds size(?t // ?s) @< ?n by 
               lemma(less:transitive:successor)],
             succeeds size(?t // ?s) @< ?n),
	    ex tl2: succeeds partition_termL(?tL,?p,?tl2),
	    exist(tl2,
             succeeds partition_termL(?tL,?p,?tl2),
             [[?x|?tl2] = [?x|?tl2],
	      succeeds partition_term(?t1,?p,[?x|?tl2]) by sld,
	      ex t3: succeeds partition_term(?t1,?p,?t3)],
             ex t3: succeeds partition_term(?t1,?p,?t3))],
	   ex t3: succeeds partition_term(?t1,?p,?t3)),
	  ex t3: succeeds partition_term(?t1,?p,?t3))],
        ex t3: succeeds partition_term(?t1,?p,?t3))],
      ex t2: succeeds partition_term(?t1,?p,?t2)),
     all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< s(?n) => 
       (ex t2: succeeds partition_term(?t1,?p,?t2)),
     assume(succeeds termL(?tl1) &
      (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< s(?n)),
      [(all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< s(?n) => 
          (ex t2: succeeds partition_term(?t1,?p,?t2))) => 
        (all tl1: succeeds termL(?tl1) => 
           (all t: succeeds member(?t,?tl1) => 
              succeeds size(?t // ?s) @< s(?n)) => 
            (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))) by 
        lemma(partition_termL:existence),
       all tl1: succeeds termL(?tl1) => 
	 (all t: succeeds member(?t,?tl1) => 
	    succeeds size(?t // ?s) @< s(?n)) => 
	  (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)),
       (all t: succeeds member(?t,?tl1) => 
	 succeeds size(?t // ?s) @< s(?n)) => 
	(ex tl2: succeeds partition_termL(?tl1,?p,?tl2)),
       ex tl2: succeeds partition_termL(?tl1,?p,?tl2)],
      ex tl2: succeeds partition_termL(?tl1,?p,?tl2))],
    (all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< s(?n) => 
       (ex t2: succeeds partition_term(?t1,?p,?t2))) &
    (all tl1: succeeds termL(?tl1) &
      (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< s(?n)) =>
       (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))))]),
 all n: succeeds nat(?n) => 
   (all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< ?n => 
      (ex t2: succeeds partition_term(?t1,?p,?t2))) &
   (all tl1: succeeds termL(?tl1) &
     (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< ?n) =>
      (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))))
).

:- lemma(partition_term:existence,
all [t1,p,s]: succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) & succeeds term(?t1) =>
  (ex t2: succeeds partition_term(?t1,?p,?t2)),
assume(succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) & succeeds term(?t1),
 [all n: succeeds nat(?n) => 
    (all t1: succeeds term(?t1) & succeeds size(?t1 // ?s) @< ?n => 
       (ex t2: succeeds partition_term(?t1,?p,?t2))) &
    (all tl1: succeeds termL(?tl1) &
      (all t: succeeds member(?t,?tl1) => succeeds size(?t // ?s) @< ?n) =>
       (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))) by 
   lemma(partition_term:partition_termL:existence),
  succeeds term(?t1 // ?s) by corollary(apply:substitution:types),
  succeeds nat(size(?t1 // ?s)) by corollary(size:type),
  succeeds size(?t1 // ?s) @< s(size(?t1 // ?s)) by lemma(less:one),
  succeeds nat(s(size(?t1 // ?s))) by sld,
  (all t: succeeds term(?t) &
    succeeds size(?t // ?s) @< s(size(?t1 // ?s)) => 
     (ex t2: succeeds partition_term(?t,?p,?t2))) &
    (all tl1: succeeds termL(?tl1) &
      (all t: succeeds member(?t,?tl1) =>
	 succeeds size(?t // ?s) @< s(size(?t1 // ?s))) =>
       (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
  ex t2: succeeds partition_term(?t1,?p,?t2)],
 ex t2: succeeds partition_term(?t1,?p,?t2))
).

:- lemma(class_sub:partition_sub:existence,
all s: succeeds substitution(?s) =>
  (all [c]: succeeds class(?c) =>
     (all [p,s1]: succeeds partition(?p) & succeeds substitution(?s1) &
       succeeds partition_solution(?p,?s) & succeeds class_solution(?c,?s) &
       composition(?s1,?s,?s) & domain_disjoint_class(?s1,?c) =>
	(ex s2: succeeds class_sub(?c,?p,?s1,?s2) &
	  composition(?s2,?s,?s)))) &
  (all [p1]: succeeds partition(?p1) =>
     (all [p2,s1]: succeeds partition(?p2) &
       succeeds partition_solution(?p1,?s) &
       succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
       composition(?s1,?s,?s) & domain_disjoint_partition(?s1,?p1) =>
	(ex s2: succeeds partition_sub(?p1,?p2,?s1,?s2) &
	  composition(?s2,?s,?s)))),
assume(succeeds substitution(?s),
 induction(
  [all c: succeeds class(?c) => 
     (all [p,s1]: succeeds partition(?p) & succeeds substitution(?s1) &
       succeeds partition_solution(?p,?s) & succeeds class_solution(?c,?s) &
       composition(?s1,?s,?s) & domain_disjoint_class(?s1,?c) => 
        (ex s2: succeeds class_sub(?c,?p,?s1,?s2) & composition(?s2,?s,?s))),
   all p1: succeeds partition(?p1) => 
     (all [p2,s1]: succeeds partition(?p2) &
       succeeds partition_solution(?p1,?s) &
       succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
       composition(?s1,?s,?s) & domain_disjoint_partition(?s1,?p1) => 
        (ex s2: succeeds partition_sub(?p1,?p2,?s1,?s2) &
          composition(?s2,?s,?s)))],
  [step([t,p],
    [all [p2,s1]: succeeds partition(?p2) &
      succeeds partition_solution(?p,?s) &
      succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
      composition(?s1,?s,?s) & domain_disjoint_partition(?s1,?p) => 
       (ex s2: succeeds partition_sub(?p,?p2,?s1,?s2) &
         composition(?s2,?s,?s)),
     succeeds term(?t),
     succeeds partition(?p),
     fails partition_member(?t,?p),
     fails not_var_class(?t,?p)],
    assume(succeeds partition(?p1) & succeeds substitution(?s1) &
     succeeds partition_solution(?p1,?s) &
     succeeds class_solution(cl(?t,?p),?s) & composition(?s1,?s,?s) &
     domain_disjoint_class(?s1,cl(?t,?p)),
     [def succeeds term(?t) by completion,
      succeeds partition_solution(?p,?s) by 
       lemma(class_solution:partition_solution),
      cases(ex x: ?t = $(?x) & succeeds atomic(?x),
       exist(x,
        ?t = $(?x) & succeeds atomic(?x),
        [succeeds term($(?x)),
	 succeeds class(cl(?t,?p)) by sld,
	 ex t1: succeeds partition_term($(?x),?p1,?t1) by 
          lemma(partition_term:existence),
	 exist(t1,
          succeeds partition_term($(?x),?p1,?t1),
          [succeeds term(?t1) by corollary(partition_term:types),
	   succeeds class(cl($(?x),?p)),
	   domain_disjoint_class(?s1,cl($(?x),?p)),
	   succeeds substitution([bind(?x,?t1)|?s1]) &
           domain_disjoint_partition([bind(?x,?t1)|?s1],?p) by 
            lemma(domain_disjoint_class:bind),
	   $(?x) // ?s = ?t1 // ?s by corollary(partition_term:solution),
	   composition([bind(?x,?t1)|?s1],?s,?s) by 
            lemma(composition:bind),   
	   ex s2: succeeds partition_sub(?p,?p1,[bind(?x,?t1)|?s1],?s2) &
	    composition(?s2,?s,?s),
	   exist(s2,
            succeeds partition_sub(?p,?p1,[bind(?x,?t1)|?s1],?s2) &
            composition(?s2,?s,?s),
            [succeeds class_sub(cl($(?x),?p),?p1,?s1,?s2) by sld,
	     succeeds class_sub(cl(?t,?p),?p1,?s1,?s2),
	     ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
	      composition(?s2,?s,?s)],
            ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
             composition(?s2,?s,?s))],
          ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
           composition(?s2,?s,?s))],
        ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
         composition(?s2,?s,?s)),
       ex [x,tL]: ?t = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
       exist([x,tL],
        ?t = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
        [domain_disjoint_partition(?s1,?p) by 
          lemma(domain_disjoint_class:partition),
	 ex s2: succeeds partition_sub(?p,?p1,?s1,?s2) &
	  composition(?s2,?s,?s),
	 exist(s2,
          succeeds partition_sub(?p,?p1,?s1,?s2) & composition(?s2,?s,?s),
          [succeeds class_sub(cl(?t,?p),?p1,?s1,?s2),
	   ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
	    composition(?s2,?s,?s)],
          ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
           composition(?s2,?s,?s))],
        ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
         composition(?s2,?s,?s)),
       ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
        composition(?s2,?s,?s))],
     ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
      composition(?s2,?s,?s)),
    all [p1,s1]: succeeds partition(?p1) & succeeds substitution(?s1) &
     succeeds partition_solution(?p1,?s) &
     succeeds class_solution(cl(?t,?p),?s) & composition(?s1,?s,?s) &
     domain_disjoint_class(?s1,cl(?t,?p)) => 
      (ex s2: succeeds class_sub(cl(?t,?p),?p1,?s1,?s2) &
        composition(?s2,?s,?s))),
   step([],
    [],
    assume(succeeds partition(?p2) & succeeds partition_solution([],?s) &
     succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
     composition(?s1,?s,?s) & domain_disjoint_partition(?s1,[]),
     [succeeds partition_sub([],?p2,?s1,?s1) by sld,
      ex s2: succeeds partition_sub([],?p2,?s1,?s2) & composition(?s2,?s,?s)],
     ex s2: succeeds partition_sub([],?p2,?s1,?s2) & composition(?s2,?s,?s)),
    all [p2,s1]: succeeds partition(?p2) &
     succeeds partition_solution([],?s) &
     succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
     composition(?s1,?s,?s) & domain_disjoint_partition(?s1,[]) => 
      (ex s2: succeeds partition_sub([],?p2,?s1,?s2) &
        composition(?s2,?s,?s))),
   step([c,p],
    [all [p,s1]: succeeds partition(?p) & succeeds substitution(?s1) &
      succeeds partition_solution(?p,?s) & succeeds class_solution(?c,?s) &
      composition(?s1,?s,?s) & domain_disjoint_class(?s1,?c) => 
       (ex s2: succeeds class_sub(?c,?p,?s1,?s2) & composition(?s2,?s,?s)),
     all [p2,s1]: succeeds partition(?p2) &
      succeeds partition_solution(?p,?s) &
      succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
      composition(?s1,?s,?s) & domain_disjoint_partition(?s1,?p) => 
       (ex s2: succeeds partition_sub(?p,?p2,?s1,?s2) &
         composition(?s2,?s,?s)),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(succeeds partition(?p2) & 
     succeeds partition_solution([?c|?p],?s) &
     succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
     composition(?s1,?s,?s) & domain_disjoint_partition(?s1,[?c|?p]),
     [def succeeds partition([?c|?p]) by completion,
      def succeeds partition_solution([?c|?p],?s) by completion,
      domain_disjoint_class(?s1,?c) by 
       lemma(domain_disjoint_partition:class),
      ex s2: succeeds class_sub(?c,?p2,?s1,?s2) & composition(?s2,?s,?s),
      exist(s2,
       succeeds class_sub(?c,?p2,?s1,?s2) & composition(?s2,?s,?s),
       [succeeds class(?c) & succeeds partition(?p2) &
        succeeds substitution(?s1) & domain_disjoint_class(?s1,?c) => 
         succeeds substitution(?s2) by 
         lemma(class_sub:partition_sub:types),
	succeeds substitution(?s2),
	domain_disjoint_partition(?s2,?p) by 
         lemma(domain_disjoint_partition:class_sub),
	ex s3: succeeds partition_sub(?p,?p2,?s2,?s3) &
         composition(?s3,?s,?s),
	exist(s3,
         succeeds partition_sub(?p,?p2,?s2,?s3) & composition(?s3,?s,?s),
         [succeeds partition_sub([?c|?p],?p2,?s1,?s3) by sld,
	  ex s3: succeeds partition_sub([?c|?p],?p2,?s1,?s3) &
	   composition(?s3,?s,?s)],
         ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2) &
          composition(?s2,?s,?s))],
       ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2) &
        composition(?s2,?s,?s))],
     ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2) &
      composition(?s2,?s,?s)),
    all [p2,s1]: succeeds partition(?p2) &
     succeeds partition_solution([?c|?p],?s) &
     succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
     composition(?s1,?s,?s) & domain_disjoint_partition(?s1,[?c|?p]) => 
      (ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2) &
        composition(?s2,?s,?s)))]),
 (all c: succeeds class(?c) => 
    (all [p,s1]: succeeds partition(?p) & succeeds substitution(?s1) &
      succeeds partition_solution(?p,?s) & succeeds class_solution(?c,?s) &
      composition(?s1,?s,?s) & domain_disjoint_class(?s1,?c) => 
       (ex s2: succeeds class_sub(?c,?p,?s1,?s2) & composition(?s2,?s,?s)))) &
 (all p1: succeeds partition(?p1) => 
    (all [p2,s1]: succeeds partition(?p2) &
      succeeds partition_solution(?p1,?s) &
      succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
      composition(?s1,?s,?s) & domain_disjoint_partition(?s1,?p1) => 
       (ex s2: succeeds partition_sub(?p1,?p2,?s1,?s2) &
         composition(?s2,?s,?s)))))
).

:- lemma(partition_sub:existence,
all [p,s]: succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s) =>
  (ex s1: succeeds partition_sub(?p,?p,[],?s1) & composition(?s1,?s,?s)),
assume(succeeds partition(?p) & succeeds substitution(?s) &
 succeeds partition_solution(?p,?s),
 [domain_disjoint_partition([],?p) by 
   lemma(domain_disjoint_partition:nil),
  (all c: succeeds class(?c) => 
     (all [p,s1]: succeeds partition(?p) & succeeds substitution(?s1) &
       succeeds partition_solution(?p,?s) & succeeds class_solution(?c,?s) &
       composition(?s1,?s,?s) & domain_disjoint_class(?s1,?c) => 
        (ex s2: succeeds class_sub(?c,?p,?s1,?s2) & composition(?s2,?s,?s)))) &
  (all p1: succeeds partition(?p1) => 
     (all [p2,s1]: succeeds partition(?p2) &
       succeeds partition_solution(?p1,?s) &
       succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
       composition(?s1,?s,?s) & domain_disjoint_partition(?s1,?p1) => 
        (ex s2: succeeds partition_sub(?p1,?p2,?s1,?s2) &
          composition(?s2,?s,?s)))) by 
   lemma(class_sub:partition_sub:existence),
  all [p2,s1]: succeeds partition(?p2) &
   succeeds partition_solution(?p,?s) &
   succeeds partition_solution(?p2,?s) & succeeds substitution(?s1) &
   composition(?s1,?s,?s) & domain_disjoint_partition(?s1,?p) => 
    (ex s2: succeeds partition_sub(?p,?p2,?s1,?s2) &
      composition(?s2,?s,?s)),
  succeeds substitution([]) by sld,
  composition([],?s,?s) by lemma(composition:neutral:left), 
  ex s1: succeeds partition_sub(?p,?p,[],?s1) & composition(?s1,?s,?s)],
 ex s1: succeeds partition_sub(?p,?p,[],?s1) & composition(?s1,?s,?s))
).

:- theorem(unify_terms_sub:existence,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s) =>
  (ex s1: succeeds unify_terms_sub(?t1,?t2,?s1) & composition(?s1,?s,?s)),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds substitution(?s) &
 succeeds unifier(?t1,?t2,?s),
 [ex p: succeeds unify_terms_part(?t1,?t2,?p) &
   succeeds partition_solution(?p,?s) by 
   theorem(unify_terms_part:success),
  exist(p,
   succeeds unify_terms_part(?t1,?t2,?p) &
   succeeds partition_solution(?p,?s),
   [succeeds partition(?p) by corollary(unify_terms_part:types),
    ex s1: succeeds partition_sub(?p,?p,[],?s1) & composition(?s1,?s,?s) by
     lemma(partition_sub:existence),
    exist(s1,
     succeeds partition_sub(?p,?p,[],?s1) & composition(?s1,?s,?s),
     [succeeds unify_terms_sub(?t1,?t2,?s1) by sld,
      ex s1: succeeds unify_terms_sub(?t1,?t2,?s1) & composition(?s1,?s,?s)],
     ex s1: succeeds unify_terms_sub(?t1,?t2,?s1) & composition(?s1,?s,?s))],
   ex s1: succeeds unify_terms_sub(?t1,?t2,?s1) & composition(?s1,?s,?s))],
 ex s1: succeeds unify_terms_sub(?t1,?t2,?s1) & composition(?s1,?s,?s))
).

%-----------------------------------------------------------------------
% part9
%-----------------------------------------------------------------------

:- definition_pred(root_term,3,
all [t1,p,l]: root_term(?t1,?p,?l) <=>
 (ex t2: succeeds find(?p,?t1,?t2) & succeeds member(?t2,?l))
).

:- definition_pred(topological_ordering,2,
all [p,l]: topological_ordering(?p,?l) <=>
 succeeds list(?l) &
 (all [l1,l2,f,tl]: succeeds append(?l1,[[?f|?tl]|?l2],?l) =>
    roots_termL(?tl,?p,?l2))
).

:- lemma(cycle_freeL:sub,
all [tl,p,c,wf1,wf2]: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) =>
  sub(?wf1,?wf2),
induction(
 [all [tl,p,c,wf1,wf2]: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) => 
    sub(?wf1,?wf2)],
 [step([0,1,wF],[],
   sub(?wF,?wF) by lemma(sub:reflexive),
   sub(?wF,?wF)),
  step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
   [sub(?wF1,?wF3),
    succeeds find(?p,?t1,?t2),
    fails member_check(?t2,?c),
    succeeds member_check(?t2,?wF1),
    succeeds cycle_freeL(?t1L,?p,?c,?wF1,?wF3)],
   [],
   sub(?wF1,?wF3)),
  step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
   [sub([?t2|?wF1],?wF3),
    succeeds find(?p,?t1,?t2),
    fails member_check(?t2,?c),
    fails member_check(?t2,?wF1),
    succeeds var_form(?t2),
    succeeds cycle_freeL(?t1L,?p,?c,[?t2|?wF1],?wF3)],
   [sub(?wF1,[?t2|?wF1]) by lemma(sub:cons),
    sub(?wF1,?wF3) by lemma(sub:transitive)],
   sub(?wF1,?wF3)),
  step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
   [sub(?wF1,?wF2),
    sub([?t2|?wF2],?wF3),
    succeeds find(?p,?t1,?t2),
    fails member_check(?t2,?c),
    fails member_check(?t2,?wF1),
    fails var_form(?t2),
    ?t2 = [?0|?t2L],
    succeeds cycle_freeL(?t2L,?p,[?t2|?c],?wF1,?wF2),
    succeeds cycle_freeL(?t1L,?p,?c,[?t2|?wF2],?wF3)],
   [sub(?wF2,[?t2|?wF2]) by lemma(sub:cons),
    sub(?wF2,?wF3) by lemma(sub:transitive),
    sub(?wF1,?wF3) by lemma(sub:transitive)],
   sub(?wF1,?wF3))])
).

:- lemma(roots_termL:cons,
all [t,tl,p,l]: succeeds partition(?p) & root_term(?t,?p,?l) &
 roots_termL(?tl,?p,?l) => roots_termL([?t|?tl],?p,?l),
assume(succeeds partition(?p) & root_term(?t,?p,?l) & 
 roots_termL(?tl,?p,?l),
 [assume(succeeds member(?t1,[?t|?tl]) & succeeds find(?p,?t1,?t2),
   [def succeeds member(?t1,[?t|?tl]) by completion,
    cases(?t1 = ?t,
     [ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l) by 
       elimination(root_term,3),
      exist(t3,
       succeeds find(?p,?t,?t3) & succeeds member(?t3,?l),
       [?t2 = ?t3 by lemma(find:uniqueness),
	succeeds member(?t2,?l)],
       succeeds member(?t2,?l))],
     succeeds member(?t1,?tl),
     [all [t1,t2]: succeeds member(?t1,?tl) & succeeds find(?p,?t1,?t2) => 
        succeeds member(?t2,?l) by elimination(roots_termL,3),
      succeeds member(?t2,?l)],
     succeeds member(?t2,?l))],
   succeeds member(?t2,?l)),
  roots_termL([?t|?tl],?p,?l) by introduction(roots_termL,3)],
 roots_termL([?t|?tl],?p,?l))
).

:- lemma(topological_ordering:variable,
all [p,l,x]: topological_ordering(?p,?l) =>
  topological_ordering(?p,[$(?x)|?l]),
assume(topological_ordering(?p,?l),
 [succeeds list(?l) &
  (all [l1,l2,f,tl]: succeeds append(?l1,[[?f|?tl]|?l2],?l) => 
     roots_termL(?tl,?p,?l2)) by elimination(topological_ordering,2),
  assume(succeeds append(?l1,[[?f|?tl]|?l2],[$(?x)|?l]),
   [def succeeds append(?l1,[[?f|?tl]|?l2],[$(?x)|?l]) by completion,
    exist(1,
     ?l1 = [$(?x)|?1] & succeeds append(?1,[[?f|?tl]|?l2],?l),
     [],
     roots_termL(?tl,?p,?l2))],
   roots_termL(?tl,?p,?l2)),
  topological_ordering(?p,[$(?x)|?l]) by 
   introduction(topological_ordering,2)],
 topological_ordering(?p,[$(?x)|?l]))
).

:- lemma(topological_ordering:compound,
all [p,l,f,tl]: topological_ordering(?p,?l) & roots_termL(?tl,?p,?l) =>
  topological_ordering(?p,[[?f|?tl]|?l]),
assume(topological_ordering(?p,?l) & roots_termL(?tl,?p,?l),
 [succeeds list(?l) &
  (all [l1,l2,f,tl]: succeeds append(?l1,[[?f|?tl]|?l2],?l) => 
     roots_termL(?tl,?p,?l2)) by elimination(topological_ordering,2),
  all [t1,t2]: succeeds member(?t1,?tl) & succeeds find(?p,?t1,?t2) => 
    succeeds member(?t2,?l) by elimination(roots_termL,3),
  assume(succeeds append(?l1,[[?g|?tl1]|?l2],[[?f|?tl]|?l]),
   [def succeeds append(?l1,[[?g|?tl1]|?l2],[[?f|?tl]|?l]) by completion,
    cases(?l1 = [] & ?g = ?f & ?tl1 = ?tl & ?l2 = ?l,
     [],
     ex 0: ?l1 = [[?f|?tl]|?0] & succeeds append(?0,[[?g|?tl1]|?l2],?l),
     exist(0,
      ?l1 = [[?f|?tl]|?0] & succeeds append(?0,[[?g|?tl1]|?l2],?l),
      [],
      roots_termL(?tl1,?p,?l2)),
     roots_termL(?tl1,?p,?l2))],
   roots_termL(?tl1,?p,?l2)),
  topological_ordering(?p,[[?f|?tl]|?l]) by 
   introduction(topological_ordering,2)],
 topological_ordering(?p,[[?f|?tl]|?l]))
).

:- lemma(topological_ordering:suffix,
all [p,o1,o2,o]: topological_ordering(?p,?o) & succeeds append(?o1,?o2,?o) =>
  topological_ordering(?p,?o2),
assume(topological_ordering(?p,?o) & succeeds append(?o1,?o2,?o),
 [succeeds list(?o) &
  (all [l1,l2,f,tl]: succeeds append(?l1,[[?f|?tl]|?l2],?o) => 
     roots_termL(?tl,?p,?l2)) by elimination(topological_ordering,2),
  succeeds list(?o1) & succeeds list(?o2) by lemma(append:types:4),
  assume(succeeds append(?l1,[[?f|?tl]|?l2],?o2),
   [succeeds list(?l1) & succeeds list([[?f|?tl]|?l2]) by 
     lemma(append:types:4),
    ?l1 ** [[?f|?tl]|?l2] = ?o2 by uniqueness(**,2),
    ?o1 ** (?l1 ** [[?f|?tl]|?l2]) = ?o1 ** ?o2,
    ?o1 ** ?l1 ** [[?f|?tl]|?l2] = ?o1 ** (?l1 ** [[?f|?tl]|?l2]) by 
     theorem(app:associative),
    ?o = ?o1 ** ?o2 by uniqueness(**,2),
    ?o1 ** ?l1 ** [[?f|?tl]|?l2] = ?o1 ** (?l1 ** [[?f|?tl]|?l2]) =
     ?o1 ** ?o2 = ?o,
    succeeds list(?o1 ** ?l1) by corollary(app:types:1),
    succeeds 
    append(?o1 ** ?l1,[[?f|?tl]|?l2],?o1 ** ?l1 ** [[?f|?tl]|?l2]) by 
     existence(**,2),
    succeeds append(?o1 ** ?l1,[[?f|?tl]|?l2],?o),
    roots_termL(?tl,?p,?l2)],
   roots_termL(?tl,?p,?l2)),
  topological_ordering(?p,?o2) by introduction(topological_ordering,2)],
 topological_ordering(?p,?o2))
).

:- lemma(cycle_freeL:topological_ordering,
all [tl,p,c,wf1,wf2]: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) &
 succeeds partition(?p) & topological_ordering(?p,?wf1) =>
  topological_ordering(?p,?wf2) & roots_termL(?tl,?p,?wf2),
[induction(
  [all [tl,p,c,wf1,wf2]: succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) => 
     succeeds partition(?p) & topological_ordering(?p,?wf1) => 
      topological_ordering(?p,?wf2) & roots_termL(?tl,?p,?wf2)],
  [step([0,1,wF],
    [],
    assume(succeeds partition(?0) & topological_ordering(?0,?wF),
     [assume(succeeds member(?t1,[]) & succeeds find(?0,?t1,?t2),
       [def succeeds member(?t1,[]) by completion,ff],
       succeeds member(?t2,?wF)),
      roots_termL([],?0,?wF) by introduction(roots_termL,3)],
     topological_ordering(?0,?wF) & roots_termL([],?0,?wF)),
    succeeds partition(?0) & topological_ordering(?0,?wF) => 
     topological_ordering(?0,?wF) & roots_termL([],?0,?wF)),
   step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
    [succeeds partition(?p) & topological_ordering(?p,?wF1) => 
      topological_ordering(?p,?wF3) & roots_termL(?t1L,?p,?wF3),
     succeeds find(?p,?t1,?t2),
     fails member_check(?t2,?c),
     succeeds member_check(?t2,?wF1),
     succeeds cycle_freeL(?t1L,?p,?c,?wF1,?wF3)],
    assume(succeeds partition(?p) & topological_ordering(?p,?wF1),
     [topological_ordering(?p,?wF3) & roots_termL(?t1L,?p,?wF3),
      succeeds member(?t2,?wF1) by lemma(member_check:member),
      sub(?wF1,?wF3) by lemma(cycle_freeL:sub),
      all x: succeeds member(?x,?wF1) => succeeds member(?x,?wF3) by 
       elimination(sub,2),
      succeeds member(?t2,?wF3),
      root_term(?t1,?p,?wF3) by introduction(root_term,3),
      roots_termL([?t1|?t1L],?p,?wF3) by lemma(roots_termL:cons)],
     topological_ordering(?p,?wF3) & roots_termL([?t1|?t1L],?p,?wF3)),
    succeeds partition(?p) & topological_ordering(?p,?wF1) => 
     topological_ordering(?p,?wF3) & roots_termL([?t1|?t1L],?p,?wF3)),
   step([t1,t1L,p,c,wF1,wF3,t2,0,t2L,wF2],
    [succeeds partition(?p) & topological_ordering(?p,[?t2|?wF1]) => 
      topological_ordering(?p,?wF3) & roots_termL(?t1L,?p,?wF3),
     succeeds find(?p,?t1,?t2),
     fails member_check(?t2,?c),
     fails member_check(?t2,?wF1),
     succeeds var_form(?t2),
     succeeds cycle_freeL(?t1L,?p,?c,[?t2|?wF1],?wF3)],
    assume(succeeds partition(?p) & topological_ordering(?p,?wF1),
     [def succeeds var_form(?t2) by completion,
      exist(x,
       ?t2 = $(?x),
       [topological_ordering(?p,[$(?x)|?wF1]) by 
         lemma(topological_ordering:variable),
	topological_ordering(?p,[?t2|?wF1]),
	topological_ordering(?p,?wF3) & roots_termL(?t1L,?p,?wF3),
	sub([?t2|?wF1],?wF3) by lemma(cycle_freeL:sub),
	succeeds member(?t2,[?t2|?wF1]) by sld,
	all x: succeeds member(?x,[?t2|?wF1]) => succeeds member(?x,?wF3) by
	 elimination(sub,2),
	succeeds member(?t2,?wF3),
	root_term(?t1,?p,?wF3) by introduction(root_term,3),
	roots_termL([?t1|?t1L],?p,?wF3) by lemma(roots_termL:cons)],
       topological_ordering(?p,?wF3) & roots_termL([?t1|?t1L],?p,?wF3))],
     topological_ordering(?p,?wF3) & roots_termL([?t1|?t1L],?p,?wF3)),
    succeeds partition(?p) & topological_ordering(?p,?wF1) => 
     topological_ordering(?p,?wF3) & roots_termL([?t1|?t1L],?p,?wF3)),
   step([t1,t1L,p,c,wF1,wF3,t2,f,t2L,wF2],
    [succeeds partition(?p) & topological_ordering(?p,?wF1) => 
      topological_ordering(?p,?wF2) & roots_termL(?t2L,?p,?wF2),
     succeeds partition(?p) & topological_ordering(?p,[?t2|?wF2]) => 
      topological_ordering(?p,?wF3) & roots_termL(?t1L,?p,?wF3),
     succeeds find(?p,?t1,?t2),
     fails member_check(?t2,?c),
     fails member_check(?t2,?wF1),
     fails var_form(?t2),
     ?t2 = [?f|?t2L],
     succeeds cycle_freeL(?t2L,?p,[?t2|?c],?wF1,?wF2),
     succeeds cycle_freeL(?t1L,?p,?c,[?t2|?wF2],?wF3)],
    assume(succeeds partition(?p) & topological_ordering(?p,?wF1),
     [topological_ordering(?p,?wF2) & roots_termL(?t2L,?p,?wF2),
      topological_ordering(?p,[[?f|?t2L]|?wF2]) by 
       lemma(topological_ordering:compound),
      topological_ordering(?p,[?t2|?wF2]),
      topological_ordering(?p,?wF3) & roots_termL(?t1L,?p,?wF3),
      sub([?t2|?wF2],?wF3) by lemma(cycle_freeL:sub),
      succeeds member(?t2,[?t2|?wF2]) by sld,
      all x: succeeds member(?x,[?t2|?wF2]) => succeeds member(?x,?wF3) by
       elimination(sub,2),
      succeeds member(?t2,?wF3),
      root_term(?t1,?p,?wF3) by introduction(root_term,3),
      roots_termL([?t1|?t1L],?p,?wF3) by lemma(roots_termL:cons)],
     topological_ordering(?p,?wF3) & roots_termL([?t1|?t1L],?p,?wF3)),
    succeeds partition(?p) & topological_ordering(?p,?wF1) => 
     topological_ordering(?p,?wF3) & roots_termL([?t1|?t1L],?p,?wF3))]),
 assume(succeeds cycle_freeL(?tl,?p,?c,?wf1,?wf2) & succeeds partition(?p) &
  topological_ordering(?p,?wf1),
  [succeeds partition(?p) & topological_ordering(?p,?wf1) => 
    topological_ordering(?p,?wf2) & roots_termL(?tl,?p,?wf2),
   succeeds partition(?p) & topological_ordering(?p,?wf1) => 
    topological_ordering(?p,?wf2) & roots_termL(?tl,?p,?wf2),
   topological_ordering(?p,?wf2) & roots_termL(?tl,?p,?wf2)],
  topological_ordering(?p,?wf2) & roots_termL(?tl,?p,?wf2))]
).

:- lemma(topological_ordering:nil,
all p: topological_ordering(?p,[]),
[assume(succeeds append(?l1,[[?f|?tl]|?l2],[]),
  [def succeeds append(?l1,[[?f|?tl]|?l2],[]) by completion,ff],
  roots_termL(?tl,?p,?l2)),
 topological_ordering(?p,[]) by introduction(topological_ordering,2)]
).

:- lemma(roots:class,
all [p,tl,t]: succeeds roots(?p,?tl) & succeeds member(?t,?tl) =>
  (ex q: succeeds member(cl(?t,?q),?p)),
[induction(
  [all [p,tl]: succeeds roots(?p,?tl) => 
     (all t: succeeds member(?t,?tl) => 
        (ex q: succeeds member(cl(?t,?q),?p)))],
  [step([],
    [],
    assume(succeeds member(?t,[]),
     [def succeeds member(?t,[]) by completion,ff],
     ex q: succeeds member(cl(?t,?q),[])),
    all t: succeeds member(?t,[]) => (ex q: succeeds member(cl(?t,?q),[]))),
   step([t,0,p,tL],
    [all t: succeeds member(?t,?tL) => 
       (ex q: succeeds member(cl(?t,?q),?p)),
     succeeds roots(?p,?tL)],
    assume(succeeds member(?t1,[?t|?tL]),
     [def succeeds member(?t1,[?t|?tL]) by completion,
      cases(?t1 = ?t,
       [succeeds member(cl(?t,?0),[cl(?t,?0)|?p]) by sld,
	succeeds member(cl(?t1,?0),[cl(?t,?0)|?p]),
	ex q: succeeds member(cl(?t1,?q),[cl(?t,?0)|?p])],
       succeeds member(?t1,?tL),
       [ex q: succeeds member(cl(?t1,?q),?p),
	exist(q,
         succeeds member(cl(?t1,?q),?p),
         [succeeds member(cl(?t1,?q),[cl(?t,?0)|?p]) by sld,
	  ex q: succeeds member(cl(?t1,?q),[cl(?t,?0)|?p])],
         ex q: succeeds member(cl(?t1,?q),[cl(?t,?0)|?p]))],
       ex q: succeeds member(cl(?t1,?q),[cl(?t,?0)|?p]))],
     ex q: succeeds member(cl(?t1,?q),[cl(?t,?0)|?p])),
    all t1: succeeds member(?t1,[?t|?tL]) => 
      (ex q: succeeds member(cl(?t1,?q),[cl(?t,?0)|?p])))]),
 assume(succeeds roots(?p,?tl) & succeeds member(?t,?tl),
  [all t: succeeds member(?t,?tl) => (ex q: succeeds member(cl(?t,?q),?p)),
   succeeds member(?t,?tl) => (ex q: succeeds member(cl(?t,?q),?p)),
   ex q: succeeds member(cl(?t,?q),?p)],
  ex q: succeeds member(cl(?t,?q),?p))]
).

:- lemma(roots:find,
all [p,t]: succeeds partition(?p) & succeeds member(?t,roots(?p)) =>
  succeeds find(?p,?t,?t),
assume(succeeds partition(?p) & succeeds member(?t,roots(?p)),
 [succeeds roots(?p,roots(?p)) by existence(roots,1),
  ex q: succeeds member(cl(?t,?q),?p) by lemma(roots:class),
  exist(q,
   succeeds member(cl(?t,?q),?p),
   [succeeds class_member(?t,cl(?t,?q)) by sld,
    cl(?t,?q) = cl(?t,?q),
    succeeds find(?p,?t,?t) by lemma(find:characterization:2)],
   succeeds find(?p,?t,?t))],
 succeeds find(?p,?t,?t))
).

:- lemma(roots:roots_termL,
all [p,l]: succeeds partition(?p) & roots_termL(roots(?p),?p,?l) =>
  sub(roots(?p),?l),
assume(succeeds partition(?p) & roots_termL(roots(?p),?p,?l),
 [all [t1,t2]: succeeds member(?t1,roots(?p)) & succeeds find(?p,?t1,?t2) =>
    succeeds member(?t2,?l) by elimination(roots_termL,3),
  assume(succeeds member(?x,roots(?p)),
   [succeeds find(?p,?x,?x) by lemma(roots:find),
    succeeds member(?x,?l)],
   succeeds member(?x,?l)),
  sub(roots(?p),?l) by introduction(sub,2)],
 sub(roots(?p),?l))
).

:- theorem(cycle_free:topological_ordering,
all p: succeeds partition(?p) & succeeds cycle_free(?p) =>
  (ex l: topological_ordering(?p,?l) & sub(roots(?p),?l)),
assume(succeeds partition(?p) & succeeds cycle_free(?p),
 [def succeeds cycle_free(?p) by completion,
  exist([tl,l],
   succeeds roots(?p,?tl) & succeeds cycle_freeL(?tl,?p,[],[],?l),
   [?tl = roots(?p) by uniqueness(roots,1),
    topological_ordering(?p,[]) by lemma(topological_ordering:nil),
    topological_ordering(?p,?l) & roots_termL(?tl,?p,?l) by 
     lemma(cycle_freeL:topological_ordering),
    roots_termL(roots(?p),?p,?l),
    sub(roots(?p),?l) by lemma(roots:roots_termL),
    ex l: topological_ordering(?p,?l) & sub(roots(?p),?l)],
   ex l: topological_ordering(?p,?l) & sub(roots(?p),?l))],
 ex l: topological_ordering(?p,?l) & sub(roots(?p),?l))
).

:- lemma(topological_ordering:length,
all [t,f,tl,p,l1]: succeeds partition(?p) &
 topological_ordering(?p,?l1) & root_term(?t,?p,?l1) &
 succeeds find(?p,?t,[?f|?tl]) =>
  (ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
    succeeds lh(?l2) @< lh(?l1)),
assume(succeeds partition(?p) & topological_ordering(?p,?l1) &
 root_term(?t,?p,?l1) &
 succeeds find(?p,?t,[?f|?tl]),
 [ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l1) by 
   elimination(root_term,3),
  exist(t2,
   succeeds find(?p,?t,?t2) & succeeds member(?t2,?l1),
   [?t2 = [?f|?tl] by lemma(find:uniqueness),
    ex [o1,o2]: succeeds append(?o1,[?t2|?o2],?l1) by 
     lemma(member:append),
    exist([o1,o2],
     succeeds append(?o1,[?t2|?o2],?l1),
     [succeeds append(?o1,[[?f|?tl]|?o2],?l1),
      succeeds list(?l1) &
      (all [0,l2,f,tl]: succeeds append(?0,[[?f|?tl]|?l2],?l1) => 
	 roots_termL(?tl,?p,?l2)) by elimination(topological_ordering,2),
      roots_termL(?tl,?p,?o2),
      succeeds list(?o1) & succeeds list([?t2|?o2]) by 
       lemma(append:types:4),
      ?l1 = ?o1 ** [?t2|?o2] by uniqueness(**,2),
      ?o1 ** [?t2|?o2] = ?o1 ** [?t2] ** ?o2 by concatenation,
      succeeds list(?o1 ** [?t2]) by corollary(app:types:1),
      succeeds append(?o1 ** [?t2],?o2,?o1 ** [?t2] ** ?o2) by 
       existence(**,2),
      ?l1 = ?o1 ** [?t2] ** ?o2,
      succeeds append(?o1 ** [?t2],?o2,?l1),
      topological_ordering(?p,?o2) by lemma(topological_ordering:suffix),
      def succeeds list([?t2|?o2]) by completion,
      lh([?t2|?o2]) = s(lh(?o2)) by corollary(lh:cons),
      succeeds nat(lh(?o2)) by corollary(lh:types),
      succeeds lh(?o2) @< s(lh(?o2)) by lemma(less:one),
      succeeds lh(?o2) @< lh([?t2|?o2]),
      succeeds lh([?t2|?o2]) @=< lh(?o1 ** [?t2|?o2]) by 
       corollary(app:lh:leq:second),
      succeeds lh([?t2|?o2]) @=< lh(?l1),
      succeeds lh(?o2) @< lh(?l1) by theorem(less:leq:transitive),
      ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
       succeeds lh(?l2) @< lh(?l1)],
     ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
      succeeds lh(?l2) @< lh(?l1))],
   ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
    succeeds lh(?l2) @< lh(?l1))],
 ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
  succeeds lh(?l2) @< lh(?l1))
).

:- lemma(roots_termL:root_term,
all [t,tl,p,l]: succeeds partition(?p) & succeeds term(?t) &
 roots_termL([?t|?tl],?p,?l) => root_term(?t,?p,?l),
assume(succeeds partition(?p) & succeeds term(?t) &
 roots_termL([?t|?tl],?p,?l),
 [all [t1,t2]: succeeds member(?t1,[?t|?tl]) & succeeds find(?p,?t1,?t2) =>
    succeeds member(?t2,?l) by elimination(roots_termL,3),
  ex t2: succeeds find(?p,?t,?t2) by lemma(find:existence),
  exist(t2,
   succeeds find(?p,?t,?t2),
   [succeeds member(?t,[?t|?tl]) by sld,
    succeeds member(?t2,?l),
    ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l)],
   ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l)),
  root_term(?t,?p,?l) by introduction(root_term,3)],
 root_term(?t,?p,?l))
).

:- lemma(partition_term:partition_termL:termination,
all [n,p,l]: succeeds nat(?n) & succeeds partition(?p) &
 topological_ordering(?p,?l) & succeeds lh(?l) @< ?n =>
  (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) =>
     terminates partition_term(?t1,?p,?t3)) &
  (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) =>
     terminates partition_termL(?tl1,?p,?tl2)),
[induction(
  [all n: succeeds nat(?n) => 
     (all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
       succeeds lh(?l) @< ?n => 
        (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
           terminates partition_term(?t1,?p,?t3)) &
        (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
           terminates partition_termL(?tl1,?p,?tl2)))],
  [step([],
    [],
    assume(succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< 0,
     [def succeeds lh(?l) @< 0 by completion,ff],
     (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        terminates partition_term(?t1,?p,?t3)) &
     (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
        terminates partition_termL(?tl1,?p,?tl2))),
    all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< 0 => 
      (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
         terminates partition_term(?t1,?p,?t3)) &
      (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
         terminates partition_termL(?tl1,?p,?tl2))),
   step([n],
    [all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
      succeeds lh(?l) @< ?n => 
       (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
          terminates partition_term(?t1,?p,?t3)) &
       (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
          terminates partition_termL(?tl1,?p,?tl2)),
     succeeds nat(?n)],
    assume(succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< s(?n),
     [assume(succeeds term(?t1) & root_term(?t1,?p,?l),
       [gr(?t1) by corollary(term:gr),
	terminates find(?p,?t1,?t2) by lemma(find:termination),
	assume(succeeds find(?p,?t1,?t2),
	 [succeeds term(?t2) by lemma(find:types),
	  gr(?t2) by corollary(term:gr),
          assume(?t2 = [?tag|?t1L],
	   [succeeds find(?p,?t1,[?tag|?t1L]),
	    ex l2: topological_ordering(?p,?l2) & roots_termL(?t1L,?p,?l2) &
             succeeds lh(?l2) @< lh(?l) by 
             lemma(topological_ordering:length),
	    exist(l2,
             topological_ordering(?p,?l2) & roots_termL(?t1L,?p,?l2) &
             succeeds lh(?l2) @< lh(?l),
             [succeeds lh(?l2) @< ?n by 
               lemma(less:transitive:successor),
	      (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l2) => 
		 terminates partition_term(?t1,?p,?t3)) &
	      (all [tl1,tl2]: succeeds termL(?tl1) &
		roots_termL(?tl1,?p,?l2) => 
		 terminates partition_termL(?tl1,?p,?tl2)),
	      def succeeds term([?tag|?t1L]) by completion,
	      succeeds termL(?t1L),
	      terminates partition_termL(?t1L,?p,?t2L)],
             terminates partition_termL(?t1L,?p,?t2L)),
            terminates (partition_termL(?t1L,?p,?t2L) & ?t3 = [?tag|?t2L])],
	   terminates (partition_termL(?t1L,?p,?t2L) & ?t3 = [?tag|?t2L])),
	  terminates 
	  (?t2 = [?tag|?t1L] & partition_termL(?t1L,?p,?t2L) &
	   ?t3 = [?tag|?t2L]),
          terminates 
          (~ var_form(?t2) & ?t2 = [?tag|?t1L] &
           partition_termL(?t1L,?p,?t2L) & ?t3 = [?tag|?t2L])],
	 terminates (var_form(?t2) & ?t3 = ?t2) &
	 terminates 
	 (~ var_form(?t2) & ?t2 = [?tag|?t1L] &
	  partition_termL(?t1L,?p,?t2L) & ?t3 = [?tag|?t2L])),
	terminates 
	(find(?p,?t1,?t2) &
	 (var_form(?t2) & ?t3 = ?t2 \/
	  ~ var_form(?t2) & ?t2 = [?tag|?t1L] &
	  partition_termL(?t1L,?p,?t2L) & ?t3 = [?tag|?t2L])),
        all [t2,tag,t1L,t2L]: 
         terminates 
         (find(?p,?t1,?t2) &
          (var_form(?t2) & ?t3 = ?t2 \/
           ~ var_form(?t2) & ?t2 = [?tag|?t1L] &
           partition_termL(?t1L,?p,?t2L) & ?t3 = [?tag|?t2L])),
        terminates partition_term(?t1,?p,?t3) by completion],
       terminates partition_term(?t1,?p,?t3)),
      all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        terminates partition_term(?t1,?p,?t3),
      induction(
       [all tl1: succeeds termL(?tl1) => 
	  (all tl2: roots_termL(?tl1,?p,?l) => 
	     terminates partition_termL(?tl1,?p,?tl2))],
       [step([],
	 [],
	 roots_termL([],?p,?l) => terminates partition_termL([],?p,?tl2),
	 all tl2: roots_termL([],?p,?l) => 
	   terminates partition_termL([],?p,?tl2)),
	step([t,tL],
	 [all tl2: roots_termL(?tL,?p,?l) => 
	    terminates partition_termL(?tL,?p,?tl2),
	  succeeds term(?t),
	  succeeds termL(?tL)],
	 assume(roots_termL([?t|?tL],?p,?l),
	  [assume(?tl2 = [?t2|?t2L],
            [root_term(?t,?p,?l) by lemma(roots_termL:root_term),
	     terminates partition_term(?t,?p,?t2),
	     roots_termL(?tL,?p,?l) by lemma(roots_termL:tail),
             terminates partition_termL(?tL,?p,?t2L),
             terminates 
             (partition_term(?t,?p,?t2) & partition_termL(?tL,?p,?t2L))],
            terminates 
            (partition_term(?t,?p,?t2) & partition_termL(?tL,?p,?t2L))),
           all [t2,t2L]: ?tl2 = [?t2|?t2L] => 
             terminates 
             (partition_term(?t,?p,?t2) & partition_termL(?tL,?p,?t2L)),
           terminates partition_termL([?t|?tL],?p,?tl2) by completion],
	  terminates partition_termL([?t|?tL],?p,?tl2)),
	 all tl2: roots_termL([?t|?tL],?p,?l) => 
	   terminates partition_termL([?t|?tL],?p,?tl2))]),
      assume(succeeds termL(?tl1) & roots_termL(?tl1,?p,?l),
       [all tl2: roots_termL(?tl1,?p,?l) => 
	  terminates partition_termL(?tl1,?p,?tl2),
	roots_termL(?tl1,?p,?l) => 
	 terminates partition_termL(?tl1,?p,?tl2),
	terminates partition_termL(?tl1,?p,?tl2)],
       terminates partition_termL(?tl1,?p,?tl2))],
     (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        terminates partition_term(?t1,?p,?t3)) &
     (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
        terminates partition_termL(?tl1,?p,?tl2))),
    all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< s(?n) => 
      (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
         terminates partition_term(?t1,?p,?t3)) &
      (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
         terminates partition_termL(?tl1,?p,?tl2)))]),
 assume(succeeds nat(?n) & succeeds partition(?p) &
  topological_ordering(?p,?l) & succeeds lh(?l) @< ?n,
  [all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
    succeeds lh(?l) @< ?n => 
     (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        terminates partition_term(?t1,?p,?t3)) &
     (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
        terminates partition_termL(?tl1,?p,?tl2)),
   succeeds partition(?p) & topological_ordering(?p,?l) &
   succeeds lh(?l) @< ?n => 
    (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
       terminates partition_term(?t1,?p,?t3)) &
    (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
       terminates partition_termL(?tl1,?p,?tl2)),
   (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
      terminates partition_term(?t1,?p,?t3)) &
   (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
      terminates partition_termL(?tl1,?p,?tl2))],
  (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
     terminates partition_term(?t1,?p,?t3)) &
  (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
     terminates partition_termL(?tl1,?p,?tl2)))]
).

:- lemma(roots:root_term:sub,
all [p,t,l]: succeeds partition(?p) & succeeds partition_member(?t,?p) &
 sub(roots(?p),?l) => root_term(?t,?p,?l),
assume(succeeds partition(?p) & succeeds partition_member(?t,?p) &
 sub(roots(?p),?l),
 [succeeds term(?t) by corollary(partition_member:types),
  ex t2: succeeds find(?p,?t,?t2) by lemma(find:existence),
  exist(t2,
   succeeds find(?p,?t,?t2),
   [(ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t,?c) &
      ?c = cl(?t2,?q)) \/ fails partition_member(?t,?p) & ?t = ?t2 by 
     lemma(find:characterization:1),
    cases(
     ex [c,q]: succeeds member(?c,?p) & succeeds class_member(?t,?c) &
      ?c = cl(?t2,?q),
     exist([c,q],
      succeeds member(?c,?p) & succeeds class_member(?t,?c) &
      ?c = cl(?t2,?q),
      [succeeds member(cl(?t2,?q),?p),
       succeeds member(?t2,roots(?p)) by corollary(roots:member),
       all x: succeeds member(?x,roots(?p)) => succeeds member(?x,?l) by 
	elimination(sub,2),
       succeeds member(?t2,?l),
       ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l)],
      ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l)),
     fails partition_member(?t,?p) & ?t = ?t2,
     [],
     ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l))],
   ex t2: succeeds find(?p,?t,?t2) & succeeds member(?t2,?l)),
  root_term(?t,?p,?l) by introduction(root_term,3)],
 root_term(?t,?p,?l))
).

:- theorem(partition_term:termination,
all [t1,p,t2]: succeeds term(?t1) & succeeds partition(?p) &
 succeeds cycle_free(?p) & succeeds partition_member(?t1,?p) =>
  terminates partition_term(?t1,?p,?t2),
assume(succeeds term(?t1) & succeeds partition(?p) & 
 succeeds cycle_free(?p) & succeeds partition_member(?t1,?p),
 [ex l: topological_ordering(?p,?l) & sub(roots(?p),?l) by 
   theorem(cycle_free:topological_ordering),
  exist(l,
   topological_ordering(?p,?l) & sub(roots(?p),?l),
   [root_term(?t1,?p,?l) by lemma(roots:root_term:sub),
    succeeds list(?l) &
    (all [l1,l2,f,tl]: succeeds append(?l1,[[?f|?tl]|?l2],?l) => 
       roots_termL(?tl,?p,?l2)) by elimination(topological_ordering,2),
    succeeds nat(lh(?l)) by corollary(lh:types),
    succeeds lh(?l) @< s(lh(?l)) by lemma(less:one),
    succeeds nat(s(lh(?l))) by sld,
    (all [t1,t3]: succeeds term(?t1) & root_term(?t1,?p,?l) => 
       terminates partition_term(?t1,?p,?t3)) &
    (all [tl1,tl2]: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
       terminates partition_termL(?tl1,?p,?tl2)) by 
     lemma(partition_term:partition_termL:termination),
    terminates partition_term(?t1,?p,?t2)],
   terminates partition_term(?t1,?p,?t2))],
 terminates partition_term(?t1,?p,?t2))
).

:- definition_pred(subset_class,2,
all [c,p]: subset_class(?c,?p) <=>
 (all t: succeeds class_member(?t,?c) => succeeds partition_member(?t,?p))
).

:- definition_pred(subset_partition,2,
all [p1,p2]: subset_partition(?p1,?p2) <=>
 (all t: succeeds partition_member(?t,?p1) =>
    succeeds partition_member(?t,?p2))
).

:- lemma(subset_partition:partition,
all [c,p1,p2]: subset_partition([?c|?p1],?p2) =>
  subset_class(?c,?p2) & subset_partition(?p1,?p2),
assume(subset_partition([?c|?p1],?p2),
 [all t: succeeds partition_member(?t,[?c|?p1]) => 
    succeeds partition_member(?t,?p2) by elimination(subset_partition,2),
  assume(succeeds class_member(?t,?c),
   [],
   succeeds partition_member(?t,?p2)),
  subset_class(?c,?p2) by introduction(subset_class,2),
  assume(succeeds partition_member(?t,?p1),
   [],
   succeeds partition_member(?t,?p2)),
  subset_partition(?p1,?p2) by introduction(subset_partition,2)],
 subset_class(?c,?p2) & subset_partition(?p1,?p2))
).

:- lemma(subset_class:class,
all [t,p1,p2]: subset_class(cl(?t,?p1),?p2) =>
  subset_partition(?p1,?p2),
assume(subset_class(cl(?t,?p1),?p2),
 [all 0: succeeds class_member(?0,cl(?t,?p1)) => 
    succeeds partition_member(?0,?p2) by elimination(subset_class,2),
  assume(succeeds partition_member(?0,?p1),
   [],
   succeeds partition_member(?0,?p2)),
  all 0: succeeds partition_member(?0,?p1) => 
    succeeds partition_member(?0,?p2),
  subset_partition(?p1,?p2) by introduction(subset_partition,2)],
 subset_partition(?p1,?p2))
).

:- lemma(class_sub:partition_sub:termination,
all p2: succeeds partition(?p2) & succeeds cycle_free(?p2) =>
  (all c: succeeds class(?c) => subset_class(?c,?p2) =>
     (all [s1,s2]: terminates class_sub(?c,?p2,?s1,?s2))) &
  (all p1: succeeds partition(?p1) => subset_partition(?p1,?p2) =>
     (all [s1,s2]: terminates partition_sub(?p1,?p2,?s1,?s2))),
assume(succeeds partition(?p2) & succeeds cycle_free(?p2),
 induction(
  [all c: succeeds class(?c) => subset_class(?c,?p2) => 
      (all [s1,s2]: terminates class_sub(?c,?p2,?s1,?s2)),
   all p1: succeeds partition(?p1) => subset_partition(?p1,?p2) => 
      (all [s1,s2]: terminates partition_sub(?p1,?p2,?s1,?s2))],
  [step([t,p],
    [subset_partition(?p,?p2) => 
      (all [s1,s2]: terminates partition_sub(?p,?p2,?s1,?s2)),
     succeeds term(?t),
     succeeds partition(?p),
     fails partition_member(?t,?p),
     fails not_var_class(?t,?p)],
    assume(subset_class(cl(?t,?p),?p2),
     [subset_partition(?p,?p2) by lemma(subset_class:class),
      all [s1,s2]: terminates partition_sub(?p,?p2,?s1,?s2),
      assume(?t = $(?x),
       [succeeds class_member(?t,cl(?t,?p)) by sld,
	succeeds class_member($(?x),cl(?t,?p)),
	all 0: succeeds class_member(?0,cl(?t,?p)) => 
	  succeeds partition_member(?0,?p2) by elimination(subset_class,2),
	succeeds partition_member($(?x),?p2),
	terminates partition_term($(?x),?p2,?3) by 
         theorem(partition_term:termination),
	terminates partition_sub(?p,?p2,[bind(?x,?3)|?s1],?s2),
	terminates 
	(partition_term($(?x),?p2,?3) &
	 partition_sub(?p,?p2,[bind(?x,?3)|?s1],?s2))],
       terminates 
       (partition_term($(?x),?p2,?3) &
        partition_sub(?p,?p2,[bind(?x,?3)|?s1],?s2))),
      assume(?t = [?0|?1],
       [terminates partition_sub(?p,?p2,?s1,?s2)],
       terminates partition_sub(?p,?p2,?s1,?s2)),
      (all [x,3]: ?t = $(?x) => 
         terminates 
         (partition_term($(?x),?p2,?3) &
          partition_sub(?p,?p2,[bind(?x,?3)|?s1],?s2))) &
      (all [0,1]: ?t = [?0|?1] => terminates partition_sub(?p,?p2,?s1,?s2)),
      terminates class_sub(cl(?t,?p),?p2,?s1,?s2) by completion],
     all [s1,s2]: terminates class_sub(cl(?t,?p),?p2,?s1,?s2)),
    subset_class(cl(?t,?p),?p2) => 
     (all [s1,s2]: terminates class_sub(cl(?t,?p),?p2,?s1,?s2))),
   step([],
    [],
    assume(subset_partition([],?p2),
     terminates partition_sub([],?p2,?s1,?s2),
     all [s1,s2]: terminates partition_sub([],?p2,?s1,?s2)),
    subset_partition([],?p2) => 
     (all [s1,s2]: terminates partition_sub([],?p2,?s1,?s2))),
   step([c,p],
    [subset_class(?c,?p2) => 
      (all [s1,s2]: terminates class_sub(?c,?p2,?s1,?s2)),
     subset_partition(?p,?p2) => 
      (all [s1,s2]: terminates partition_sub(?p,?p2,?s1,?s2)),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(subset_partition([?c|?p],?p2),
     [subset_class(?c,?p2) & subset_partition(?p,?p2) by 
       lemma(subset_partition:partition),
      all [s1,s2]: terminates class_sub(?c,?p2,?s1,?s2),
      terminates class_sub(?c,?p2,?s1,?3),
      all [s1,s2]: terminates partition_sub(?p,?p2,?s1,?s2),
      terminates partition_sub(?p,?p2,?3,?s2),
      terminates (class_sub(?c,?p2,?s1,?3) & partition_sub(?p,?p2,?3,?s2)),
      all 3: 
       terminates (class_sub(?c,?p2,?s1,?3) & partition_sub(?p,?p2,?3,?s2)),
      terminates partition_sub([?c|?p],?p2,?s1,?s2) by completion],
     all [s1,s2]: terminates partition_sub([?c|?p],?p2,?s1,?s2)),
    subset_partition([?c|?p],?p2) => 
     (all [s1,s2]: terminates partition_sub([?c|?p],?p2,?s1,?s2)))]),
 (all c: succeeds class(?c) => subset_class(?c,?p2) => 
     (all [s1,s2]: terminates class_sub(?c,?p2,?s1,?s2))) &
 (all p1: succeeds partition(?p1) => subset_partition(?p1,?p2) => 
     (all [s1,s2]: terminates partition_sub(?p1,?p2,?s1,?s2))))
).

:- lemma(subset_partition:reflexive,
all p: subset_partition(?p,?p),
[succeeds partition_member(?t,?p) => succeeds partition_member(?t,?p),
 subset_partition(?p,?p) by introduction(subset_partition,2)]
).

:- theorem(partition_sub:termination,
all [p,s]: succeeds partition(?p) & succeeds cycle_free(?p) =>
  terminates partition_sub(?p,?p,[],?s),
assume(succeeds partition(?p) & succeeds cycle_free(?p),
 [subset_partition(?p,?p) by lemma(subset_partition:reflexive),
  (all c: succeeds class(?c) => subset_class(?c,?p) => 
      (all [s1,s2]: terminates class_sub(?c,?p,?s1,?s2))) &
  (all p1: succeeds partition(?p1) => subset_partition(?p1,?p) => 
      (all [s1,s2]: terminates partition_sub(?p1,?p,?s1,?s2))) by 
   lemma(class_sub:partition_sub:termination),
  subset_partition(?p,?p) => 
   (all [s1,s2]: terminates partition_sub(?p,?p,?s1,?s2)),
  all [s1,s2]: terminates partition_sub(?p,?p,?s1,?s2),
  terminates partition_sub(?p,?p,[],?s)],
 terminates partition_sub(?p,?p,[],?s))
).

:- theorem(unify_terms_sub:termination,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) =>
  terminates unify_terms_sub(?t1,?t2,?s),
assume(succeeds term(?t1) & succeeds term(?t2),
 [terminates unify_terms_part(?t1,?t2,?p) by 
   theorem(unify_terms_part:termination),
  assume(succeeds unify_terms_part(?t1,?t2,?p),
   [def succeeds unify_terms_part(?t1,?t2,?p) by completion,
    succeeds partition(?p) by corollary(unify_terms_part:types),
    terminates partition_sub(?p,?p,[],?s) by 
     theorem(partition_sub:termination)],
   terminates partition_sub(?p,?p,[],?s)),
  terminates (unify_terms_part(?t1,?t2,?p) & partition_sub(?p,?p,[],?s)),
  all p: 
   terminates (unify_terms_part(?t1,?t2,?p) & partition_sub(?p,?p,[],?s)),
  terminates unify_terms_sub(?t1,?t2,?s) by completion],
 terminates unify_terms_sub(?t1,?t2,?s))
).

:- lemma(partition_term:partition_termL:success,
all [n,p,l]: succeeds nat(?n) & succeeds partition(?p) &
 topological_ordering(?p,?l) & succeeds lh(?l) @< ?n =>
  (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) =>
     (ex t3: succeeds partition_term(?t1,?p,?t3))) &
  (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) =>
     (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
[induction(
  [all n: succeeds nat(?n) => 
     (all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
       succeeds lh(?l) @< ?n => 
        (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
           (ex t3: succeeds partition_term(?t1,?p,?t3))) &
        (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
           (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))))],
  [step([],
    [],
    assume(succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< 0,
     [def succeeds lh(?l) @< 0 by completion,ff],
     (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        (ex t3: succeeds partition_term(?t1,?p,?t3))) &
     (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
        (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))),
    all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< 0 => 
      (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
         (ex t3: succeeds partition_term(?t1,?p,?t3))) &
      (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
         (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))),
   step([n],
    [all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
      succeeds lh(?l) @< ?n => 
       (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
          (ex t3: succeeds partition_term(?t1,?p,?t3))) &
       (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
          (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
     succeeds nat(?n)],
    assume(succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< s(?n),
     [assume(succeeds term(?t1) & root_term(?t1,?p,?l),
       [ex t2: succeeds find(?p,?t1,?t2) by lemma(find:existence),
	exist(t2,
         succeeds find(?p,?t1,?t2),
         [succeeds term(?t2) by lemma(find:types),
	  def succeeds term(?t2) by completion,
	  cases(ex x: ?t2 = $(?x) & succeeds atomic(?x),
	   exist(x,
	    ?t2 = $(?x) & succeeds atomic(?x),
	    [succeeds var_form($(?x)) by sld,
	     $(?x) = $(?x),
	     succeeds find(?p,?t1,$(?x)),
	     succeeds partition_term(?t1,?p,$(?x)) by sld,
	     ex t3: succeeds partition_term(?t1,?p,?t3)],
	    ex t3: succeeds partition_term(?t1,?p,?t3)),
	   ex [x,tL]: ?t2 = [?x|?tL] & succeeds atomic(?x) &
	    succeeds termL(?tL),
	   exist([x,tL],
	    ?t2 = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
	    [fails var_form([?x|?tL]),
	     succeeds find(?p,?t1,[?x|?tL]),
	     ex l2: topological_ordering(?p,?l2) & roots_termL(?tL,?p,?l2) &
              succeeds lh(?l2) @< lh(?l) by 
              lemma(topological_ordering:length),
	     exist(l2,
              topological_ordering(?p,?l2) & roots_termL(?tL,?p,?l2) &
              succeeds lh(?l2) @< lh(?l),
              [succeeds lh(?l2) @< ?n by 
                lemma(less:transitive:successor),
	       (all t1: succeeds term(?t1) & root_term(?t1,?p,?l2) => 
		  (ex t3: succeeds partition_term(?t1,?p,?t3))) &
	       (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l2) => 
		  (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
	       ex tl2: succeeds partition_termL(?tL,?p,?tl2),
	       exist(tl2,
                succeeds partition_termL(?tL,?p,?tl2),
                [[?x|?tL] = [?x|?tL],
		 [?x|?tl2] = [?x|?tl2],
		 succeeds partition_term(?t1,?p,[?x|?tl2]) by sld,
		 ex t3: succeeds partition_term(?t1,?p,?t3)],
                ex t3: succeeds partition_term(?t1,?p,?t3))],
              ex t3: succeeds partition_term(?t1,?p,?t3))],
	    ex t3: succeeds partition_term(?t1,?p,?t3)),
	   ex t3: succeeds partition_term(?t1,?p,?t3))],
         ex t3: succeeds partition_term(?t1,?p,?t3))],
       ex t3: succeeds partition_term(?t1,?p,?t3)),
      all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        (ex t3: succeeds partition_term(?t1,?p,?t3)),
      induction(
       [all tl1: succeeds termL(?tl1) => roots_termL(?tl1,?p,?l) => 
	   (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))],
       [step([],
	 [],
	 assume(roots_termL([],?p,?l),
	  [succeeds partition_termL([],?p,[]) by sld,
	   ex tl2: succeeds partition_termL([],?p,?tl2)],
	  ex tl2: succeeds partition_termL([],?p,?tl2)),
	 roots_termL([],?p,?l) => 
	  (ex tl2: succeeds partition_termL([],?p,?tl2))),
	step([t,tL],
	 [roots_termL(?tL,?p,?l) => 
	   (ex tl2: succeeds partition_termL(?tL,?p,?tl2)),
	  succeeds term(?t),
	  succeeds termL(?tL)],
	 assume(roots_termL([?t|?tL],?p,?l),
	  [root_term(?t,?p,?l) by lemma(roots_termL:root_term),
	   roots_termL(?tL,?p,?l) by lemma(roots_termL:tail),
	   ex t3: succeeds partition_term(?t,?p,?t3),
	   exist(t3,
            succeeds partition_term(?t,?p,?t3),
            [ex tl2: succeeds partition_termL(?tL,?p,?tl2),
	     exist(tl2,
              succeeds partition_termL(?tL,?p,?tl2),
              [succeeds partition_termL([?t|?tL],?p,[?t3|?tl2]) by sld,
	       ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2)],
              ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2))],
            ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2))],
	  ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2)),
	 roots_termL([?t|?tL],?p,?l) => 
	  (ex tl2: succeeds partition_termL([?t|?tL],?p,?tl2)))]),
      assume(succeeds termL(?tl1) & roots_termL(?tl1,?p,?l),
       [roots_termL(?tl1,?p,?l) => 
	 (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)),
	roots_termL(?tl1,?p,?l) => 
	 (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)),
	ex tl2: succeeds partition_termL(?tl1,?p,?tl2)],
       ex tl2: succeeds partition_termL(?tl1,?p,?tl2))],
     (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        (ex t3: succeeds partition_term(?t1,?p,?t3))) &
     (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
        (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))),
    all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< s(?n) => 
      (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
         (ex t3: succeeds partition_term(?t1,?p,?t3))) &
      (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
         (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))))]),
 assume(succeeds nat(?n) & succeeds partition(?p) &
  topological_ordering(?p,?l) & succeeds lh(?l) @< ?n,
  [all [p,l]: succeeds partition(?p) & topological_ordering(?p,?l) &
    succeeds lh(?l) @< ?n => 
     (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
        (ex t3: succeeds partition_term(?t1,?p,?t3))) &
     (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
        (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
   succeeds partition(?p) & topological_ordering(?p,?l) &
   succeeds lh(?l) @< ?n => 
    (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
       (ex t3: succeeds partition_term(?t1,?p,?t3))) &
    (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
       (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))),
   (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
      (ex t3: succeeds partition_term(?t1,?p,?t3))) &
   (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
      (ex tl2: succeeds partition_termL(?tl1,?p,?tl2)))],
  (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
     (ex t3: succeeds partition_term(?t1,?p,?t3))) &
  (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
     (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))))]
).

:- theorem(partition_term:success,
all [t1,p]: succeeds term(?t1) & succeeds partition(?p) &
 succeeds cycle_free(?p) & succeeds partition_member(?t1,?p) =>
  (ex t2: succeeds partition_term(?t1,?p,?t2)),
assume(succeeds term(?t1) & succeeds partition(?p) & 
 succeeds cycle_free(?p) & succeeds partition_member(?t1,?p),
 [ex l: topological_ordering(?p,?l) & sub(roots(?p),?l) by 
   theorem(cycle_free:topological_ordering),
  exist(l,
   topological_ordering(?p,?l) & sub(roots(?p),?l),
   [root_term(?t1,?p,?l) by lemma(roots:root_term:sub),
    succeeds list(?l) &
    (all [l1,l2,f,tl]: succeeds append(?l1,[[?f|?tl]|?l2],?l) => 
       roots_termL(?tl,?p,?l2)) by elimination(topological_ordering,2),
    succeeds nat(lh(?l)) by corollary(lh:types),
    succeeds lh(?l) @< s(lh(?l)) by lemma(less:one),
    succeeds nat(s(lh(?l))) by sld,
    (all t1: succeeds term(?t1) & root_term(?t1,?p,?l) => 
       (ex t3: succeeds partition_term(?t1,?p,?t3))) &
    (all tl1: succeeds termL(?tl1) & roots_termL(?tl1,?p,?l) => 
       (ex tl2: succeeds partition_termL(?tl1,?p,?tl2))) by 
     lemma(partition_term:partition_termL:success), 
    ex t2: succeeds partition_term(?t1,?p,?t2)],
   ex t2: succeeds partition_term(?t1,?p,?t2))],
 ex t2: succeeds partition_term(?t1,?p,?t2))
).

:- lemma(class_sub:partition_sub:success,
all p2: succeeds partition(?p2) & succeeds cycle_free(?p2) =>
  (all c: succeeds class(?c) => subset_class(?c,?p2) =>
     (all s1: ex s2: succeeds class_sub(?c,?p2,?s1,?s2))) &
  (all p1: succeeds partition(?p1) => subset_partition(?p1,?p2) =>
     (all s1: ex s2: succeeds partition_sub(?p1,?p2,?s1,?s2))),
assume(succeeds partition(?p2) & succeeds cycle_free(?p2),
 induction(
  [all c: succeeds class(?c) => subset_class(?c,?p2) => 
      (all s1: ex s2: succeeds class_sub(?c,?p2,?s1,?s2)),
   all p1: succeeds partition(?p1) => subset_partition(?p1,?p2) => 
      (all s1: ex s2: succeeds partition_sub(?p1,?p2,?s1,?s2))],
  [step([t,p],
    [subset_partition(?p,?p2) => 
      (all s1: ex s2: succeeds partition_sub(?p,?p2,?s1,?s2)),
     succeeds term(?t),
     succeeds partition(?p),
     fails partition_member(?t,?p),
     fails not_var_class(?t,?p)],
    assume(subset_class(cl(?t,?p),?p2),
     [subset_partition(?p,?p2) by lemma(subset_class:class),
      all s1: ex s2: succeeds partition_sub(?p,?p2,?s1,?s2),
      def succeeds term(?t) by completion,
      cases(ex x: ?t = $(?x) & succeeds atomic(?x),
       exist(x,
        ?t = $(?x) & succeeds atomic(?x),
        [all 0: succeeds class_member(?0,cl(?t,?p)) => 
	   succeeds partition_member(?0,?p2) by 
	  elimination(subset_class,2),
	 succeeds partition_member(?t,?p2),
	 succeeds partition_member($(?x),?p2),
	 succeeds term($(?x)) by sld,
	 ex t: succeeds partition_term($(?x),?p2,?t) by 
          theorem(partition_term:success),
	 exist(t1,
          succeeds partition_term($(?x),?p2,?t1),
          [ex s2: succeeds partition_sub(?p,?p2,[bind(?x,?t1)|?s1],?s2),
	   exist(s2,
            succeeds partition_sub(?p,?p2,[bind(?x,?t1)|?s1],?s2),
            [succeeds class_sub(cl($(?x),?p),?p2,?s1,?s2) by sld,
	     succeeds class_sub(cl(?t,?p),?p2,?s1,?s2),
	     ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2)],
            ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2))],
          ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2))],
        ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2)),
       ex [x,tL]: ?t = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
       exist([x,tL],
        ?t = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
        [ex s2: succeeds partition_sub(?p,?p2,?s1,?s2),
	 exist(s2,
          succeeds partition_sub(?p,?p2,?s1,?s2),
          [succeeds class_sub(cl([?x|?tL],?p),?p2,?s1,?s2) by sld,
	   succeeds class_sub(cl(?t,?p),?p2,?s1,?s2),
	   ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2)],
          ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2))],
        ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2)),
       ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2))],
     all s1: ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2)),
    subset_class(cl(?t,?p),?p2) => 
     (all s1: ex s2: succeeds class_sub(cl(?t,?p),?p2,?s1,?s2))),
   step([],
    [],
    assume(subset_partition([],?p2),
     [succeeds partition_sub([],?p2,?s1,?s1) by sld,
      ex s2: succeeds partition_sub([],?p2,?s1,?s2)],
     all s1: ex s2: succeeds partition_sub([],?p2,?s1,?s2)),
    subset_partition([],?p2) => 
     (all s1: ex s2: succeeds partition_sub([],?p2,?s1,?s2))),
   step([c,p],
    [subset_class(?c,?p2) => 
      (all s1: ex s2: succeeds class_sub(?c,?p2,?s1,?s2)),
     subset_partition(?p,?p2) => 
      (all s1: ex s2: succeeds partition_sub(?p,?p2,?s1,?s2)),
     succeeds class(?c),
     succeeds partition(?p),
     succeeds disjoint(?c,?p)],
    assume(subset_partition([?c|?p],?p2),
     [subset_class(?c,?p2) & subset_partition(?p,?p2) by 
       lemma(subset_partition:partition),
      all s1: ex s2: succeeds class_sub(?c,?p2,?s1,?s2),
      all s1: ex s2: succeeds partition_sub(?p,?p2,?s1,?s2),
      ex s2: succeeds class_sub(?c,?p2,?s1,?s2),
      exist(s2,
       succeeds class_sub(?c,?p2,?s1,?s2),
       [ex s3: succeeds partition_sub(?p,?p2,?s2,?s3),
	exist(s3,
         succeeds partition_sub(?p,?p2,?s2,?s3),
         [succeeds partition_sub([?c|?p],?p2,?s1,?s3) by sld,
	  ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2)],
         ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2))],
       ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2))],
     all s1: ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2)),
    subset_partition([?c|?p],?p2) => 
     (all s1: ex s2: succeeds partition_sub([?c|?p],?p2,?s1,?s2)))]),
 (all c: succeeds class(?c) => subset_class(?c,?p2) => 
     (all s1: ex s2: succeeds class_sub(?c,?p2,?s1,?s2))) &
 (all p1: succeeds partition(?p1) => subset_partition(?p1,?p2) => 
     (all s1: ex s2: succeeds partition_sub(?p1,?p2,?s1,?s2))))
).

:- theorem(partition_sub:success,
all p: succeeds partition(?p) & succeeds cycle_free(?p) =>
  (ex s: succeeds partition_sub(?p,?p,[],?s)),
assume(succeeds partition(?p) & succeeds cycle_free(?p),
 [(all c: succeeds class(?c) => subset_class(?c,?p) => 
      (all s1: ex s2: succeeds class_sub(?c,?p,?s1,?s2))) &
  (all p1: succeeds partition(?p1) => subset_partition(?p1,?p) => 
      (all s1: ex s2: succeeds partition_sub(?p1,?p,?s1,?s2))) by 
   lemma(class_sub:partition_sub:success),
  subset_partition(?p,?p) by lemma(subset_partition:reflexive),
  subset_partition(?p,?p) => 
   (all s1: ex s2: succeeds partition_sub(?p,?p,?s1,?s2)),
  all s1: ex s2: succeeds partition_sub(?p,?p,?s1,?s2),
  ex s: succeeds partition_sub(?p,?p,[],?s)],
 ex s: succeeds partition_sub(?p,?p,[],?s))
).

%-----------------------------------------------------------------------
% part10
%-----------------------------------------------------------------------

:- corollary(partition_sub:domain,
all [p,s,x]: succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds domain(?x,?s) => succeeds partition_member($(?x),?p),
assume(succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds domain(?x,?s),
 [all x: succeeds domain(?x,?s) => succeeds domain(?x,[]) \/
    succeeds partition_member($(?x),?p) by 
   lemma(class_sub:partition_sub:domain),
  succeeds domain(?x,[]) \/ succeeds partition_member($(?x),?p),
  cases(succeeds domain(?x,[]),
   [def succeeds domain(?x,[]) by completion,
    exist(0,
     succeeds member(bind(?x,?0),[]),
     [def succeeds member(bind(?x,?0),[]) by completion,ff],
     succeeds partition_member($(?x),?p))],
   succeeds partition_member($(?x),?p),
   [],
   succeeds partition_member($(?x),?p))],
 succeeds partition_member($(?x),?p))
).

:- lemma(class_sub:partition_sub:sub,
(all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) => sub(?s1,?s2)) &
(all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) => sub(?s1,?s2)),
induction(
 [all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) => sub(?s1,?s2),
  all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) => 
    sub(?s1,?s2)],
 [step([x,p1,p2,s1,s2,t],
   [sub([bind(?x,?t)|?s1],?s2),
    succeeds partition_term($(?x),?p2,?t),
    succeeds partition_sub(?p1,?p2,[bind(?x,?t)|?s1],?s2)],
   [assume(succeeds member(?0,?s1),
     all 0: succeeds member(?0,[bind(?x,?t)|?s1]) => 
       succeeds member(?0,?s2) by elimination(sub,2),
     succeeds member(?0,?s2)),
    all 0: succeeds member(?0,?s1) => succeeds member(?0,?s2),
    sub(?s1,?s2) by introduction(sub,2)],
   sub(?s1,?s2)),
  step([0,1,p1,p2,s1,s2],
   [sub(?s1,?s2),
    succeeds partition_sub(?p1,?p2,?s1,?s2)],
   [],
   sub(?s1,?s2)),
  step([0,s],
   [],
   sub(?s,?s) by lemma(sub:reflexive),
   sub(?s,?s)),
  step([c,p1,p2,s1,s3,s2],
   [sub(?s1,?s2),
    sub(?s2,?s3),
    succeeds class_sub(?c,?p2,?s1,?s2),
    succeeds partition_sub(?p1,?p2,?s2,?s3)],
   sub(?s1,?s3) by lemma(sub:transitive),
   sub(?s1,?s3))])
).

:- lemma(class_sub:partition_sub:bind,
(all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) =>
  (all x: succeeds class_member($(?x),?c) => 
    (ex t: succeeds partition_term($(?x),?p,?t) &
      succeeds member(bind(?x,?t),?s2)))) &
(all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) =>
  (all x: succeeds partition_member($(?x),?p1) => 
    (ex t: succeeds partition_term($(?x),?p2,?t) &
      succeeds member(bind(?x,?t),?s2)))),
induction(
 [all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) => 
    (all x: succeeds class_member($(?x),?c) => 
       (ex t: succeeds partition_term($(?x),?p,?t) &
         succeeds member(bind(?x,?t),?s2))),
  all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) => 
    (all x: succeeds partition_member($(?x),?p1) => 
       (ex t: succeeds partition_term($(?x),?p2,?t) &
         succeeds member(bind(?x,?t),?s2)))],
 [step([x,p1,p2,s1,s2,t],
   [all y: succeeds partition_member($(?y),?p1) => 
      (ex t1: succeeds partition_term($(?y),?p2,?t1) &
        succeeds member(bind(?y,?t1),?s2)),
    succeeds partition_term($(?x),?p2,?t),
    succeeds partition_sub(?p1,?p2,[bind(?x,?t)|?s1],?s2)],
   assume(succeeds class_member($(?y),cl($(?x),?p1)),
    [def succeeds class_member($(?y),cl($(?x),?p1)) by completion,
     cases(?y = ?x,
      [succeeds partition_term($(?y),?p2,?t),
       sub([bind(?x,?t)|?s1],?s2) by lemma(class_sub:partition_sub:sub),
       succeeds member(bind(?x,?t),[bind(?x,?t)|?s1]) by sld,
       all 0: succeeds member(?0,[bind(?x,?t)|?s1]) => 
	 succeeds member(?0,?s2) by elimination(sub,2),
       succeeds member(bind(?x,?t),?s2),
       succeeds member(bind(?y,?t),?s2),
       ex t: succeeds partition_term($(?y),?p2,?t) &
	succeeds member(bind(?y,?t),?s2)],
      succeeds partition_member($(?y),?p1),
      [],
      ex t: succeeds partition_term($(?y),?p2,?t) &
       succeeds member(bind(?y,?t),?s2))],
    ex t: succeeds partition_term($(?y),?p2,?t) &
     succeeds member(bind(?y,?t),?s2)),
   all y: succeeds class_member($(?y),cl($(?x),?p1)) => 
     (ex t: succeeds partition_term($(?y),?p2,?t) &
       succeeds member(bind(?y,?t),?s2))),
  step([f,tl,p1,p2,s1,s2],
   [all x: succeeds partition_member($(?x),?p1) => 
      (ex t: succeeds partition_term($(?x),?p2,?t) &
        succeeds member(bind(?x,?t),?s2)),
    succeeds partition_sub(?p1,?p2,?s1,?s2)],
   assume(succeeds class_member($(?x),cl([?f|?tl],?p1)),
    [def succeeds class_member($(?x),cl([?f|?tl],?p1)) by completion,
     ex t: succeeds partition_term($(?x),?p2,?t) &
      succeeds member(bind(?x,?t),?s2)],
    ex t: succeeds partition_term($(?x),?p2,?t) &
     succeeds member(bind(?x,?t),?s2)),
   all x: succeeds class_member($(?x),cl([?f|?tl],?p1)) => 
     (ex t: succeeds partition_term($(?x),?p2,?t) &
       succeeds member(bind(?x,?t),?s2))),
  step([0,s],
   [],
   assume(succeeds partition_member($(?x),[]),
    [def succeeds partition_member($(?x),[]) by completion,ff],
    ex t: succeeds partition_term($(?x),?0,?t) &
     succeeds member(bind(?x,?t),?s)),
   all x: succeeds partition_member($(?x),[]) => 
     (ex t: succeeds partition_term($(?x),?0,?t) &
       succeeds member(bind(?x,?t),?s))),
  step([c,p1,p2,s1,s3,s2],
   [all x: succeeds class_member($(?x),?c) => 
      (ex t: succeeds partition_term($(?x),?p2,?t) &
        succeeds member(bind(?x,?t),?s2)),
    all x: succeeds partition_member($(?x),?p1) => 
      (ex t: succeeds partition_term($(?x),?p2,?t) &
        succeeds member(bind(?x,?t),?s3)),
    succeeds class_sub(?c,?p2,?s1,?s2),
    succeeds partition_sub(?p1,?p2,?s2,?s3)],
   assume(succeeds partition_member($(?x),[?c|?p1]),
    [def succeeds partition_member($(?x),[?c|?p1]) by completion,
     cases(succeeds class_member($(?x),?c),
      [ex t: succeeds partition_term($(?x),?p2,?t) &
        succeeds member(bind(?x,?t),?s2),
       exist(t,
        succeeds partition_term($(?x),?p2,?t) &
        succeeds member(bind(?x,?t),?s2),
        [sub(?s2,?s3) by lemma(class_sub:partition_sub:sub),
	 all x: succeeds member(?x,?s2) => succeeds member(?x,?s3) by 
	  elimination(sub,2),
	 succeeds member(bind(?x,?t),?s3),
	 ex t: succeeds partition_term($(?x),?p2,?t) &
	  succeeds member(bind(?x,?t),?s3)],
        ex t: succeeds partition_term($(?x),?p2,?t) &
         succeeds member(bind(?x,?t),?s3))],
      succeeds partition_member($(?x),?p1),
      [],
      ex t: succeeds partition_term($(?x),?p2,?t) &
       succeeds member(bind(?x,?t),?s3))],
    ex t: succeeds partition_term($(?x),?p2,?t) &
     succeeds member(bind(?x,?t),?s3)),
   all x: succeeds partition_member($(?x),[?c|?p1]) => 
     (ex t: succeeds partition_term($(?x),?p2,?t) &
       succeeds member(bind(?x,?t),?s3)))])
).


:- corollary(partition_sub:bind,
all [p,s,x]: succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds partition_member($(?x),?p) =>
  (ex t: succeeds partition_term($(?x),?p,?t) &
    succeeds member(bind(?x,?t),?s)),
assume(succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds partition_member($(?x),?p),
 [all x: succeeds partition_member($(?x),?p) => 
    (ex t: succeeds partition_term($(?x),?p,?t) &
      succeeds member(bind(?x,?t),?s)) by 
   lemma(class_sub:partition_sub:bind),
  ex t: succeeds partition_term($(?x),?p,?t) &
   succeeds member(bind(?x,?t),?s)],
 ex t: succeeds partition_term($(?x),?p,?t) &
  succeeds member(bind(?x,?t),?s))
).

:- lemma(partition_sub:partition_term:variable,
all [p,s,x]: succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds atomic(?x) => succeeds partition_term($(?x),?p,$(?x) // ?s),
assume(succeeds partition(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds atomic(?x),
 [succeeds term($(?x)) by sld,
  succeeds substitution(?s) by lemma(partition_sub:types),
  terminates partition_member($(?x),?p) by 
   corollary(partition_member:termination),
  succeeds partition_member($(?x),?p) \/ fails partition_member($(?x),?p),
  cases(succeeds partition_member($(?x),?p),
   [ex t: succeeds partition_term($(?x),?p,?t) &
     succeeds member(bind(?x,?t),?s) by corollary(partition_sub:bind),
    exist(t,
     succeeds partition_term($(?x),?p,?t) & succeeds member(bind(?x,?t),?s),
     [succeeds assoc(?x,?s,?t) by lemma(assoc:bind:substitution),
      succeeds apply($(?x),?s,?t) by sld,
      ?t = $(?x) // ?s by uniqueness(//,2),
      succeeds partition_term($(?x),?p,$(?x) // ?s)],
     succeeds partition_term($(?x),?p,$(?x) // ?s))],
   fails partition_member($(?x),?p),
   [succeeds find(?p,$(?x),$(?x)) by lemma(find:characterization:3),
    succeeds var_form($(?x)) by sld,
    $(?x) = $(?x),
    succeeds partition_term($(?x),?p,$(?x)) by sld,
    terminates domain(?x,?s) by lemma(domain:termination),
    succeeds domain(?x,?s) \/ fails domain(?x,?s),
    cases(succeeds domain(?x,?s),
     [succeeds partition_member($(?x),?p) by 
       corollary(partition_sub:domain),
      ff],
     fails domain(?x,?s),
     [],
     fails domain(?x,?s)),
    succeeds assoc(?x,?s,$(?x)) by lemma(assoc:domain),
    succeeds apply($(?x),?s,$(?x)) by sld,
    $(?x) // ?s = $(?x) by uniqueness(//,2),
    succeeds partition_term($(?x),?p,$(?x) // ?s)],
   succeeds partition_term($(?x),?p,$(?x) // ?s))],
 succeeds partition_term($(?x),?p,$(?x) // ?s))
).

:- lemma(solved:find,
all [p,f,tl1]: succeeds partition(?p) & succeeds solved(?p) &
 succeeds term([?f|?tl1]) =>
  (ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
    succeeds equivalentL(?tl1,?tl2,?p)),
assume(succeeds partition(?p) & succeeds solved(?p) &
 succeeds term([?f|?tl1]),
 [def succeeds term([?f|?tl1]) by completion,
  ex t: succeeds find(?p,[?f|?tl1],?t) by lemma(find:existence),
  exist(t,
   succeeds find(?p,[?f|?tl1],?t),
   [succeeds term(?t) by lemma(find:types),
    (ex [c,q]: succeeds member(?c,?p) & succeeds class_member([?f|?tl1],?c) &
      ?c = cl(?t,?q)) \/
    fails partition_member([?f|?tl1],?p) & [?f|?tl1] = ?t by 
     lemma(find:characterization:1),
    cases(
     ex [c,q]: succeeds member(?c,?p) & succeeds class_member([?f|?tl1],?c) &
      ?c = cl(?t,?q),
     exist([c,q],
      succeeds member(?c,?p) & succeeds class_member([?f|?tl1],?c) &
      ?c = cl(?t,?q),
      [succeeds class(?c) by lemma(partition:member),
       def succeeds term(?t) by completion,
       cases(ex x: ?t = $(?x) & succeeds atomic(?x),
        exist(x,
         ?t = $(?x) & succeeds atomic(?x),
         [def succeeds class(cl($(?x),?q)) by completion,
	  def succeeds class_member([?f|?tl1],cl($(?x),?q)) by completion,
	  succeeds partition_member([?f|?tl1],?q),
	  fails var_form([?f|?tl1]),
	  succeeds not_var_class($(?x),?q) by sld,
	  ff],
         ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
          succeeds equivalentL(?tl1,?tl2,?p)),
        ex [x,tL]: ?t = [?x|?tL] & succeeds atomic(?x) & 
         succeeds termL(?tL),
        exist([x,tL],
         ?t = [?x|?tL] & succeeds atomic(?x) & succeeds termL(?tL),
         [succeeds member(cl([?x|?tL],?q),?p),
	  def succeeds class_member([?f|?tl1],cl([?x|?tL],?q)) by completion,
	  cases(?f = ?x & ?tl1 = ?tL,
           [succeeds equivalentL(?tl1,?tl1,?p) by 
             lemma(equivalentL:reflexive),
	    succeeds equivalentL(?tl1,?tL,?p)],
           succeeds partition_member([?f|?tl1],?q),
           [def succeeds solved(?p) by completion,
	    def fails not_solved(?p) by completion,
	    fails member(cl([?x|?tL],?q),?p) \/
	    fails partition_member([?f|?tl1],?q) \/
	    ?x = ?f & succeeds equivalentL(?tL,?tl1,?p),
	    cases(
             [case(fails member(cl([?x|?tL],?q),?p),[]),
              case(fails partition_member([?f|?tl1],?q),
               []),
              case(?x = ?f & succeeds equivalentL(?tL,?tl1,?p),
               succeeds equivalentL(?tl1,?tL,?p) by 
                lemma(equivalentL:symmetric))],
             ?x = ?f & succeeds equivalentL(?tl1,?tL,?p))],
           ?x = ?f & succeeds equivalentL(?tl1,?tL,?p)),
	  succeeds find(?p,[?f|?tl1],[?f|?tL]),
	  ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
	   succeeds equivalentL(?tl1,?tl2,?p)],
         ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
          succeeds equivalentL(?tl1,?tl2,?p)),
        ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
         succeeds equivalentL(?tl1,?tl2,?p))],
      ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
       succeeds equivalentL(?tl1,?tl2,?p)),
     fails partition_member([?f|?tl1],?p) & [?f|?tl1] = ?t,
     [succeeds find(?p,[?f|?tl1],[?f|?tl1]),
      succeeds equivalentL(?tl1,?tl1,?p) by lemma(equivalentL:reflexive),
      ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
       succeeds equivalentL(?tl1,?tl2,?p)],
     ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
      succeeds equivalentL(?tl1,?tl2,?p))],
   ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
    succeeds equivalentL(?tl1,?tl2,?p))],
 ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
  succeeds equivalentL(?tl1,?tl2,?p))
).

:- lemma(equivalentL:member,
all [t1,tl1,tl2,p]: succeeds equivalentL(?tl1,?tl2,?p) &
 succeeds member(?t1,?tl1) =>
  (ex t2: succeeds member(?t2,?tl2) & succeeds equivalent(?t1,?t2,?p)),
[induction(
  [all [tl1,tl2,p]: succeeds equivalentL(?tl1,?tl2,?p) => 
     (all t1: succeeds member(?t1,?tl1) => 
        (ex t2: succeeds member(?t2,?tl2) & succeeds equivalent(?t1,?t2,?p)))],
  [step([0],
    [],
    assume(succeeds member(?t1,[]),
     [def succeeds member(?t1,[]) by completion,ff],
     ex t2: succeeds member(?t2,[]) & succeeds equivalent(?t1,?t2,?0)),
    all t1: succeeds member(?t1,[]) => 
      (ex t2: succeeds member(?t2,[]) & succeeds equivalent(?t1,?t2,?0))),
   step([t1,t1L,t2,t2L,p],
    [all t1: succeeds member(?t1,?t1L) => 
       (ex t2: succeeds member(?t2,?t2L) & succeeds equivalent(?t1,?t2,?p)),
     succeeds equivalent(?t1,?t2,?p),
     succeeds equivalentL(?t1L,?t2L,?p)],
    assume(succeeds member(?t3,[?t1|?t1L]),
     [def succeeds member(?t3,[?t1|?t1L]) by completion,
      cases(?t3 = ?t1,
       [succeeds member(?t2,[?t2|?t2L]) by sld,
	succeeds equivalent(?t3,?t2,?p),
	ex t4: succeeds member(?t4,[?t2|?t2L]) &
	 succeeds equivalent(?t3,?t4,?p)],
       succeeds member(?t3,?t1L),
       [ex t2: succeeds member(?t2,?t2L) & succeeds equivalent(?t3,?t2,?p),
	exist(t4,
         succeeds member(?t4,?t2L) & succeeds equivalent(?t3,?t4,?p),
         [succeeds member(?t4,[?t2|?t2L]) by sld,
	  ex t4: succeeds member(?t4,[?t2|?t2L]) &
	   succeeds equivalent(?t3,?t4,?p)],
         ex t4: succeeds member(?t4,[?t2|?t2L]) &
          succeeds equivalent(?t3,?t4,?p))],
       ex t4: succeeds member(?t4,[?t2|?t2L]) &
        succeeds equivalent(?t3,?t4,?p))],
     ex t4: succeeds member(?t4,[?t2|?t2L]) & succeeds equivalent(?t3,?t4,?p)),
    all t3: succeeds member(?t3,[?t1|?t1L]) => 
      (ex t4: succeeds member(?t4,[?t2|?t2L]) &
	succeeds equivalent(?t3,?t4,?p)))]),
 assume(succeeds equivalentL(?tl1,?tl2,?p) & succeeds member(?t1,?tl1),
  [all t1: succeeds member(?t1,?tl1) => 
     (ex t2: succeeds member(?t2,?tl2) & succeeds equivalent(?t1,?t2,?p)),
   succeeds member(?t1,?tl1) => 
    (ex t2: succeeds member(?t2,?tl2) & succeeds equivalent(?t1,?t2,?p)),
   ex t2: succeeds member(?t2,?tl2) & succeeds equivalent(?t1,?t2,?p)],
  ex t2: succeeds member(?t2,?tl2) & succeeds equivalent(?t1,?t2,?p))]
).

:- lemma(roots_termL:equivalentL,
all [p,l,tl1,tl2]: succeeds partition(?p) & 
 succeeds equivalentL(?tl2,?tl1,?p) & roots_termL(?tl1,?p,?l) =>
  roots_termL(?tl2,?p,?l),
assume(succeeds partition(?p) & succeeds equivalentL(?tl2,?tl1,?p) &
 roots_termL(?tl1,?p,?l),
 [all [t1,t2]: succeeds member(?t1,?tl1) & succeeds find(?p,?t1,?t2) => 
    succeeds member(?t2,?l) by elimination(roots_termL,3),
  assume(succeeds member(?t1,?tl2) & succeeds find(?p,?t1,?t2),
   [ex t2: succeeds member(?t2,?tl1) & succeeds equivalent(?t1,?t2,?p) by 
     lemma(equivalentL:member),
    exist(t3,
     succeeds member(?t3,?tl1) & succeeds equivalent(?t1,?t3,?p),
     [def succeeds equivalent(?t1,?t3,?p) by completion,
      exist(t,
       succeeds find(?p,?t1,?t) & succeeds find(?p,?t3,?t),
       [?t = ?t2 by lemma(find:uniqueness),
	succeeds member(?t,?l),
	succeeds member(?t2,?l)],
       succeeds member(?t2,?l))],
     succeeds member(?t2,?l))],
   succeeds member(?t2,?l)),
  roots_termL(?tl2,?p,?l) by introduction(roots_termL,3)],
 roots_termL(?tl2,?p,?l))
).

:- lemma(solved:root_term,
all [p,f,tl,l1]: succeeds partition(?p) & topological_ordering(?p,?l1) &
 succeeds solved(?p) & succeeds term([?f|?tl]) &
 root_term([?f|?tl],?p,?l1) =>
  (ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
    succeeds lh(?l2) @< lh(?l1)),
assume(succeeds partition(?p) & topological_ordering(?p,?l1) &
 succeeds solved(?p) & succeeds term([?f|?tl]) &
 root_term([?f|?tl],?p,?l1),
 [ex tl2: succeeds find(?p,[?f|?tl],[?f|?tl2]) &
   succeeds equivalentL(?tl,?tl2,?p) by lemma(solved:find), 
  exist(tl1,
   succeeds find(?p,[?f|?tl],[?f|?tl1]) &
   succeeds equivalentL(?tl,?tl1,?p),
   [ex l2: topological_ordering(?p,?l2) & roots_termL(?tl1,?p,?l2) &
     succeeds lh(?l2) @< lh(?l1) by lemma(topological_ordering:length), 
    exist(l2,
     topological_ordering(?p,?l2) & roots_termL(?tl1,?p,?l2) &
     succeeds lh(?l2) @< lh(?l1),
     [roots_termL(?tl,?p,?l2) by lemma(roots_termL:equivalentL),
      ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
       succeeds lh(?l2) @< lh(?l1)],
     ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
      succeeds lh(?l2) @< lh(?l1))],
   ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
    succeeds lh(?l2) @< lh(?l1))],
 ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
  succeeds lh(?l2) @< lh(?l1))
).

:- lemma(partition_term:equivalent,
all [t1,t2,t3,p]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds partition(?p) & succeeds equivalent(?t1,?t2,?p) &
 succeeds partition_term(?t1,?p,?t3) => succeeds partition_term(?t2,?p,?t3),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds partition(?p) &
 succeeds equivalent(?t1,?t2,?p) & succeeds partition_term(?t1,?p,?t3),
 [def succeeds partition_term(?t1,?p,?t3) by completion,
  exist([t4,tag,t1L,t2L],
   succeeds find(?p,?t1,?t4) &
   (succeeds var_form(?t4) & ?t3 = ?t4 \/
    fails var_form(?t4) & ?t4 = [?tag|?t1L] &
    succeeds partition_termL(?t1L,?p,?t2L) & ?t3 = [?tag|?t2L]),
   [def succeeds equivalent(?t1,?t2,?p) by completion,
    exist(t,
     succeeds find(?p,?t1,?t) & succeeds find(?p,?t2,?t),
     [?t = ?t4 by lemma(find:uniqueness),
      succeeds find(?p,?t2,?t4),
      succeeds partition_term(?t2,?p,?t3)],
     succeeds partition_term(?t2,?p,?t3))],
   succeeds partition_term(?t2,?p,?t3))],
 succeeds partition_term(?t2,?p,?t3))
).

:- lemma(partition_termL:equivalentL,
all [tl1,tl2,tl3,p]: succeeds partition_termL(?tl1,?p,?tl3)&
 succeeds termL(?tl1) & succeeds termL(?tl2) &
 succeeds partition(?p) & succeeds equivalentL(?tl1,?tl2,?p) =>
  succeeds partition_termL(?tl2,?p,?tl3),
[induction(
  [all [tl1,p,tl3]: succeeds partition_termL(?tl1,?p,?tl3) => 
     (all tl2: succeeds termL(?tl1) & succeeds termL(?tl2) &
       succeeds partition(?p) & succeeds equivalentL(?tl1,?tl2,?p) => 
        succeeds partition_termL(?tl2,?p,?tl3))],
  [step([0],
    [],
    assume(succeeds termL([]) & succeeds termL(?tl2) &
     succeeds partition(?0) & succeeds equivalentL([],?tl2,?0),
     [def succeeds equivalentL([],?tl2,?0) by completion,
      ?tl2 = [],
      succeeds partition_termL([],?0,[]) by sld,
      succeeds partition_termL(?tl2,?0,[])],
     succeeds partition_termL(?tl2,?0,[])),
    all tl2: succeeds termL([]) & succeeds termL(?tl2) &
     succeeds partition(?0) & succeeds equivalentL([],?tl2,?0) => 
      succeeds partition_termL(?tl2,?0,[])),
   step([t1,t1L,p,t2,t2L],
    [all tl2: succeeds termL(?t1L) & succeeds termL(?tl2) &
      succeeds partition(?p) & succeeds equivalentL(?t1L,?tl2,?p) => 
       succeeds partition_termL(?tl2,?p,?t2L),
     succeeds partition_term(?t1,?p,?t2),
     succeeds partition_termL(?t1L,?p,?t2L)],
    assume(succeeds termL([?t1|?t1L]) & succeeds termL(?tl2) &
     succeeds partition(?p) & succeeds equivalentL([?t1|?t1L],?tl2,?p),
     [def succeeds termL([?t1|?t1L]) by completion,
      def succeeds equivalentL([?t1|?t1L],?tl2,?p) by completion,
      exist([0,1],
       ?tl2 = [?0|?1] & succeeds equivalent(?t1,?0,?p) &
       succeeds equivalentL(?t1L,?1,?p),
       [def succeeds termL([?0|?1]) by completion,
	succeeds partition_term(?0,?p,?t2) by 
         lemma(partition_term:equivalent),
	succeeds partition_termL(?1,?p,?t2L),
	succeeds partition_termL([?0|?1],?p,[?t2|?t2L]) by sld,
	succeeds partition_termL(?tl2,?p,[?t2|?t2L])],
       succeeds partition_termL(?tl2,?p,[?t2|?t2L]))],
     succeeds partition_termL(?tl2,?p,[?t2|?t2L])),
    all tl2: succeeds termL([?t1|?t1L]) & succeeds termL(?tl2) &
     succeeds partition(?p) & succeeds equivalentL([?t1|?t1L],?tl2,?p) => 
      succeeds partition_termL(?tl2,?p,[?t2|?t2L]))]),
 assume(succeeds partition_termL(?tl1,?p,?tl3) & succeeds termL(?tl1) &
  succeeds termL(?tl2) & succeeds partition(?p) &
  succeeds equivalentL(?tl1,?tl2,?p),
  [all tl2: succeeds termL(?tl1) & succeeds termL(?tl2) &
    succeeds partition(?p) & succeeds equivalentL(?tl1,?tl2,?p) => 
     succeeds partition_termL(?tl2,?p,?tl3),
   succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p) &
   succeeds equivalentL(?tl1,?tl2,?p) => 
    succeeds partition_termL(?tl2,?p,?tl3),
   succeeds partition_termL(?tl2,?p,?tl3)],
  succeeds partition_termL(?tl2,?p,?tl3))]
).

:- lemma(partition_termL:partition_term:solved,
all [f,tl1,tl2,p]: succeeds partition(?p) & succeeds solved(?p) &
 succeeds term([?f|?tl1]) & succeeds partition_termL(?tl1,?p,?tl2) =>
  succeeds partition_term([?f|?tl1],?p,[?f|?tl2]),
assume(succeeds partition(?p) & succeeds solved(?p) &
 succeeds term([?f|?tl1]) & succeeds partition_termL(?tl1,?p,?tl2),
 [ex tl2: succeeds find(?p,[?f|?tl1],[?f|?tl2]) &
   succeeds equivalentL(?tl1,?tl2,?p) by lemma(solved:find),
  exist(tl3,
   succeeds find(?p,[?f|?tl1],[?f|?tl3]) & succeeds equivalentL(?tl1,?tl3,?p),
   [succeeds term([?f|?tl3]) by lemma(find:types),
    def succeeds term([?f|?tl3]) by completion,
    def succeeds term([?f|?tl1]) by completion,
    succeeds partition_termL(?tl3,?p,?tl2) by 
     lemma(partition_termL:equivalentL),
    fails var_form([?f|?tl3]),
    [?f|?tl3] = [?f|?tl3],
    [?f|?tl2] = [?f|?tl2],
    succeeds partition_term([?f|?tl1],?p,[?f|?tl2]) by sld],
   succeeds partition_term([?f|?tl1],?p,[?f|?tl2]))],
 succeeds partition_term([?f|?tl1],?p,[?f|?tl2]))
).

:- lemma(partition_sub:partition_term:lh,
all [p,s]: succeeds partition(?p) & succeeds cycle_free(?p) &
 succeeds solved(?p) & succeeds partition_sub(?p,?p,[],?s) =>
  (all [n,l]: succeeds nat(?n) & topological_ordering(?p,?l) &
       succeeds lh(?l) @< ?n =>
     (all t: succeeds term(?t) & root_term(?t,?p,?l) =>
	succeeds partition_term(?t,?p,?t // ?s)) &
     (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) =>
	(ex tl1: succeeds applyL(?tl,?s,?tl1) &
	  succeeds partition_termL(?tl,?p,?tl1)))),
assume(succeeds partition(?p) & succeeds cycle_free(?p) &
 succeeds solved(?p) & succeeds partition_sub(?p,?p,[],?s),
 [succeeds substitution(?s) by lemma(partition_sub:types),
  induction(
   [all n: succeeds nat(?n) => 
      (all l: topological_ordering(?p,?l) & succeeds lh(?l) @< ?n => 
         (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
            succeeds partition_term(?t,?p,?t // ?s)) &
         (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
            (ex tl1: succeeds applyL(?tl,?s,?tl1) &
              succeeds partition_termL(?tl,?p,?tl1))))],
   [step([],
     [],
     assume(topological_ordering(?p,?l) & succeeds lh(?l) @< 0,
      [def succeeds lh(?l) @< 0 by completion,ff],
      (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
         succeeds partition_term(?t,?p,?t // ?s)) &
      (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
         (ex tl1: succeeds applyL(?tl,?s,?tl1) &
           succeeds partition_termL(?tl,?p,?tl1)))),
     all l: topological_ordering(?p,?l) & succeeds lh(?l) @< 0 => 
       (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
          succeeds partition_term(?t,?p,?t // ?s)) &
       (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
          (ex tl1: succeeds applyL(?tl,?s,?tl1) &
            succeeds partition_termL(?tl,?p,?tl1)))),
    step([n],
     [all l: topological_ordering(?p,?l) & succeeds lh(?l) @< ?n => 
        (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
           succeeds partition_term(?t,?p,?t // ?s)) &
        (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
           (ex tl1: succeeds applyL(?tl,?s,?tl1) &
             succeeds partition_termL(?tl,?p,?tl1))),
      succeeds nat(?n)],
     assume(topological_ordering(?p,?l) & succeeds lh(?l) @< s(?n),
      [assume(succeeds term(?t) & root_term(?t,?p,?l),
        [def succeeds term(?t) by completion,
         cases(ex x: ?t = $(?x) & succeeds atomic(?x),
          exist(x,
           ?t = $(?x) & succeeds atomic(?x),
           [succeeds partition_term($(?x),?p,$(?x) // ?s) by 
             lemma(partition_sub:partition_term:variable),
	    succeeds partition_term(?t,?p,?t // ?s)],
           succeeds partition_term(?t,?p,?t // ?s)),
          ex [f,tl]: ?t = [?f|?tl] & succeeds atomic(?f) &
           succeeds termL(?tl),
          exist([f,tl],
           ?t = [?f|?tl] & succeeds atomic(?f) & succeeds termL(?tl),
           [succeeds term([?f|?tl]),
	    root_term([?f|?tl],?p,?l),
	    ex l2: topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
             succeeds lh(?l2) @< lh(?l) by lemma(solved:root_term),
	    exist(l2,
             topological_ordering(?p,?l2) & roots_termL(?tl,?p,?l2) &
             succeeds lh(?l2) @< lh(?l),
             [succeeds lh(?l2) @< ?n by 
               lemma(less:transitive:successor),
	      (all t: succeeds term(?t) & root_term(?t,?p,?l2) => 
		 succeeds partition_term(?t,?p,?t // ?s)) &
	      (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l2) => 
		 (ex tl1: succeeds applyL(?tl,?s,?tl1) &
		   succeeds partition_termL(?tl,?p,?tl1))),
	      ex tl1: succeeds applyL(?tl,?s,?tl1) &
		   succeeds partition_termL(?tl,?p,?tl1),
	      exist(tl1,
               succeeds applyL(?tl,?s,?tl1) &
               succeeds partition_termL(?tl,?p,?tl1),
               [succeeds partition_term([?f|?tl],?p,[?f|?tl1]) by 
                 lemma(partition_termL:partition_term:solved),
		succeeds partition_term(?t,?p,[?f|?tl1]),
		succeeds apply([?f|?tl],?s,[?f|?tl1]) by sld,
		succeeds apply(?t,?s,[?f|?tl1]),
		?t // ?s = [?f|?tl1] by uniqueness(//,2),
		succeeds partition_term(?t,?p,?t // ?s)],
               succeeds partition_term(?t,?p,?t // ?s))],
             succeeds partition_term(?t,?p,?t // ?s))],
           succeeds partition_term(?t,?p,?t // ?s)),
          succeeds partition_term(?t,?p,?t // ?s))],
        succeeds partition_term(?t,?p,?t // ?s)),
       all t: succeeds term(?t) & root_term(?t,?p,?l) => 
         succeeds partition_term(?t,?p,?t // ?s),
       induction(
	[all tl: succeeds termL(?tl) => roots_termL(?tl,?p,?l) => 
	    (ex tl1: succeeds applyL(?tl,?s,?tl1) &
	      succeeds partition_termL(?tl,?p,?tl1))],
	[step([],
	  [],
	  assume(roots_termL([],?p,?l),
	   [succeeds applyL([],?s,[]) by sld,
	    succeeds partition_termL([],?p,[]) by sld,
	    ex tl1: succeeds applyL([],?s,?tl1) &
	     succeeds partition_termL([],?p,?tl1)],
	   ex tl1: succeeds applyL([],?s,?tl1) &
	    succeeds partition_termL([],?p,?tl1)),
	  roots_termL([],?p,?l) => 
	   (ex tl1: succeeds applyL([],?s,?tl1) &
	     succeeds partition_termL([],?p,?tl1))),
	 step([t,tL],
	  [roots_termL(?tL,?p,?l) => 
	    (ex tl1: succeeds applyL(?tL,?s,?tl1) &
	      succeeds partition_termL(?tL,?p,?tl1)),
	   succeeds term(?t),
	   succeeds termL(?tL)],
	  assume(roots_termL([?t|?tL],?p,?l),
	   [root_term(?t,?p,?l) by lemma(roots_termL:root_term),
	    roots_termL(?tL,?p,?l) by lemma(roots_termL:tail),
	    succeeds partition_term(?t,?p,?t // ?s),
	    ex tl1: succeeds applyL(?tL,?s,?tl1) &
	      succeeds partition_termL(?tL,?p,?tl1),
	    exist(tl1,
             succeeds applyL(?tL,?s,?tl1) &
             succeeds partition_termL(?tL,?p,?tl1),
             [succeeds apply(?t,?s,?t // ?s) by existence(//,2),
	      succeeds applyL([?t|?tL],?s,[?t // ?s|?tl1]) by sld,
	      succeeds partition_termL([?t|?tL],?p,[?t // ?s|?tl1]) by sld,
	      ex tl1: succeeds applyL([?t|?tL],?s,?tl1) &
	       succeeds partition_termL([?t|?tL],?p,?tl1)],
             ex tl1: succeeds applyL([?t|?tL],?s,?tl1) &
              succeeds partition_termL([?t|?tL],?p,?tl1))],
	   ex tl1: succeeds applyL([?t|?tL],?s,?tl1) &
	    succeeds partition_termL([?t|?tL],?p,?tl1)),
	  roots_termL([?t|?tL],?p,?l) => 
	   (ex tl1: succeeds applyL([?t|?tL],?s,?tl1) &
	     succeeds partition_termL([?t|?tL],?p,?tl1)))]),
       assume(succeeds termL(?tl) & roots_termL(?tl,?p,?l),
	[roots_termL(?tl,?p,?l) => 
	  (ex tl1: succeeds applyL(?tl,?s,?tl1) &
	    succeeds partition_termL(?tl,?p,?tl1)),
	 roots_termL(?tl,?p,?l) => 
	  (ex tl1: succeeds applyL(?tl,?s,?tl1) &
	    succeeds partition_termL(?tl,?p,?tl1)),
	 ex tl1: succeeds applyL(?tl,?s,?tl1) &
	  succeeds partition_termL(?tl,?p,?tl1)],
	ex tl1: succeeds applyL(?tl,?s,?tl1) &
	 succeeds partition_termL(?tl,?p,?tl1))],
      (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
         succeeds partition_term(?t,?p,?t // ?s)) &
      (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
         (ex tl1: succeeds applyL(?tl,?s,?tl1) &
           succeeds partition_termL(?tl,?p,?tl1)))),
     all l: topological_ordering(?p,?l) & succeeds lh(?l) @< s(?n) => 
       (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
          succeeds partition_term(?t,?p,?t // ?s)) &
       (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
          (ex tl1: succeeds applyL(?tl,?s,?tl1) &
            succeeds partition_termL(?tl,?p,?tl1))))]),
  assume(succeeds nat(?n) & topological_ordering(?p,?l) &
   succeeds lh(?l) @< ?n,
   [all l: topological_ordering(?p,?l) & succeeds lh(?l) @< ?n => 
      (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
         succeeds partition_term(?t,?p,?t // ?s)) &
      (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
         (ex tl1: succeeds applyL(?tl,?s,?tl1) &
           succeeds partition_termL(?tl,?p,?tl1))),
    topological_ordering(?p,?l) & succeeds lh(?l) @< ?n => 
     (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
        succeeds partition_term(?t,?p,?t // ?s)) &
     (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
        (ex tl1: succeeds applyL(?tl,?s,?tl1) &
          succeeds partition_termL(?tl,?p,?tl1))),
    (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
       succeeds partition_term(?t,?p,?t // ?s)) &
    (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
       (ex tl1: succeeds applyL(?tl,?s,?tl1) &
         succeeds partition_termL(?tl,?p,?tl1)))],
   (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
      succeeds partition_term(?t,?p,?t // ?s)) &
   (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
      (ex tl1: succeeds applyL(?tl,?s,?tl1) &
        succeeds partition_termL(?tl,?p,?tl1))))],
 all [n,l]: succeeds nat(?n) & topological_ordering(?p,?l) &
  succeeds lh(?l) @< ?n => 
   (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
      succeeds partition_term(?t,?p,?t // ?s)) &
   (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
      (ex tl1: succeeds applyL(?tl,?s,?tl1) &
        succeeds partition_termL(?tl,?p,?tl1))))
).

:- theorem(partition_sub:partition_term,
all [p,s,t]: succeeds partition(?p) & succeeds cycle_free(?p) &
 succeeds solved(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds partition_member(?t,?p) =>
  succeeds partition_term(?t,?p,?t // ?s),
assume(succeeds partition(?p) & succeeds cycle_free(?p) &
 succeeds solved(?p) & succeeds partition_sub(?p,?p,[],?s) &
 succeeds partition_member(?t,?p),
 [ex l: topological_ordering(?p,?l) & sub(roots(?p),?l) by 
   theorem(cycle_free:topological_ordering),
  exist(l,
   topological_ordering(?p,?l) & sub(roots(?p),?l),
   [root_term(?t,?p,?l) by lemma(roots:root_term:sub),
    all [n,l]: succeeds nat(?n) & topological_ordering(?p,?l) &
     succeeds lh(?l) @< ?n => 
      (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
         succeeds partition_term(?t,?p,?t // ?s)) &
      (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
         (ex tl1: succeeds applyL(?tl,?s,?tl1) &
           succeeds partition_termL(?tl,?p,?tl1))) by 
     lemma(partition_sub:partition_term:lh),
    succeeds list(?l) &
    (all [l1,l2,f,tl]: succeeds append(?l1,[[?f|?tl]|?l2],?l) => 
       roots_termL(?tl,?p,?l2)) by elimination(topological_ordering,2),
    succeeds nat(lh(?l)) by corollary(lh:types),
    succeeds lh(?l) @< s(lh(?l)) by lemma(less:one),
    succeeds nat(s(lh(?l))) by sld,
    (all t: succeeds term(?t) & root_term(?t,?p,?l) => 
       succeeds partition_term(?t,?p,?t // ?s)) &
    (all tl: succeeds termL(?tl) & roots_termL(?tl,?p,?l) => 
       (ex tl1: succeeds applyL(?tl,?s,?tl1) &
	 succeeds partition_termL(?tl,?p,?tl1))),
    succeeds term(?t) by corollary(partition_member:types),
    succeeds partition_term(?t,?p,?t // ?s)],
   succeeds partition_term(?t,?p,?t // ?s))],
 succeeds partition_term(?t,?p,?t // ?s))
).

:- lemma(partition_term:partition_termL:uniqueness,
(all [t,p,t1]: succeeds partition_term(?t,?p,?t1) =>
  (all t2: succeeds partition_term(?t,?p,?t2) => ?t1 = ?t2)) &
(all [tl,p,tl1]: succeeds partition_termL(?tl,?p,?tl1) =>
    (all tl2: succeeds partition_termL(?tl,?p,?tl2) => ?tl1 = ?tl2)),
induction(
 [all [t,p,t1]: succeeds partition_term(?t,?p,?t1) => 
    (all t2: succeeds partition_term(?t,?p,?t2) => ?t1 = ?t2),
  all [tl,p,tl1]: succeeds partition_termL(?tl,?p,?tl1) => 
    (all tl2: succeeds partition_termL(?tl,?p,?tl2) => ?tl1 = ?tl2)],
 [step([t1,p,t3,t2,tag,t1L,t2L],
   [succeeds find(?p,?t1,?t2),
    succeeds var_form(?t2),
    ?t3 = ?t2],
   [assume(succeeds partition_term(?t1,?p,?t4),
     [def succeeds partition_term(?t1,?p,?t4) by completion,
      exist([0,tag,t1L,t2L],
       succeeds find(?p,?t1,?0) &
       (succeeds var_form(?0) & ?t4 = ?0 \/
        fails var_form(?0) & ?0 = [?tag|?t1L] &
        succeeds partition_termL(?t1L,?p,?t2L) & ?t4 = [?tag|?t2L]),
       [?0 = ?t2 by lemma(find:uniqueness),
	succeeds var_form(?t2) & ?t4 = ?t2 \/
        fails var_form(?t2) & ?t2 = [?tag|?t1L] &
        succeeds partition_termL(?t1L,?p,?t2L) & ?t4 = [?tag|?t2L],
	cases(succeeds var_form(?t2) & ?t4 = ?t2,
         [],
         fails var_form(?t2) & ?t2 = [?tag|?t1L] &
         succeeds partition_termL(?t1L,?p,?t2L) & ?t4 = [?tag|?t2L],
         [],
         ?t3 = ?t4)],
       ?t3 = ?t4)],
     ?t3 = ?t4),
    all t4: succeeds partition_term(?t1,?p,?t4) => ?t3 = ?t4],
   all t2: succeeds partition_term(?t1,?p,?t2) => ?t3 = ?t2),
  step([t1,p,t3,t2,tag,t1L,t2L],
   [all tl2: succeeds partition_termL(?t1L,?p,?tl2) => ?t2L = ?tl2,
    succeeds find(?p,?t1,?t2),
    fails var_form(?t2),
    ?t2 = [?tag|?t1L],
    succeeds partition_termL(?t1L,?p,?t2L),
    ?t3 = [?tag|?t2L]],
   [assume(succeeds partition_term(?t1,?p,?t4),
     [def succeeds partition_term(?t1,?p,?t4) by completion,
      exist([0,1,2,3],
       succeeds find(?p,?t1,?0) &
       (succeeds var_form(?0) & ?t4 = ?0 \/
        fails var_form(?0) & ?0 = [?1|?2] &
        succeeds partition_termL(?2,?p,?3) & ?t4 = [?1|?3]),
       [?0 = ?t2 by lemma(find:uniqueness),
	succeeds var_form(?t2) & ?t4 = ?t2 \/
        fails var_form(?t2) & ?t2 = [?1|?2] &
        succeeds partition_termL(?2,?p,?3) & ?t4 = [?1|?3],
	cases(succeeds var_form(?t2) & ?t4 = ?t2,
         [],
         fails var_form(?t2) & ?t2 = [?1|?2] &
         succeeds partition_termL(?2,?p,?3) & ?t4 = [?1|?3],
         [[?tag|?t1L] = [?1|?2],
	  succeeds partition_termL(?t1L,?p,?3),
	  ?t2L = ?3,
	  ?t3 = ?t4],
         ?t3 = ?t4)],
       ?t3 = ?t4)],
     ?t3 = ?t4),
    all t4: succeeds partition_term(?t1,?p,?t4) => ?t3 = ?t4],
   all t2: succeeds partition_term(?t1,?p,?t2) => ?t3 = ?t2),
  step([0],
   [],
   assume(succeeds partition_termL([],?0,?tl2),
    [def succeeds partition_termL([],?0,?tl2) by completion,[] = ?tl2],
    [] = ?tl2),
   all tl2: succeeds partition_termL([],?0,?tl2) => [] = ?tl2),
  step([t1,t1L,p,t2,t2L],
   [all 0: succeeds partition_term(?t1,?p,?0) => ?t2 = ?0,
    all tl2: succeeds partition_termL(?t1L,?p,?tl2) => ?t2L = ?tl2,
    succeeds partition_term(?t1,?p,?t2),
    succeeds partition_termL(?t1L,?p,?t2L)],
   assume(succeeds partition_termL([?t1|?t1L],?p,?tl2),
    [def succeeds partition_termL([?t1|?t1L],?p,?tl2) by completion,
     exist([0,1],
      ?tl2 = [?0|?1] & succeeds partition_term(?t1,?p,?0) &
      succeeds partition_termL(?t1L,?p,?1),
      [?t2 = ?0,
       ?t2L = ?1,
       [?t2|?t2L] = ?tl2],
      [?t2|?t2L] = ?tl2)],
    [?t2|?t2L] = ?tl2),
   all tl2: succeeds partition_termL([?t1|?t1L],?p,?tl2) => 
     [?t2|?t2L] = ?tl2)])
).
    
:- corollary(partition_term:uniqueness,
all [p,t,t1,t2]: succeeds partition_term(?t,?p,?t1) &
 succeeds partition_term(?t,?p,?t2) => ?t1 = ?t2,
assume(succeeds partition_term(?t,?p,?t1) &
 succeeds partition_term(?t,?p,?t2),
 [all t2: succeeds partition_term(?t,?p,?t2) => ?t1 = ?t2 by 
   lemma(partition_term:partition_termL:uniqueness),
  ?t1 = ?t2],
 ?t1 = ?t2)
).

:- theorem(partition_sub:solution,
all [p,s]: succeeds partition(?p) & succeeds cycle_free(?p) &
 succeeds solved(?p) & succeeds partition_sub(?p,?p,[],?s) =>
  succeeds partition_solution(?p,?s),
assume(succeeds partition(?p) & succeeds cycle_free(?p) &
 succeeds solved(?p) & succeeds partition_sub(?p,?p,[],?s),
 [succeeds substitution(?s) by lemma(partition_sub:types),
  assume(succeeds member(?c,?p),
   [succeeds class(?c) by lemma(partition:member),
    assume(succeeds class_member(?t1,?c) & succeeds class_member(?t2,?c),
     [succeeds partition_member(?t1,?p) by 
       lemma(partition_member:member:class_member),
      succeeds partition_term(?t1,?p,?t1 // ?s) by 
       theorem(partition_sub:partition_term),
      succeeds partition_member(?t2,?p) by 
       lemma(partition_member:member:class_member),
      succeeds partition_term(?t2,?p,?t2 // ?s) by 
       theorem(partition_sub:partition_term),
      succeeds equivalent(?t1,?t2,?p) by 
       lemma(equivalent:characterization:2),
      succeeds term(?t1) by corollary(class_member:types),
      succeeds term(?t2) by corollary(class_member:types),
      succeeds partition_term(?t2,?p,?t1 // ?s) by 
       lemma(partition_term:equivalent),
      ?t1 // ?s = ?t2 // ?s by corollary(partition_term:uniqueness),
      succeeds unifier(?t1,?t2,?s) by lemma(unifier:characterization:1)],
     succeeds unifier(?t1,?t2,?s)),
    succeeds class_solution(?c,?s) by 
     lemma(class_solution:characterization:2)],
   succeeds class_solution(?c,?s)),
  succeeds partition_solution(?p,?s) by 
   lemma(partition_solution:characterization)],
 succeeds partition_solution(?p,?s))
).

%-----------------------------------------------------------------------
% part11
%-----------------------------------------------------------------------

:- lemma(find_delete:twice:equivalent,
all [c1,c2,t1,t2,t3,t4,q1,q2,p3,p4]: succeeds class_member(?t1,?c1) &
 succeeds class_member(?t2,?c2) & ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
 ?p4 = [cl(?t4,[?c1|?q2])|?p3] => succeeds equivalent(?t1,?t2,?p4),
assume(succeeds class_member(?t1,?c1) & succeeds class_member(?t2,?c2) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t4,[?c1|?q2])|?p3],
 [succeeds partition_member(?t1,[?c1|?q2]) by sld,
  succeeds class_member(?t1,cl(?t4,[?c1|?q2])) by sld,
  cl(?t4,[?c1|?q2]) = cl(?t4,[?c1|?q2]),
  succeeds find([cl(?t4,[?c1|?q2])|?p3],?t1,?t4) by sld,
  succeeds find(?p4,?t1,?t4),
  def succeeds class_member(?t2,cl(?t4,?q2)) by completion,
  cases(?t2 = ?t4,
   [],
   succeeds partition_member(?t2,?q2),
   [],
   succeeds class_member(?t2,cl(?t4,[?c1|?q2]))),
  succeeds find([cl(?t4,[?c1|?q2])|?p3],?t2,?t4) by sld,
  succeeds find(?p4,?t2,?t4),
  succeeds equivalent(?t1,?t2,?p4) by sld],
 succeeds equivalent(?t1,?t2,?p4))
).

:- lemma(find_delete:class_member:equivalent,
all [p1,p2,t1,t2,c]: succeeds find_delete(?p1,?t1,?p2,?c) &
 succeeds class_member(?t2,?c) & succeeds partition(?p1) =>
  succeeds equivalent(?t1,?t2,?p1),
assume(succeeds find_delete(?p1,?t1,?p2,?c) & succeeds class_member(?t2,?c) &
 succeeds partition(?p1),
 [succeeds partition_member(?t1,?p1) & succeeds member(?c,?p1) \/
  fails partition_member(?t1,?p1) & ?c = cl(?t1,[]) by 
   lemma(find_delete:member),
  cases(succeeds partition_member(?t1,?p1) & succeeds member(?c,?p1),
   [succeeds class_member(?t1,?c) by lemma(find_delete:class_member),
    succeeds equivalent(?t1,?t2,?p1) by 
     lemma(equivalent:characterization:2)],
   fails partition_member(?t1,?p1) & ?c = cl(?t1,[]),
   [succeeds find(?p1,?t1,?t1) by lemma(find:characterization:3),
    def succeeds class_member(?t2,cl(?t1,[])) by completion,
    cases(?t2 = ?t1,
     [],
     succeeds partition_member(?t2,[]),
     [def succeeds partition_member(?t2,[]) by completion,ff],
     ?t2 = ?t1),
    succeeds find(?p1,?t2,?t1),
    succeeds equivalent(?t1,?t2,?p1) by sld],
   succeeds equivalent(?t1,?t2,?p1))],
 succeeds equivalent(?t1,?t2,?p1))
).

:- lemma(union_find:union_findL:equivalent,
all [t1,t2,p1,p4]: succeeds union_find(?t1,?t2,?p1,?p4) &
  succeeds term(?t1) & succeeds term(?t2) &
  succeeds partition(?p1) => succeeds equivalent(?t1,?t2,?p4),
assume(succeeds union_find(?t1,?t2,?p1,?p4) & succeeds term(?t1) &
 succeeds term(?t2) & succeeds partition(?p1),
 [def succeeds union_find(?t1,?t2,?p1,?p4) by completion,
  exist([p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   succeeds find_delete(?p1,?t1,?p2,?c1) &
   (succeeds class_member(?t2,?c1) & ?p4 = ?p1 \/
    fails class_member(?t2,?c1) & succeeds find_delete(?p2,?t2,?p3,?c2) &
    ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
    (succeeds var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
     fails var_form(?t3) &
     (succeeds var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
      fails var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
      succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)))),
   [succeeds class_member(?t1,?c1) by lemma(find_delete:class_member),
    cases(succeeds class_member(?t2,?c1) & ?p4 = ?p1,
     [succeeds equivalent(?t1,?t2,?p1) by 
       lemma(find_delete:class_member:equivalent),
      succeeds equivalent(?t1,?t2,?p4)],
     fails class_member(?t2,?c1) & succeeds find_delete(?p2,?t2,?p3,?c2) &
     ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
     (succeeds var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] \/
      fails var_form(?t3) &
      (succeeds var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
       fails var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
       succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4))),
     [succeeds class_member(?t2,?c2) by lemma(find_delete:class_member),
      cases(succeeds var_form(?t3) & ?p4 = [cl(?t4,[?c1|?q2])|?p3],
       succeeds equivalent(?t1,?t2,?p4) by 
        lemma(find_delete:twice:equivalent),
       fails var_form(?t3) &
       (succeeds var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3] \/
        fails var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
        succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)),
       cases(succeeds var_form(?t4) & ?p4 = [cl(?t3,[?c2|?q1])|?p3],
        [succeeds equivalent(?t2,?t1,?p4) by 
          lemma(find_delete:twice:equivalent),
	 succeeds partition(?p4) by corollary(union_find:types),
	 succeeds equivalent(?t1,?t2,?p4) by lemma(equivalent:symmetric)],
        fails var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
        succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4),
        [[cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
	 succeeds equivalent(?t1,?t2,[cl(?t4,[?c1|?q2])|?p3]) by 
          lemma(find_delete:twice:equivalent), 
	 succeeds termL(?t1L) & succeeds termL(?t2L) &
         succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
          lemma(find_delete:twice:partition),
	 sub_partition([cl(?t4,[?c1|?q2])|?p3],?p4) by 
          corollary(union_findL:sub_partition),
	 all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) &
	  succeeds equivalent(?t1,?t2,[cl(?t4,[?c1|?q2])|?p3]) => 
	   succeeds equivalent(?t1,?t2,?p4) by 
	  elimination(sub_partition,2),
	 succeeds equivalent(?t1,?t2,?p4)],
        succeeds equivalent(?t1,?t2,?p4)),
       succeeds equivalent(?t1,?t2,?p4))],
     succeeds equivalent(?t1,?t2,?p4))],
   succeeds equivalent(?t1,?t2,?p4))],
 succeeds equivalent(?t1,?t2,?p4))
).

:- lemma(union_findL:equivalent,
all [tl1,tl2,p1,p4]: succeeds union_findL(?tl1,?tl2,?p1,?p4) &
  succeeds termL(?tl1) & succeeds termL(?tl2) &
  succeeds partition(?p1) => succeeds equivalentL(?tl1,?tl2,?p4),
[induction(
  [all [tl1,tl2,p1,p4]: succeeds union_findL(?tl1,?tl2,?p1,?p4) => 
     succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p1) =>
      succeeds equivalentL(?tl1,?tl2,?p4)],
  [step([p],
    [],
    [],
    succeeds termL([]) & succeeds termL([]) & succeeds partition(?p) => 
     succeeds equivalentL([],[],?p)),
   step([t1,t1L,t2,t2L,p1,p3,p2],
    [succeeds termL(?t1L) & succeeds termL(?t2L) & succeeds partition(?p2) =>
      succeeds equivalentL(?t1L,?t2L,?p3),
     succeeds union_find(?t1,?t2,?p1,?p2),
     succeeds union_findL(?t1L,?t2L,?p2,?p3)],
    assume(succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
     succeeds partition(?p1),
     [def succeeds termL([?t1|?t1L]) by completion,
      def succeeds termL([?t2|?t2L]) by completion,
      succeeds equivalent(?t1,?t2,?p2) by 
       lemma(union_find:union_findL:equivalent),
      succeeds partition(?p2) by corollary(union_find:types),
      sub_partition(?p2,?p3) by corollary(union_findL:sub_partition),
      all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) &
       succeeds equivalent(?t1,?t2,?p2) => 
	succeeds equivalent(?t1,?t2,?p3) by elimination(sub_partition,2),
      succeeds equivalent(?t1,?t2,?p3),
      succeeds equivalentL(?t1L,?t2L,?p3),
      succeeds equivalentL([?t1|?t1L],[?t2|?t2L],?p3) by sld],
     succeeds equivalentL([?t1|?t1L],[?t2|?t2L],?p3)),
    succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) &
    succeeds partition(?p1) => 
     succeeds equivalentL([?t1|?t1L],[?t2|?t2L],?p3))]),
 assume(succeeds union_findL(?tl1,?tl2,?p1,?p4) & succeeds termL(?tl1) &
  succeeds termL(?tl2) & succeeds partition(?p1),
  [succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p1) =>
    succeeds equivalentL(?tl1,?tl2,?p4),
   succeeds termL(?tl1) & succeeds termL(?tl2) & succeeds partition(?p1) =>
    succeeds equivalentL(?tl1,?tl2,?p4),
   succeeds equivalentL(?tl1,?tl2,?p4)],
  succeeds equivalentL(?tl1,?tl2,?p4))]
).

:- theorem(unify_term_part:equivalent,
all [t1,t2,p]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_part(?t1,?t2,?p) =>
  succeeds equivalent(?t1,?t2,?p),
assume(succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_part(?t1,?t2,?p),
 [def succeeds unify_terms_part(?t1,?t2,?p) by completion,
  succeeds partition([]) by sld,
  succeeds equivalent(?t1,?t2,?p) by 
   lemma(union_find:union_findL:equivalent)],
 succeeds equivalent(?t1,?t2,?p))
).

:- definition_pred(open,2,
all [p,l]: open(?p,?l) <=>
 (all [f1,f2,tl1,tl2]: succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p) =>
    succeeds member([?f1|?tl1],?l) \/
    (?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p)))
).

:- lemma(open:nil,
all l: open([],?l),
[assume(succeeds parent_terms([?f1|?tl1],[?f2|?tl2],[]),
  [def succeeds parent_terms([?f1|?tl1],[?f2|?tl2],[]) by completion,
   exist([q,0],
    succeeds parent_partition(cl([?f2|?tl2],?q),[]) &
    succeeds member(cl([?f1|?tl1],?0),?q),
    [def succeeds parent_partition(cl([?f2|?tl2],?q),[]) by completion,
     exist(c2,
      succeeds member(?c2,[]) & succeeds parent_star(cl([?f2|?tl2],?q),?c2),
      [def succeeds member(?c2,[]) by completion,ff],
      ff)],
    ff)],
  succeeds member([?f1|?tl1],?l) \/
  ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,[])),
 open([],?l) by introduction(open,2)]
).

:- lemma(class_member:partition_member:parent,
(all [t,c]: succeeds class_member(?t,?c) =>
   (ex q: succeeds parent_star(cl(?t,?q),?c))) &
(all [t,p]: succeeds partition_member(?t,?p) =>
   (ex q: succeeds parent_partition(cl(?t,?q),?p))),
induction(
 [all [t,c]: succeeds class_member(?t,?c) => 
    (ex q: succeeds parent_star(cl(?t,?q),?c)),
  all [t,p]: succeeds partition_member(?t,?p) => 
    (ex q: succeeds parent_partition(cl(?t,?q),?p))],
 [step([t,0],
   [],
   [succeeds parent_star(cl(?t,?0),cl(?t,?0)) by sld,
    ex q: succeeds parent_star(cl(?t,?q),cl(?t,?0))],
   ex q: succeeds parent_star(cl(?t,?q),cl(?t,?0))),
  step([t,0,p],
   [ex q: succeeds parent_partition(cl(?t,?q),?p),
    succeeds partition_member(?t,?p)],
   exist(q,
    succeeds parent_partition(cl(?t,?q),?p),
    [def succeeds parent_partition(cl(?t,?q),?p) by completion,
     exist(c2,
      succeeds member(?c2,?p) & succeeds parent_star(cl(?t,?q),?c2),
      [succeeds parent(?c2,cl(?0,?p)) by sld,
       succeeds parent_star(cl(?t,?q),cl(?0,?p)) by sld,
       ex q: succeeds parent_star(cl(?t,?q),cl(?0,?p))],
      ex q: succeeds parent_star(cl(?t,?q),cl(?0,?p)))],
    ex q: succeeds parent_star(cl(?t,?q),cl(?0,?p))),
   ex q: succeeds parent_star(cl(?t,?q),cl(?0,?p))),
  step([t,c,0],
   [ex q: succeeds parent_star(cl(?t,?q),?c),
    succeeds class_member(?t,?c)],
   exist(q,
    succeeds parent_star(cl(?t,?q),?c),
    [succeeds member(?c,[?c|?0]) by sld,
     succeeds parent_partition(cl(?t,?q),[?c|?0]) by sld,
     ex q: succeeds parent_partition(cl(?t,?q),[?c|?0])],
    ex q: succeeds parent_partition(cl(?t,?q),[?c|?0])),
   ex q: succeeds parent_partition(cl(?t,?q),[?c|?0])),
  step([t,0,p],
   [ex q: succeeds parent_partition(cl(?t,?q),?p),
    succeeds partition_member(?t,?p)],
   exist(q,
    succeeds parent_partition(cl(?t,?q),?p),
    [def succeeds parent_partition(cl(?t,?q),?p) by completion,
     exist(c2,
      succeeds member(?c2,?p) & succeeds parent_star(cl(?t,?q),?c2),
      [succeeds member(?c2,[?0|?p]) by sld,
       succeeds parent_partition(cl(?t,?q),[?0|?p]) by sld,
       ex q: succeeds parent_partition(cl(?t,?q),[?0|?p])],
      ex q: succeeds parent_partition(cl(?t,?q),[?0|?p]))],
    ex q: succeeds parent_partition(cl(?t,?q),[?0|?p])),
   ex q: succeeds parent_partition(cl(?t,?q),[?0|?p]))])
).

:- lemma(class_member:parent,
all [t,c1,c2]: succeeds class_member(?t,?c1) &
 succeeds parent(?c1,?c2) => succeeds class_member(?t,?c2),
assume(succeeds class_member(?t,?c1) & succeeds parent(?c1,?c2),
 [def succeeds parent(?c1,?c2) by completion,
  exist([0,p],
   ?c2 = cl(?0,?p) & succeeds member(?c1,?p),
   [succeeds partition_member(?t,?p) by 
     lemma(partition_member:member:class_member),
    succeeds class_member(?t,cl(?0,?p)) by sld,
    succeeds class_member(?t,?c2)],
   succeeds class_member(?t,?c2))],
 succeeds class_member(?t,?c2))
).

:- lemma(class_member:parent_star,
all [t,c1,c2]: succeeds parent_star(?c1,?c2) &
 succeeds class_member(?t,?c1) => succeeds class_member(?t,?c2),
[induction(
  [all [c1,c2]: succeeds parent_star(?c1,?c2) => 
     (all t: succeeds class_member(?t,?c1) => succeeds class_member(?t,?c2))],
  [step([c],
    [],
    succeeds class_member(?t,?c) => succeeds class_member(?t,?c),
    all t: succeeds class_member(?t,?c) => succeeds class_member(?t,?c)),
   step([c1,c3,c2],
    [all t: succeeds class_member(?t,?c1) => succeeds class_member(?t,?c2),
     succeeds parent_star(?c1,?c2),
     succeeds parent(?c2,?c3)],
    assume(succeeds class_member(?t,?c1),
     [succeeds class_member(?t,?c2),
      succeeds class_member(?t,?c3) by lemma(class_member:parent)],
     succeeds class_member(?t,?c3)),
    all t: succeeds class_member(?t,?c1) => succeeds class_member(?t,?c3))]),
 assume(succeeds parent_star(?c1,?c2) & succeeds class_member(?t,?c1),
  [all t: succeeds class_member(?t,?c1) => succeeds class_member(?t,?c2),
   succeeds class_member(?t,?c1) => succeeds class_member(?t,?c2),
   succeeds class_member(?t,?c2)],
  succeeds class_member(?t,?c2))]
).

:- lemma(parent:parent_star,
all [c1,c2,c3]: succeeds parent_star(?c2,?c3) &
 succeeds parent(?c1,?c2) =>
  succeeds parent_star(?c1,?c3),
[induction(
  [all [c2,c3]: succeeds parent_star(?c2,?c3) => 
     (all c1: succeeds parent(?c1,?c2) => succeeds parent_star(?c1,?c3))],
  [step([c],
    [],
    assume(succeeds parent(?c1,?c),
     [succeeds parent_star(?c1,?c1) by sld,
      succeeds parent_star(?c1,?c) by sld],
     succeeds parent_star(?c1,?c)),
    all c1: succeeds parent(?c1,?c) => succeeds parent_star(?c1,?c)),
   step([c1,c3,c2],
    [all 0: succeeds parent(?0,?c1) => succeeds parent_star(?0,?c2),
     succeeds parent_star(?c1,?c2),
     succeeds parent(?c2,?c3)],
    assume(succeeds parent(?0,?c1),
     [succeeds parent_star(?0,?c2),
      succeeds parent_star(?0,?c3) by sld],
     succeeds parent_star(?0,?c3)),
    all 0: succeeds parent(?0,?c1) => succeeds parent_star(?0,?c3))]),
 assume(succeeds parent_star(?c2,?c3) & succeeds parent(?c1,?c2),
  [all c1: succeeds parent(?c1,?c2) => succeeds parent_star(?c1,?c3),
   succeeds parent(?c1,?c2) => succeeds parent_star(?c1,?c3),
   succeeds parent_star(?c1,?c3)],
  succeeds parent_star(?c1,?c3))]
).

:- lemma(parent:parent_partition,
all [c1,c2,p]: succeeds parent_partition(?c2,?p) &
 succeeds parent(?c1,?c2) =>
  succeeds parent_partition(?c1,?p),
assume(succeeds parent_partition(?c2,?p) & succeeds parent(?c1,?c2),
 [def succeeds parent_partition(?c2,?p) by completion,
  exist(1,
   succeeds member(?1,?p) & succeeds parent_star(?c2,?1),
   [succeeds parent_star(?c1,?1) by lemma(parent:parent_star),
    succeeds parent_partition(?c1,?p) by sld],
   succeeds parent_partition(?c1,?p))],
 succeeds parent_partition(?c1,?p))
).

:- definition_pred(equivalent_classes,3,
all [c1,c2,p]: equivalent_classes(?c1,?c2,?p) <=>
 (all [f1,f2,tl1,tl2,q1,q2]: ?c1 = cl([?f1|?tl1],?q1) &
   ?c2 = cl([?f2|?tl2],?q2) =>
    ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p))
).

:- lemma(parent:open,
all [c1,c2,p]: succeeds parent(?c1,?c2) &
 succeeds parent_partition(?c2,?p) & open(?p,[]) =>
  equivalent_classes(?c1,?c2,?p),
assume(succeeds parent(?c1,?c2) & succeeds parent_partition(?c2,?p) &
 open(?p,[]),
 [all [f1,f2,tl1,tl2]: succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p) => 
    succeeds member([?f1|?tl1],[]) \/
    ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p) by elimination(open,2),
  assume(?c1 = cl([?f1|?tl1],?q1) & ?c2 = cl([?f2|?tl2],?q2),
   [def succeeds parent(cl([?f1|?tl1],?q1),cl([?f2|?tl2],?q2))
     by completion,
    succeeds parent_partition(cl([?f2|?tl2],?q2),?p),
    succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p) by sld,
    succeeds member([?f1|?tl1],[]) \/
    ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p),
    cases(succeeds member([?f1|?tl1],[]),
     [def succeeds member([?f1|?tl1],[]) by completion,ff],
     ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p),
     [],
     ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p))],
   ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p)),
  equivalent_classes(?c1,?c2,?p) by introduction(equivalent_classes,3)],
 equivalent_classes(?c1,?c2,?p))
).

:- lemma(parent:types,
all [c1,c2]: succeeds parent(?c1,?c2) & succeeds class(?c2) =>
  succeeds class(?c1),
assume(succeeds parent(?c1,?c2) & succeeds class(?c2),
 [def succeeds parent(?c1,?c2) by completion,
  exist([0,p],
   ?c2 = cl(?0,?p) & succeeds member(?c1,?p),
   [def succeeds class(cl(?0,?p)) by completion,
    succeeds class(?c1) by lemma(partition:member)],
   succeeds class(?c1))],
 succeeds class(?c1))
).

:- lemma(parent_star:types,
all [c1,c2]: succeeds parent_star(?c1,?c2) & succeeds class(?c2) =>
  succeeds class(?c1),
[induction(
  [all [c1,c2]: succeeds parent_star(?c1,?c2) => succeeds class(?c2) => 
      succeeds class(?c1)],
  [step([c],[],[],succeeds class(?c) => succeeds class(?c)),
   step([c1,c3,c2],
    [succeeds class(?c2) => succeeds class(?c1),
     succeeds parent_star(?c1,?c2),
     succeeds parent(?c2,?c3)],
    assume(succeeds class(?c3),
     [succeeds class(?c2) by lemma(parent:types),
      succeeds class(?c1)],
     succeeds class(?c1)),
    succeeds class(?c3) => succeeds class(?c1))]),
 assume(succeeds parent_star(?c1,?c2) & succeeds class(?c2),
  [succeeds class(?c2) => succeeds class(?c1),
   succeeds class(?c2) => succeeds class(?c1),
   succeeds class(?c1)],
  succeeds class(?c1))]
).

:- lemma(parent_partition:types,
all [c,p]: succeeds parent_partition(?c,?p) & succeeds partition(?p) =>
  succeeds class(?c),
assume(succeeds parent_partition(?c,?p) & succeeds partition(?p),
 [def succeeds parent_partition(?c,?p) by completion,
  exist(c2,
   succeeds member(?c2,?p) & succeeds parent_star(?c,?c2),
   [succeeds class(?c2) by lemma(partition:member),
    succeeds class(?c) by lemma(parent_star:types)],
   succeeds class(?c))],
 succeeds class(?c))
).

:- lemma(parent_terms:types,
all [t1,t2,p]: succeeds parent_terms(?t1,?t2,?p) & succeeds partition(?p) =>
  succeeds term(?t1) & succeeds term(?t2),
assume(succeeds parent_terms(?t1,?t2,?p) & succeeds partition(?p),
 [def succeeds parent_terms(?t1,?t2,?p) by completion,
  exist([q,0],
   succeeds parent_partition(cl(?t2,?q),?p) &
   succeeds member(cl(?t1,?0),?q),
   [succeeds class(cl(?t2,?q)) by lemma(parent_partition:types),
    def succeeds class(cl(?t2,?q)) by completion,
    succeeds class(cl(?t1,?0)) by lemma(partition:member),
    def succeeds class(cl(?t1,?0)) by completion,
    succeeds term(?t1),
    succeeds term(?t2)],
   succeeds term(?t1) & succeeds term(?t2))],
 succeeds term(?t1) & succeeds term(?t2))
).

:- lemma(equivalent_classes:reflexive,
all [c,p]: succeeds class(?c) & succeeds partition(?p) =>
  equivalent_classes(?c,?c,?p),
assume(succeeds class(?c) & succeeds partition(?p),
 [assume(?c = cl([?f1|?tl1],?q1) & ?c = cl([?f2|?tl2],?q2),
   [?tl1 = ?tl2,
    def succeeds class(cl([?f1|?tl1],?q1)) by completion,
    def succeeds term([?f1|?tl1]) by completion,
    succeeds equivalentL(?tl1,?tl1,?p) by lemma(equivalentL:reflexive),
    succeeds equivalentL(?tl1,?tl2,?p)],
   ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p)),
  equivalent_classes(?c,?c,?p) by introduction(equivalent_classes,3)],
 equivalent_classes(?c,?c,?p))
).

:- lemma(equivalent_classes:transitive,
all [c1,c2,c3,p]: succeeds parent_star(?c1,?c2) & succeeds class(?c2) &
 equivalent_classes(?c1,?c2,?p) & equivalent_classes(?c2,?c3,?p) =>
  equivalent_classes(?c1,?c3,?p),
assume(succeeds parent_star(?c1,?c2) & succeeds class(?c2) &
 equivalent_classes(?c1,?c2,?p) & equivalent_classes(?c2,?c3,?p),
 [all [f1,f2,tl1,tl2,q1,q2]: ?c1 = cl([?f1|?tl1],?q1) &
   ?c2 = cl([?f2|?tl2],?q2) => ?f1 = ?f2 &
    succeeds equivalentL(?tl1,?tl2,?p) by elimination(equivalent_classes,3), 
  all [f2,f3,tl2,tl3,q2,q3]: ?c2 = cl([?f2|?tl2],?q2) &
   ?c3 = cl([?f3|?tl3],?q3) => ?f2 = ?f3 &
    succeeds equivalentL(?tl2,?tl3,?p) by 
   elimination(equivalent_classes,3),
  assume(?c1 = cl([?f1|?tl1],?q1) & ?c3 = cl([?f3|?tl3],?q3),
   [def succeeds class(?c2) by completion,
    exist([t,q2],
     ?c2 = cl(?t,?q2) & succeeds term(?t) & succeeds partition(?q2) &
     fails partition_member(?t,?q2) & fails not_var_class(?t,?q2),
     [def succeeds term(?t) by completion,
      cases(ex x: ?t = $(?x) & succeeds atomic(?x),
       exist(x,
	?t = $(?x) & succeeds atomic(?x),
	[succeeds parent_star(cl([?f1|?tl1],?q1),cl($(?x),?q2)),
	 succeeds class_member([?f1|?tl1],cl($(?x),?q2)) by 
          lemma(class_member:parent_star),
	 def succeeds class_member([?f1|?tl1],cl($(?x),?q2)) by completion,
	 succeeds partition_member([?f1|?tl1],?q2),
	 fails var_form([?f1|?tl1]),
	 succeeds not_var_class($(?x),?q2) by sld,
	 succeeds not_var_class(?t,?q2),
	 ff],
	?f1 = ?f3 & succeeds equivalentL(?tl1,?tl3,?p)),
       ex [f2,tl2]: ?t = [?f2|?tl2] & succeeds atomic(?f2) & 
	succeeds termL(?tl2),
       exist([f2,tl2],
	?t = [?f2|?tl2] & succeeds atomic(?f2) & succeeds termL(?tl2),
	[?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p),
	 ?f2 = ?f3 & succeeds equivalentL(?tl2,?tl3,?p),
	 ?f1 = ?f3,
	 succeeds equivalentL(?tl1,?tl3,?p) by 
          lemma(equivalentL:transitive)],
	?f1 = ?f3 & succeeds equivalentL(?tl1,?tl3,?p)),
       ?f1 = ?f3 & succeeds equivalentL(?tl1,?tl3,?p))],
     ?f1 = ?f3 & succeeds equivalentL(?tl1,?tl3,?p))],
   ?f1 = ?f3 & succeeds equivalentL(?tl1,?tl3,?p)),
  equivalent_classes(?c1,?c3,?p) by introduction(equivalent_classes,3)],
 equivalent_classes(?c1,?c3,?p))
).

:- lemma(parent_star:open,
all p: succeeds partition(?p) & open(?p,[]) =>
  (all [c1,c2]: succeeds parent_star(?c1,?c2) & 
    succeeds parent_partition(?c2,?p) =>
     equivalent_classes(?c1,?c2,?p)),
assume(succeeds partition(?p) & open(?p,[]),
 [induction(
   [all [c1,c2]: succeeds parent_star(?c1,?c2) => 
      succeeds parent_partition(?c2,?p) => equivalent_classes(?c1,?c2,?p)],
   [step([c],
     [],
     assume(succeeds parent_partition(?c,?p),
      [succeeds class(?c) by lemma(parent_partition:types),
       equivalent_classes(?c,?c,?p) by 
        lemma(equivalent_classes:reflexive)],
      equivalent_classes(?c,?c,?p)),
     succeeds parent_partition(?c,?p) => equivalent_classes(?c,?c,?p)),
    step([c1,c3,c2],
     [succeeds parent_partition(?c2,?p) => equivalent_classes(?c1,?c2,?p),
      succeeds parent_star(?c1,?c2),
      succeeds parent(?c2,?c3)],
     assume(succeeds parent_partition(?c3,?p),
      [succeeds parent_partition(?c2,?p) by 
        lemma(parent:parent_partition),
       succeeds class(?c2) by lemma(parent_partition:types),
       equivalent_classes(?c1,?c2,?p),
       equivalent_classes(?c2,?c3,?p) by lemma(parent:open),
       equivalent_classes(?c1,?c3,?p) by 
        lemma(equivalent_classes:transitive)],
      equivalent_classes(?c1,?c3,?p)),
     succeeds parent_partition(?c3,?p) => equivalent_classes(?c1,?c3,?p))]),
  assume(succeeds parent_star(?c1,?c2) & succeeds parent_partition(?c2,?p),
   [succeeds parent_partition(?c2,?p) => equivalent_classes(?c1,?c2,?p),
    succeeds parent_partition(?c2,?p) => equivalent_classes(?c1,?c2,?p),
    equivalent_classes(?c1,?c2,?p)],
   equivalent_classes(?c1,?c2,?p))],
 all [c1,c2]: succeeds parent_star(?c1,?c2) &
  succeeds parent_partition(?c2,?p) => equivalent_classes(?c1,?c2,?p))
).

:- lemma(open:solved,
all p: succeeds partition(?p) & open(?p,[]) =>
  succeeds solved(?p),
assume(succeeds partition(?p) & open(?p,[]),
 [all [c1,c2]: succeeds parent_star(?c1,?c2) &
   succeeds parent_partition(?c2,?p) => equivalent_classes(?c1,?c2,?p) by 
   lemma(parent_star:open),
  succeeds list(?p) by lemma(partition:list),
  terminates member(cl([?x1|?t1L],?p1),?p) by lemma(member:termination),
  succeeds member(cl([?x1|?t1L],?p1),?p) \/
  fails member(cl([?x1|?t1L],?p1),?p),
  cases(succeeds member(cl([?x1|?t1L],?p1),?p),
   [succeeds class(cl([?x1|?t1L],?p1)) by lemma(partition:member),
    def succeeds class(cl([?x1|?t1L],?p1)) by completion,
    terminates partition_member([?x2|?t2L],?p1) by 
     corollary(partition_member:termination),
    succeeds partition_member([?x2|?t2L],?p1) \/
    fails partition_member([?x2|?t2L],?p1),
    cases(succeeds partition_member([?x2|?t2L],?p1),
     [succeeds parent_star(cl([?x1|?t1L],?p1),cl([?x1|?t1L],?p1)) by sld,
      succeeds parent_partition(cl([?x1|?t1L],?p1),?p) by sld,
      ex q: succeeds parent_partition(cl([?x2|?t2L],?q),?p1) by 
       lemma(class_member:partition_member:parent),    
      exist(q,
       succeeds parent_partition(cl([?x2|?t2L],?q),?p1),
       [def succeeds parent_partition(cl([?x2|?t2L],?q),?p1) by completion,
	exist(c2,
	 succeeds member(?c2,?p1) &
	 succeeds parent_star(cl([?x2|?t2L],?q),?c2),
	 [succeeds parent(?c2,cl([?x1|?t1L],?p1)) by sld,
	  succeeds parent_star(cl([?x2|?t2L],?q),cl([?x1|?t1L],?p1)) by sld,
	  succeeds parent_partition(cl([?x1|?t1L],?p1),?p),
	  equivalent_classes(cl([?x2|?t2L],?q),cl([?x1|?t1L],?p1),?p),
	  all [f1,f2,tl1,tl2,q1,q2]: 
	   cl([?x2|?t2L],?q) = cl([?f1|?tl1],?q1) &
	   cl([?x1|?t1L],?p1) = cl([?f2|?tl2],?q2) => ?f1 = ?f2 &
	    succeeds equivalentL(?tl1,?tl2,?p) by 
	   elimination(equivalent_classes,3),
	  cl([?x2|?t2L],?q) = cl([?x2|?t2L],?q),
	  cl([?x1|?t1L],?p1) = cl([?x1|?t1L],?p1),
	  ?x2 = ?x1 & succeeds equivalentL(?t2L,?t1L,?p),
	  ?x1 = ?x2 & succeeds equivalentL(?t1L,?t2L,?p) by 
           lemma(equivalentL:symmetric)],
	 ?x1 = ?x2 & succeeds equivalentL(?t1L,?t2L,?p))],
       ?x1 = ?x2 & succeeds equivalentL(?t1L,?t2L,?p))],
     fails partition_member([?x2|?t2L],?p1),
     [],
     fails partition_member([?x2|?t2L],?p1) \/
     ?x1 = ?x2 & succeeds equivalentL(?t1L,?t2L,?p))],
   fails member(cl([?x1|?t1L],?p1),?p),
   [],
   fails member(cl([?x1|?t1L],?p1),?p) \/
   fails partition_member([?x2|?t2L],?p1) \/
   ?x1 = ?x2 & succeeds equivalentL(?t1L,?t2L,?p)),
  all [x1,t1L,p1,x2,t2L]: fails member(cl([?x1|?t1L],?p1),?p) \/
   fails partition_member([?x2|?t2L],?p1) \/
   ?x1 = ?x2 & succeeds equivalentL(?t1L,?t2L,?p),
  fails not_solved(?p) by completion,
  succeeds solved(?p) by sld],
 succeeds solved(?p))
).

:- lemma(parent_terms:cons,
all [t1,t2,t,q,p]: succeeds parent_terms(?t1,?t2,[cl(?t,?q)|?p]) =>
  succeeds parent_terms(?t1,?t2,?p) \/
  succeeds parent_terms(?t1,?t2,?q) \/
  ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q)),
assume(succeeds parent_terms(?t1,?t2,[cl(?t,?q)|?p]),
 [def succeeds parent_terms(?t1,?t2,[cl(?t,?q)|?p]) by completion,
  exist([q2,q1],
   succeeds parent_partition(cl(?t2,?q2),[cl(?t,?q)|?p]) &
   succeeds member(cl(?t1,?q1),?q2),
   [def succeeds parent_partition(cl(?t2,?q2),[cl(?t,?q)|?p]) by completion,
    exist(c,
     succeeds member(?c,[cl(?t,?q)|?p]) &
     succeeds parent_star(cl(?t2,?q2),?c),
     [def succeeds member(?c,[cl(?t,?q)|?p]) by completion,
      cases(?c = cl(?t,?q),
       [def succeeds parent_star(cl(?t2,?q2),cl(?t,?q)) by completion,
	cases(?t2 = ?t & ?q2 = ?q,
         [succeeds member(cl(?t1,?q1),?q),
	  ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q))],
         ex c2: succeeds parent_star(cl(?t2,?q2),?c2) &
          succeeds parent(?c2,cl(?t,?q)),
         exist(c2,
          succeeds parent_star(cl(?t2,?q2),?c2) &
          succeeds parent(?c2,cl(?t,?q)),
          [def succeeds parent(?c2,cl(?t,?q)) by completion,
	   succeeds parent_partition(cl(?t2,?q2),?q) by sld,
	   succeeds parent_terms(?t1,?t2,?q) by sld],
          succeeds parent_terms(?t1,?t2,?q) \/
          ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q))),
         succeeds parent_terms(?t1,?t2,?q) \/
         ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q)))],
       succeeds member(?c,?p),
       [succeeds parent_partition(cl(?t2,?q2),?p) by sld,
	succeeds parent_terms(?t1,?t2,?p) by sld],
       succeeds parent_terms(?t1,?t2,?p) \/
       succeeds parent_terms(?t1,?t2,?q) \/
       ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q)))],
     succeeds parent_terms(?t1,?t2,?p) \/ succeeds parent_terms(?t1,?t2,?q) \/
     ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q)))],
   succeeds parent_terms(?t1,?t2,?p) \/ succeeds parent_terms(?t1,?t2,?q) \/
   ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q)))],
 succeeds parent_terms(?t1,?t2,?p) \/ succeeds parent_terms(?t1,?t2,?q) \/
 ?t2 = ?t & (ex q1: succeeds member(cl(?t1,?q1),?q)))
).

:- lemma(find_delete:sub,
all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) =>
  sub(?p2,?p1),
induction(
 [all [p1,t,p2,c]: succeeds find_delete(?p1,?t,?p2,?c) => sub(?p2,?p1)],
 [step([t],[],
   sub([],[]) by lemma(sub:reflexive),
   sub([],[])),
  step([c1,p1,t,p3,c2,p2],
   [succeeds class_member(?t,?c1),
    ?c2 = ?c1,
    ?p3 = ?p1],
   [sub(?p1,[?c1|?p1]) by lemma(sub:cons),
    sub(?p3,[?c1|?p1])],
   sub(?p3,[?c1|?p1])),
  step([c1,p1,t,p3,c2,p2],
   [sub(?p2,?p1),
    fails class_member(?t,?c1),
    succeeds find_delete(?p1,?t,?p2,?c2),
    ?p3 = [?c1|?p2]],
   [sub([?c1|?p2],[?c1|?p1]) by lemma(sub:cons:both),
    sub(?p3,[?c1|?p1])],
   sub(?p3,[?c1|?p1]))])
).

:- corollary(find_delete:twice:sub,
all [t1,t2,p1,p2,p3,c1,c2]: succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2) => sub(?p3,?p1),
assume(succeeds find_delete(?p1,?t1,?p2,?c1) &
 succeeds find_delete(?p2,?t2,?p3,?c2),
 [sub(?p2,?p1) by lemma(find_delete:sub),
  sub(?p3,?p2) by lemma(find_delete:sub),
  sub(?p3,?p1) by lemma(sub:transitive)],
 sub(?p3,?p1))
).

:- lemma(parent_terms:sub,
all [t1,t2,p1,p2]: succeeds parent_terms(?t1,?t2,?p1) & sub(?p1,?p2) =>
  succeeds parent_terms(?t1,?t2,?p2),
assume(succeeds parent_terms(?t1,?t2,?p1) & sub(?p1,?p2),
 [def succeeds parent_terms(?t1,?t2,?p1) by completion,
  exist([q,0],
   succeeds parent_partition(cl(?t2,?q),?p1) &
   succeeds member(cl(?t1,?0),?q),
   [def succeeds parent_partition(cl(?t2,?q),?p1) by completion,
    exist(c2,
     succeeds member(?c2,?p1) & succeeds parent_star(cl(?t2,?q),?c2),
     [all x: succeeds member(?x,?p1) => succeeds member(?x,?p2) by 
       elimination(sub,2),
      succeeds member(?c2,?p2),
      succeeds parent_partition(cl(?t2,?q),?p2) by sld,
      succeeds parent_terms(?t1,?t2,?p2) by sld],
     succeeds parent_terms(?t1,?t2,?p2))],
   succeeds parent_terms(?t1,?t2,?p2))],
 succeeds parent_terms(?t1,?t2,?p2))
).

:- lemma(parent_terms:nil,
all [t1,t2,p]: succeeds parent_terms(?t1,?t2,?p) => ?p <> [],
assume(succeeds parent_terms(?t1,?t2,?p),
 [def succeeds parent_terms(?t1,?t2,?p) by completion,
  exist([q,0],
   succeeds parent_partition(cl(?t2,?q),?p) & 
   succeeds member(cl(?t1,?0),?q),
   [def succeeds parent_partition(cl(?t2,?q),?p) by completion,
    exist(c2,
     succeeds member(?c2,?p) & succeeds parent_star(cl(?t2,?q),?c2),
     [contra(?p = [],
       [def succeeds member(?c2,[]) by completion,ff]),
      ?p <> []],
     ?p <> [])],
   ?p <> [])],
 ?p <> [])
).

:- lemma(find_delete:class,
all [p1,t1,p2,c1,q1,t3]: succeeds find_delete(?p1,?t1,?p2,?c1) &
 ?c1 = cl(?t3,?q1) => succeeds member(?c1,?p1) \/ ?q1 = [],
assume(succeeds find_delete(?p1,?t1,?p2,?c1) & ?c1 = cl(?t3,?q1),
 [succeeds partition_member(?t1,?p1) & succeeds member(?c1,?p1) \/
  fails partition_member(?t1,?p1) & ?c1 = cl(?t1,[]) by 
   lemma(find_delete:member),
  cases(succeeds partition_member(?t1,?p1) & succeeds member(?c1,?p1),
   [],
   fails partition_member(?t1,?p1) & ?c1 = cl(?t1,[]),
   [],
   succeeds member(?c1,?p1) \/ ?q1 = [])],
 succeeds member(?c1,?p1) \/ ?q1 = [])
).

:- lemma(parent_terms:class:member,
all [t1,t2,c,q,t,p]: succeeds parent_terms(?t1,?t2,?q) &
 ?c = cl(?t,?q) & succeeds member(?c,?p) =>
  succeeds parent_terms(?t1,?t2,?p),
assume(succeeds parent_terms(?t1,?t2,?q) & ?c = cl(?t,?q) &
 succeeds member(?c,?p),
 [def succeeds parent_terms(?t1,?t2,?q) by completion,
  exist([q2,q1],
   succeeds parent_partition(cl(?t2,?q2),?q) & 
   succeeds member(cl(?t1,?q1),?q2),
   [def succeeds parent_partition(cl(?t2,?q2),?q) by completion,
    exist(c2,
     succeeds member(?c2,?q) & succeeds parent_star(cl(?t2,?q2),?c2),
     [succeeds parent(?c2,cl(?t,?q)) by sld,
      succeeds parent(?c2,?c),
      succeeds parent_star(cl(?t2,?q2),?c) by sld,
      succeeds parent_partition(cl(?t2,?q2),?p) by sld,
      succeeds parent_terms(?t1,?t2,?p) by sld],
     succeeds parent_terms(?t1,?t2,?p))],
   succeeds parent_terms(?t1,?t2,?p))],
 succeeds parent_terms(?t1,?t2,?p))
).

:- lemma(parent_terms:cons:member,
all [t1,t2,c1,c2,t3,t4,q1,q2,p]: succeeds parent_terms(?t1,?t2,[?c1|?q2]) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
 (succeeds member(?c1,?p) \/ ?q1 = []) &
 (succeeds member(?c2,?p) \/ ?q2 = []) =>
  succeeds parent_terms(?t1,?t2,?p),
assume(succeeds parent_terms(?t1,?t2,[?c1|?q2]) & ?c1 = cl(?t3,?q1) &
 ?c2 = cl(?t4,?q2) & (succeeds member(?c1,?p) \/ ?q1 = []) &
 (succeeds member(?c2,?p) \/ ?q2 = []),
 [succeeds parent_terms(?t1,?t2,[cl(?t3,?q1)|?q2]),
  succeeds parent_terms(?t1,?t2,?q2) \/ succeeds parent_terms(?t1,?t2,?q1) \/
  ?t2 = ?t3 & (ex q: succeeds member(cl(?t1,?q),?q1)) by 
   lemma(parent_terms:cons),
  cases(
   [case(succeeds parent_terms(?t1,?t2,?q2),
     [?q2 <> [] by lemma(parent_terms:nil),
      cases(succeeds member(?c2,?p),
       [],
       ?q2 = [],
       [],
       succeeds member(?c2,?p)),      
      succeeds parent_terms(?t1,?t2,?p) by 
       lemma(parent_terms:class:member)]),
    case(succeeds parent_terms(?t1,?t2,?q1),
     [?q1 <> [] by lemma(parent_terms:nil),
      cases(succeeds member(?c1,?p),
       [],
       ?q1 = [],
       [],
       succeeds member(?c1,?p)),
      succeeds parent_terms(?t1,?t2,?p) by 
       lemma(parent_terms:class:member)]),
    case(?t2 = ?t3 & (ex q: succeeds member(cl(?t1,?q),?q1)),
     [exist(q,
       succeeds member(cl(?t1,?q),?q1),
       [contra(?q1 = [],
	 [def succeeds member(cl(?t1,?q),[]) by completion,
	  ff]),
	cases(succeeds member(?c1,?p),
         [],
         ?q1 = [],
         [],
         succeeds member(?c1,?p)),
	succeeds parent(cl(?t1,?q),cl(?t2,?q1)) by sld,
	succeeds parent_star(?c1,?c1) by sld,
	succeeds parent_partition(?c1,?p) by sld,
	succeeds parent_partition(cl(?t2,?q1),?p),
	succeeds parent_terms(?t1,?t2,?p) by sld],
       succeeds parent_terms(?t1,?t2,?p))])],
   succeeds parent_terms(?t1,?t2,?p))],
 succeeds parent_terms(?t1,?t2,?p))
).

:- lemma(open:cons,
all [p,l,t]: open(?p,?l) => open(?p,[?t|?l]),
assume(open(?p,?l),
 [all [f1,f2,tl1,tl2]: succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p) => 
    succeeds member([?f1|?tl1],?l) \/
    ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p) by elimination(open,2),
  assume(succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p),
   [succeeds member([?f1|?tl1],?l) \/
    ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p),
    cases(succeeds member([?f1|?tl1],?l),
     [],
     ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p),
     [],
     succeeds member([?f1|?tl1],[?t|?l]) \/
     ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p))],
   succeeds member([?f1|?tl1],[?t|?l]) \/
   ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p)),
  open(?p,[?t|?l]) by introduction(open,2)],
 open(?p,[?t|?l]))
).

:- lemma(find_delete:twice:open,
all [t1,t2,t3,t4,p1,p2,p3,p4,c1,c2,q1,q2,l]: open(?p1,?l) &
 ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) & ?p4 = [cl(?t4,[?c1|?q2])|?p3] &
 succeeds partition(?p4) &
 (succeeds member(?c1,?p1) \/ ?q1 = []) &
 (succeeds member(?c2,?p1) \/ ?q2 = []) &
 sub(?p3,?p1) & sub_partition(?p1,?p4) &
 (succeeds var_form(?t3) \/ succeeds member(?t3,?l)) =>
  open(?p4,?l),
assume(open(?p1,?l) & ?c1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
 ?p4 = [cl(?t4,[?c1|?q2])|?p3] & succeeds partition(?p4) &
 (succeeds member(?c1,?p1) \/ ?q1 = []) &
 (succeeds member(?c2,?p1) \/ ?q2 = []) & sub(?p3,?p1) &
 sub_partition(?p1,?p4) &
 (succeeds var_form(?t3) \/ succeeds member(?t3,?l)),
 [all [f1,f2,tl1,tl2]: succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p1) => 
    succeeds member([?f1|?tl1],?l) \/
    ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p1) by elimination(open,2),
  assume(succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p4),
   [succeeds term([?f1|?tl1]) & succeeds term([?f2|?tl2]) by 
     lemma(parent_terms:types),
    def succeeds term([?f1|?tl1]) by completion,
    def succeeds term([?f2|?tl2]) by completion,
    succeeds parent_terms([?f1|?tl1],[?f2|?tl2],[cl(?t4,[?c1|?q2])|?p3]),
    succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p3) \/
    succeeds parent_terms([?f1|?tl1],[?f2|?tl2],[?c1|?q2]) \/
    [?f2|?tl2] = ?t4 & 
    (ex q: succeeds member(cl([?f1|?tl1],?q),[?c1|?q2])) by 
     lemma(parent_terms:cons),
    cases(
     [case(succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p3),
       [succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p1) by 
         lemma(parent_terms:sub),
	succeeds member([?f1|?tl1],?l) \/
	?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p1),
	cases(succeeds member([?f1|?tl1],?l),
         [],
         ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p1),
         [succeeds equivalentL(?tl1,?tl2,?p4) by 
           lemma(sub_partition:equivalentL),
	  ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4)],
         succeeds member([?f1|?tl1],?l) \/
         ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))]),
      case(succeeds parent_terms([?f1|?tl1],[?f2|?tl2],[?c1|?q2]),
       [succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p1) by 
         lemma(parent_terms:cons:member),
	succeeds member([?f1|?tl1],?l) \/
	?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p1),
	cases(succeeds member([?f1|?tl1],?l),
         [],
         ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p1),
         [succeeds equivalentL(?tl1,?tl2,?p4) by 
           lemma(sub_partition:equivalentL),
	  ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4)],
         succeeds member([?f1|?tl1],?l) \/
         ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))]),
      case([?f2|?tl2] = ?t4 &
       (ex q: succeeds member(cl([?f1|?tl1],?q),[?c1|?q2])),
       [exist(q,
         succeeds member(cl([?f1|?tl1],?q),[?c1|?q2]),
         [def succeeds member(cl([?f1|?tl1],?q),[?c1|?q2]) by completion,
          cases(?c1 = cl([?f1|?tl1],?q),
           [?t3 = [?f1|?tl1],
	    fails var_form([?f1|?tl1]),
	    fails var_form(?t3),
	    cases(succeeds var_form(?t3),
             [],
             succeeds member(?t3,?l),
             [],
             succeeds member([?f1|?tl1],?l) \/
             ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))],
           succeeds member(cl([?f1|?tl1],?q),?q2),
           [contra(?q2 = [],
	     [def succeeds member(cl([?f1|?tl1],?q),[]) by completion,
	      ff]),
	    cases(succeeds member(?c2,?p1),
             [],
             ?q2 = [],
             [],
             succeeds member(?c2,?p1)),
	    succeeds parent(cl([?f1|?tl1],?q),cl(?t4,?q2)) by sld,
	    succeeds parent_star(?c2,?c2) by sld,
	    succeeds parent_partition(?c2,?p1) by sld,
	    succeeds parent_partition(cl([?f2|?tl2],?q2),?p1),
	    succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p1) by sld,
	    succeeds member([?f1|?tl1],?l) \/
	    ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p1),
	    cases(succeeds member([?f1|?tl1],?l),
             [],
             ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p1),
             [succeeds equivalentL(?tl1,?tl2,?p4) by 
               lemma(sub_partition:equivalentL),
	      succeeds member([?f1|?tl1],?l) \/
	      ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4)],
             succeeds member([?f1|?tl1],?l) \/
             ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))],
           succeeds member([?f1|?tl1],?l) \/
           ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))],
         succeeds member([?f1|?tl1],?l) \/
         ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))])],
     succeeds member([?f1|?tl1],?l) \/
     ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))],
   succeeds member([?f1|?tl1],?l) \/
   ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4)),
  open(?p4,?l) by introduction(open,2)],
 open(?p4,?l))
).

:- definition_pred(common_child,2,
all [c1,c2]: common_child(?c1,?c2) <=>
 (ex [t1,t2,p1,p2,t,q1,q2]: ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) &
   succeeds member(cl(?t,?q1),?p1) & succeeds member(cl(?t,?q2),?p2))
).

:- lemma(parent_star:disjoint:1,
all [c1,c2,c3,c4,p]: succeeds parent_star(?c1,?c3) &
 succeeds parent_star(?c2,?c4) & succeeds partition(?p) &
 common_child(?c1,?c2) & succeeds member(?c3,?p) &
 succeeds member(?c4,?p) => ?c3 = ?c4,
assume(succeeds parent_star(?c1,?c3) & succeeds parent_star(?c2,?c4) &
 succeeds partition(?p) & common_child(?c1,?c2) & succeeds member(?c3,?p) &
 succeeds member(?c4,?p),
 [succeeds class(?c3) by lemma(partition:member),
  succeeds class(?c1) by lemma(parent_star:types),
  ex [t1,t2,p1,p2,t,q1,q2]: ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) &
   succeeds member(cl(?t,?q1),?p1) & succeeds member(cl(?t,?q2),?p2) by 
   elimination(common_child,2),
  exist([t1,t2,p1,p2,t,q1,q2],
   ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) & succeeds member(cl(?t,?q1),?p1) &
   succeeds member(cl(?t,?q2),?p2),
   [succeeds class_member(?t,cl(?t,?q1)) by sld,
    succeeds partition_member(?t,?p1) by 
     lemma(partition_member:member:class_member),
    succeeds class_member(?t,?c1),
    succeeds class_member(?t,?c3) by lemma(class_member:parent_star),
    succeeds class_member(?t,cl(?t,?q2)) by sld,
    succeeds partition_member(?t,?p2) by 
     lemma(partition_member:member:class_member),
    succeeds class_member(?t,?c2),
    succeeds class_member(?t,?c4) by lemma(class_member:parent_star),
    ?c3 = ?c4 by lemma(partition:disjoint)],
   ?c3 = ?c4)],
 ?c3 = ?c4)
).

:- lemma(parent_star:disjoint:2,
all [c1,c2]: succeeds parent_star(?c1,?c2) & common_child(?c1,?c2) &
 succeeds class(?c2) => ?c1 = ?c2,
assume(succeeds parent_star(?c1,?c2) & common_child(?c1,?c2) &
 succeeds class(?c2),
 [def succeeds parent_star(?c1,?c2) by completion,
  cases(?c2 = ?c1,
   [],
   ex c3: succeeds parent_star(?c1,?c3) & succeeds parent(?c3,?c2),
   exist(c3,
    succeeds parent_star(?c1,?c3) & succeeds parent(?c3,?c2),
    [def succeeds parent(?c3,?c2) by completion,
     exist([0,p],
      ?c2 = cl(?0,?p) & succeeds member(?c3,?p),
      [ex [t1,t2,p1,p2,t,q1,q2]: ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) &
	succeeds member(cl(?t,?q1),?p1) & succeeds member(cl(?t,?q2),?p2) by
	elimination(common_child,2),
       exist([t1,t2,p1,p2,t,q1,q2],
	?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) &
	succeeds member(cl(?t,?q1),?p1) & succeeds member(cl(?t,?q2),?p2),
	[succeeds class_member(?t,cl(?t,?q1)) by sld,
	 succeeds partition_member(?t,?p1) by 
          lemma(partition_member:member:class_member),
	 succeeds class_member(?t,?c3) by 
            lemma(class_member:parent_star),
	 succeeds class_member(?t,cl(?t,?q2)) by sld,
	 def succeeds class(cl(?0,?p)) by completion,
	 ?c3 = cl(?t,?q2) by lemma(partition:disjoint),
	 ?p2 = ?p,
	 succeeds partition(?p2),
	 succeeds class(cl(?t,?q2)) by lemma(partition:member),
	 succeeds parent_star(cl(?t1,?p1),cl(?t,?q2)),
	 def succeeds parent_star(cl(?t1,?p1),cl(?t,?q2)) by completion,
	 cases(?t1 = ?t & ?p1 = ?q2,
	  [],
	  ex c2: succeeds parent_star(cl(?t1,?p1),?c2) &
	   succeeds parent(?c2,cl(?t,?q2)),
	  exist(1,
	   succeeds parent_star(cl(?t1,?p1),?1) &
	   succeeds parent(?1,cl(?t,?q2)),
	   [succeeds class_member(?t,?1) by 
             lemma(class_member:parent_star),
	    def succeeds parent(?1,cl(?t,?q2)) by completion,
	    succeeds partition_member(?t,?q2) by 
             lemma(partition_member:member:class_member)],
	   succeeds partition_member(?t,?q2)),
	  succeeds partition_member(?t,?q2)),
	 def succeeds class(cl(?t,?q2)) by completion,ff],
	ff)],
      ff)],
    ?c1 = ?c2),
   ?c1 = ?c2)],
 ?c1 = ?c2)
).

:- lemma(common_child:symmetric,
all [c1,c2]: common_child(?c1,?c2) => common_child(?c2,?c1),
assume(common_child(?c1,?c2),
 [ex [t1,t2,p1,p2,t,q1,q2]: ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) &
   succeeds member(cl(?t,?q1),?p1) & succeeds member(cl(?t,?q2),?p2) by 
   elimination(common_child,2),
  exist([t1,t2,p1,p2,t,q1,q2],
   ?c1 = cl(?t1,?p1) & ?c2 = cl(?t2,?p2) & succeeds member(cl(?t,?q1),?p1) &
   succeeds member(cl(?t,?q2),?p2),
   common_child(?c2,?c1) by introduction(common_child,2),
   common_child(?c2,?c1))],
 common_child(?c2,?c1))
).

:- lemma(parent_star:disjoint:3,
all [c1,c2,c]: succeeds parent_star(?c1,?c) & succeeds class(?c) &
  succeeds parent_star(?c2,?c) & common_child(?c1,?c2) =>
  ?c1 = ?c2,
[induction(
  [all [c1,c]: succeeds parent_star(?c1,?c) => 
     (all c2: succeeds class(?c) & succeeds parent_star(?c2,?c) &
       common_child(?c1,?c2) => ?c1 = ?c2)],
  [step([c],
    [],
    assume(succeeds class(?c) & succeeds parent_star(?c2,?c) &
     common_child(?c,?c2),
     [common_child(?c2,?c) by lemma(common_child:symmetric),
      ?c2 = ?c by lemma(parent_star:disjoint:2)],
     ?c = ?c2),
    all c2: succeeds class(?c) & succeeds parent_star(?c2,?c) &
     common_child(?c,?c2) => ?c = ?c2),
   step([c1,c3,c2],
    [all c4: succeeds class(?c2) & succeeds parent_star(?c4,?c2) &
      common_child(?c1,?c4) => ?c1 = ?c4,
     succeeds parent_star(?c1,?c2),
     succeeds parent(?c2,?c3)],
    [assume(succeeds class(?c3) & succeeds parent_star(?c4,?c3) &
      common_child(?c1,?c4),
      [def succeeds parent_star(?c4,?c3) by completion,
       cases(?c3 = ?c4,
        [common_child(?c1,?c3),
	 ?c1 = ?c3 by lemma(parent_star:disjoint:2),
	 ?c1 = ?c4],
        ex c2: succeeds parent_star(?c4,?c2) & succeeds parent(?c2,?c3),
        exist(c5,
         succeeds parent_star(?c4,?c5) & succeeds parent(?c5,?c3),
         [def succeeds parent(?c2,?c3) by completion,
          exist([0,p],
           ?c3 = cl(?0,?p) & succeeds member(?c2,?p),
           [def succeeds class(cl(?0,?p)) by completion,
	    succeeds partition(?p),
	    def succeeds parent(?c5,?c3) by completion,
	    exist([1,2],
	     ?c3 = cl(?1,?2) & succeeds member(?c5,?2),
	     [succeeds member(?c5,?p),
	      ?c2 = ?c5 by lemma(parent_star:disjoint:1),
	      succeeds class(?c2) by lemma(partition:member),
	      ?c1 = ?c4],
	     ?c1 = ?c4)],
           ?c1 = ?c4)],
         ?c1 = ?c4),
        ?c1 = ?c4)],
      ?c1 = ?c4),
     all c4: succeeds class(?c3) & succeeds parent_star(?c4,?c3) &
      common_child(?c1,?c4) => ?c1 = ?c4],
    all c2: succeeds class(?c3) & succeeds parent_star(?c2,?c3) &
     common_child(?c1,?c2) => ?c1 = ?c2)]),
 assume(succeeds parent_star(?c1,?c) & succeeds class(?c) &
  succeeds parent_star(?c2,?c) & common_child(?c1,?c2),
  [all c2: succeeds class(?c) & succeeds parent_star(?c2,?c) &
    common_child(?c1,?c2) => ?c1 = ?c2,
   succeeds class(?c) & succeeds parent_star(?c2,?c) & 
   common_child(?c1,?c2) => ?c1 = ?c2,
   ?c1 = ?c2],
  ?c1 = ?c2)]
).

:- lemma(parent_partition:disjoint,
all [p,c1,c2,t]: succeeds partition(?p) & common_child(?c1,?c2) &
 succeeds parent_partition(?c1,?p) & succeeds parent_partition(?c2,?p) =>
  ?c1 = ?c2,
assume(succeeds partition(?p) & common_child(?c1,?c2) &
 succeeds parent_partition(?c1,?p) & succeeds parent_partition(?c2,?p),
 [def succeeds parent_partition(?c1,?p) by completion,
  exist(c3,
   succeeds member(?c3,?p) & succeeds parent_star(?c1,?c3),
   [def succeeds parent_partition(?c2,?p) by completion,
    exist(c4,
     succeeds member(?c4,?p) & succeeds parent_star(?c2,?c4),
     [?c3 = ?c4 by lemma(parent_star:disjoint:1),
      succeeds parent_star(?c2,?c3),
      succeeds class(?c3) by lemma(partition:member),
      ?c1 = ?c2 by lemma(parent_star:disjoint:3)],
     ?c1 = ?c2)],
   ?c1 = ?c2)],
 ?c1 = ?c2)
).

:- lemma(parent_terms:uniqueness,
all [t1,t2,t3,p]: succeeds partition(?p) &
 succeeds parent_terms(?t1,?t2,?p) &
 succeeds parent_terms(?t1,?t3,?p) => ?t2 = ?t3,
assume(succeeds partition(?p) & succeeds parent_terms(?t1,?t2,?p) &
 succeeds parent_terms(?t1,?t3,?p),
 [def succeeds parent_terms(?t1,?t2,?p) by completion,
  exist([q2,q1],
   succeeds parent_partition(cl(?t2,?q2),?p) & 
   succeeds member(cl(?t1,?q1),?q2),
   [def succeeds parent_terms(?t1,?t3,?p) by completion,
    exist([q3,0],
     succeeds parent_partition(cl(?t3,?q3),?p) &
     succeeds member(cl(?t1,?0),?q3),
     [cl(?t2,?q2) = cl(?t2,?q2),
      cl(?t3,?q3) = cl(?t3,?q3),
      common_child(cl(?t2,?q2),cl(?t3,?q3)) by introduction(common_child,2),
      cl(?t2,?q2) = cl(?t3,?q3) by lemma(parent_partition:disjoint),
      ?t2 = ?t3],
     ?t2 = ?t3)],
   ?t2 = ?t3)],
 ?t2 = ?t3)
).

:- lemma(find_delete:twice:parent_terms,
all [c1,c2,t1,t2,t4,q2,p1,p3,p4]: ?c2 = cl(?t4,?q2) &
 ?p4 = [cl(?t4,[?c1|?q2])|?p3] & succeeds parent_terms(?t1,?t2,?p1) &
 (all c: succeeds member(?c,?p1) =>
    succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2) =>
  succeeds parent_terms(?t1,?t2,?p4),
assume(?c2 = cl(?t4,?q2) & 
 ?p4 = [cl(?t4,[?c1|?q2])|?p3] & succeeds parent_terms(?t1,?t2,?p1) &
 (all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c1 \/
    ?c = ?c2),
 [def succeeds parent_terms(?t1,?t2,?p1) by completion,
  succeeds member(cl(?t4,[?c1|?q2]),?p4),
  exist([q,r1],
   succeeds parent_partition(cl(?t2,?q),?p1) &
   succeeds member(cl(?t1,?r1),?q),
   [def succeeds parent_partition(cl(?t2,?q),?p1) by completion,
    exist(c,
     succeeds member(?c,?p1) & succeeds parent_star(cl(?t2,?q),?c),
     [succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2,
      cases(
       [case(succeeds member(?c,?p3),
         [succeeds member(?c,[cl(?t4,[?c1|?q2])|?p3]) by sld,
	  succeeds member(?c,?p4),
	  succeeds parent_partition(cl(?t2,?q),?p4) by sld,
	  succeeds parent_terms(?t1,?t2,?p4) by sld]),
        case(?c = ?c1,
         [succeeds parent(?c1,cl(?t4,[?c1|?q2])),
	  succeeds parent_star(cl(?t2,?q),?c1),
	  succeeds parent_star(cl(?t2,?q),cl(?t4,[?c1|?q2])) by sld,
	  succeeds parent_partition(cl(?t2,?q),?p4) by sld,
	  succeeds parent_terms(?t1,?t2,?p4) by sld]),
        case(?c = ?c2,
         [def succeeds parent_star(cl(?t2,?q),cl(?t4,?q2)) by completion,
	  cases(?t2 = ?t4 & ?q = ?q2,
	   [succeeds member(cl(?t1,?r1),[?c1|?q2]),
	    succeeds parent_star(cl(?t4,[?c1|?q2]),cl(?t4,[?c1|?q2])) by sld,
	    succeeds parent_partition(cl(?t4,[?c1|?q2]),?p4) by sld,
	    succeeds parent_terms(?t1,?t4,?p4) by sld,
	    succeeds parent_terms(?t1,?t2,?p4)],
	   ex c2: succeeds parent_star(cl(?t2,?q),?c2) &
	    succeeds parent(?c2,cl(?t4,?q2)),
	   exist(c3,
	    succeeds parent_star(cl(?t2,?q),?c3) &
	    succeeds parent(?c3,cl(?t4,?q2)),
	    [def succeeds parent(?c3,cl(?t4,?q2)) by completion,
	     succeeds member(?c3,[?c1|?q2]) by sld,
	     succeeds parent(?c3,cl(?t4,[?c1|?q2])) by sld,
	     succeeds parent_star(cl(?t2,?q),cl(?t4,[?c1|?q2])) by sld,
	     succeeds parent_partition(cl(?t2,?q),?p4) by sld,
	     succeeds parent_terms(?t1,?t2,?p4) by sld],
	    succeeds parent_terms(?t1,?t2,?p4)),
	   succeeds parent_terms(?t1,?t2,?p4))])],
       succeeds parent_terms(?t1,?t2,?p4))],
     succeeds parent_terms(?t1,?t2,?p4))],
   succeeds parent_terms(?t1,?t2,?p4))],
 succeeds parent_terms(?t1,?t2,?p4))
).

:- lemma(union_find:union_findL:parent_terms,
(all [t1,t2,p1,p4]: succeeds union_find(?t1,?t2,?p1,?p4) =>
   (all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) =>
      succeeds parent_terms(?s1,?s2,?p4))) &
(all [tl1,tl2,p1,p3]: succeeds union_findL(?tl1,?tl2,?p1,?p3) =>
   (all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) =>
      succeeds parent_terms(?s1,?s2,?p3))),
induction(
 [all [t1,t2,p1,p4]: succeeds union_find(?t1,?t2,?p1,?p4) => 
    (all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
       succeeds parent_terms(?s1,?s2,?p4)),
  all [tl1,tl2,p1,p3]: succeeds union_findL(?tl1,?tl2,?p1,?p3) => 
    (all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
       succeeds parent_terms(?s1,?s2,?p3))],
 [step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    succeeds class_member(?t2,?c1),
    ?p4 = ?p1],
   assume(succeeds parent_terms(?s1,?s2,?p1),
    [],
    succeeds parent_terms(?s1,?s2,?p4)),
   all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
     succeeds parent_terms(?s1,?s2,?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    succeeds var_form(?t3),
    ?p4 = [cl(?t4,[?c1|?q2])|?p3]],
   assume(succeeds parent_terms(?s1,?s2,?p1),
    [all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c1 \/
       ?c = ?c2 by lemma(find_delete:twice:member),
     succeeds parent_terms(?s1,?s2,?p4) by 
      lemma(find_delete:twice:parent_terms)],
    succeeds parent_terms(?s1,?s2,?p4)),
   all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
     succeeds parent_terms(?s1,?s2,?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    succeeds var_form(?t4),
    ?p4 = [cl(?t3,[?c2|?q1])|?p3]],
   assume(succeeds parent_terms(?s1,?s2,?p1),
    [all c: succeeds member(?c,?p1) =>
       succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2
       by lemma(find_delete:twice:member),
     assume(succeeds member(?c,?p1),
      [succeeds member(?c,?p3) \/ ?c = ?c1 \/ ?c = ?c2,
       succeeds member(?c,?p3) \/ ?c = ?c2 \/ ?c = ?c1],
      succeeds member(?c,?p3) \/ ?c = ?c2 \/ ?c = ?c1),
     all c: succeeds member(?c,?p1) =>
       succeeds member(?c,?p3) \/ ?c = ?c2 \/ ?c = ?c1,
     succeeds parent_terms(?s1,?s2,?p4) by 
      lemma(find_delete:twice:parent_terms)],
    succeeds parent_terms(?s1,?s2,?p4)),
   all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
     succeeds parent_terms(?s1,?s2,?p4)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [all [s1,s2]: succeeds parent_terms(?s1,?s2,[cl(?t4,[?c1|?q2])|?p3]) => 
      succeeds parent_terms(?s1,?s2,?p4),
    succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    fails var_form(?t4),
    ?t3 = [?tag|?t1L],
    ?t4 = [?tag|?t2L],
    succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)],
   assume(succeeds parent_terms(?s1,?s2,?p1),
    [all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ ?c = ?c1 \/
       ?c = ?c2 by lemma(find_delete:twice:member),
     [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
     succeeds parent_terms(?s1,?s2,[cl(?t4,[?c1|?q2])|?p3]) by 
      lemma(find_delete:twice:parent_terms),
     succeeds parent_terms(?s1,?s2,?p4)],
    succeeds parent_terms(?s1,?s2,?p4)),
   all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
     succeeds parent_terms(?s1,?s2,?p4)),
  step([p],
   [],
   succeeds parent_terms(?s1,?s2,?p) => succeeds parent_terms(?s1,?s2,?p),
   all [s1,s2]: succeeds parent_terms(?s1,?s2,?p) => 
     succeeds parent_terms(?s1,?s2,?p)),
  step([t1,t1L,t2,t2L,p1,p3,p2],
   [all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
      succeeds parent_terms(?s1,?s2,?p2),
    all [s1,s2]: succeeds parent_terms(?s1,?s2,?p2) => 
      succeeds parent_terms(?s1,?s2,?p3),
    succeeds union_find(?t1,?t2,?p1,?p2),
    succeeds union_findL(?t1L,?t2L,?p2,?p3)],
   assume(succeeds parent_terms(?s1,?s2,?p1),
    [],
    succeeds parent_terms(?s1,?s2,?p3)),
   all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
     succeeds parent_terms(?s1,?s2,?p3))])
).

:- corollary(union_findL:parent_terms,
all [tl1,tl2,p1,p2,s1,s2]: succeeds termL(?tl1) &
 succeeds termL(?tl2) & succeeds partition(?p1) &
 succeeds union_findL(?tl1,?tl2,?p1,?p2) &
 succeeds parent_terms(?s1,?s2,?p1) =>
  succeeds parent_terms(?s1,?s2,?p2),
assume(succeeds termL(?tl1) & succeeds termL(?tl2) & 
 succeeds partition(?p1) & succeeds union_findL(?tl1,?tl2,?p1,?p2) &
 succeeds parent_terms(?s1,?s2,?p1),
 [all [s1,s2]: succeeds parent_terms(?s1,?s2,?p1) => 
    succeeds parent_terms(?s1,?s2,?p2) by 
   lemma(union_find:union_findL:parent_terms),
  succeeds parent_terms(?s1,?s2,?p2)],
 succeeds parent_terms(?s1,?s2,?p2))
).

:- lemma(union_find:union_findL:open,
(all [t1,t2,p1,p4]: succeeds union_find(?t1,?t2,?p1,?p4) =>
   (all l: open(?p1,?l) & succeeds partition(?p1) &
      succeeds term(?t1) & succeeds term(?t2) => open(?p4,?l))) &
(all [tl1,tl2,p1,p3]: succeeds union_findL(?tl1,?tl2,?p1,?p3) =>
   (all l: open(?p1,?l) & succeeds partition(?p1) &
      succeeds termL(?tl1) & succeeds termL(?tl2) => open(?p3,?l))),
induction(
 [all [t1,t2,p1,p4]: succeeds union_find(?t1,?t2,?p1,?p4) => 
    (all l: open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
      succeeds term(?t2) => open(?p4,?l)),
  all [tl1,tl2,p1,p3]: succeeds union_findL(?tl1,?tl2,?p1,?p3) => 
    (all l: open(?p1,?l) & succeeds partition(?p1) & succeeds termL(?tl1) &
      succeeds termL(?tl2) => open(?p3,?l))],
 [step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    succeeds class_member(?t2,?c1),
    ?p4 = ?p1],
   assume(open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2),
    [],
    open(?p4,?l)),
   all l: open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2) => open(?p4,?l)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    succeeds var_form(?t3),
    ?p4 = [cl(?t4,[?c1|?q2])|?p3]],
   assume(open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2),
    [sub_partition(?p1,?p4) by corollary(union_find:sub_partition),
     sub(?p3,?p1) by corollary(find_delete:twice:sub),
     succeeds partition(?p4) by corollary(union_find:types),
     succeeds member(?c1,?p1) \/ ?q1 = [] by lemma(find_delete:class),
     succeeds member(?c2,?p2) \/ ?q2 = [] by lemma(find_delete:class),
     cases(succeeds member(?c2,?p2),
      [sub(?p2,?p1) by lemma(find_delete:sub),
       all x: succeeds member(?x,?p2) => succeeds member(?x,?p1) by 
	elimination(sub,2),
       succeeds member(?c2,?p1)],
      ?q2 = [],
      [],
      succeeds member(?c2,?p1) \/ ?q2 = []),
     succeeds var_form(?t3) \/ succeeds member(?t3,?l),
     open(?p4,?l) by lemma(find_delete:twice:open)],
    open(?p4,?l)),
   all l: open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2) => open(?p4,?l)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    succeeds var_form(?t4),
    ?p4 = [cl(?t3,[?c2|?q1])|?p3]],
   assume(open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2),
    [sub_partition(?p1,?p4) by corollary(union_find:sub_partition),
     sub(?p3,?p1) by corollary(find_delete:twice:sub),
     succeeds partition(?p4) by corollary(union_find:types),
     succeeds member(?c1,?p1) \/ ?q1 = [] by lemma(find_delete:class),
     succeeds member(?c2,?p2) \/ ?q2 = [] by lemma(find_delete:class),
     cases(succeeds member(?c2,?p2),
      [sub(?p2,?p1) by lemma(find_delete:sub),
       all x: succeeds member(?x,?p2) => succeeds member(?x,?p1) by 
	elimination(sub,2),
       succeeds member(?c2,?p1)],
      ?q2 = [],
      [],
      succeeds member(?c2,?p1) \/ ?q2 = []),
     succeeds var_form(?t4) \/ succeeds member(?t4,?l),
     open(?p4,?l) by lemma(find_delete:twice:open)],
    open(?p4,?l)),
   all l: open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2) => open(?p4,?l)),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [all l: open([cl(?t4,[?c1|?q2])|?p3],?l) &
     succeeds partition([cl(?t4,[?c1|?q2])|?p3]) & succeeds termL(?t1L) &
     succeeds termL(?t2L) => open(?p4,?l),
    succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    fails var_form(?t4),
    ?t3 = [?tag|?t1L],
    ?t4 = [?tag|?t2L],
    succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)],
   assume(open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2),
    [succeeds termL(?t1L) & succeeds termL(?t2L) &
     succeeds partition([cl(?t4,[?c1|?q2])|?p3]) by 
      lemma(find_delete:twice:partition),
     open(?p1,[?t3|?l]) by lemma(open:cons),
     [cl(?t4,[?c1|?q2])|?p3] = [cl(?t4,[?c1|?q2])|?p3],
     all c: succeeds member(?c,?p1) => succeeds member(?c,?p3) \/ 
       ?c = ?c1 \/ ?c = ?c2 by lemma(find_delete:twice:member),
     sub_partition(?p1,[cl(?t4,[?c1|?q2])|?p3]) by 
      lemma(find_delete:sub_partition),
     sub(?p3,?p1) by corollary(find_delete:twice:sub),
     succeeds member(?c1,?p1) \/ ?q1 = [] by lemma(find_delete:class),
     succeeds member(?c2,?p2) \/ ?q2 = [] by lemma(find_delete:class),
     cases(succeeds member(?c2,?p2),
      [sub(?p2,?p1) by lemma(find_delete:sub),
       all x: succeeds member(?x,?p2) => succeeds member(?x,?p1) by 
	elimination(sub,2),
       succeeds member(?c2,?p1)],
      ?q2 = [],
      [],
      succeeds member(?c2,?p1) \/ ?q2 = []),
     succeeds member(?t3,[?t3|?l]) by sld,
     succeeds var_form(?t3) \/ succeeds member(?t3,[?t3|?l]),
     open([cl(?t4,[?c1|?q2])|?p3],[?t3|?l]) by 
      lemma(find_delete:twice:open),
     open(?p4,[?t3|?l]),
     succeeds equivalentL(?t1L,?t2L,?p4) by lemma(union_findL:equivalent),
     succeeds member(?c1,[?c1|?q2]) by sld,
     succeeds parent(?c1,cl(?t4,[?c1|?q2])) by sld,
     succeeds parent_star(cl(?t4,[?c1|?q2]),cl(?t4,[?c1|?q2])) by sld,
     succeeds member(cl(?t4,[?c1|?q2]),[cl(?t4,[?c1|?q2])|?p3]) by sld,
     succeeds parent_partition(cl(?t4,[?c1|?q2]),[cl(?t4,[?c1|?q2])|?p3])
      by sld,
     succeeds member(cl(?t3,?q1),[?c1|?q2]),
     succeeds parent_terms(?t3,?t4,[cl(?t4,[?c1|?q2])|?p3]) by sld,
     succeeds parent_terms(?t3,?t4,?p4) by 
      corollary(union_findL:parent_terms),
     all [f1,f2,tl1,tl2]: succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p4) =>
       succeeds member([?f1|?tl1],[?t3|?l]) \/
       ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4) by 
      elimination(open,2),
     assume(succeeds parent_terms([?f1|?tl1],[?f2|?tl2],?p4),
      [succeeds member([?f1|?tl1],[?t3|?l]) \/
       ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4),
       cases(succeeds member([?f1|?tl1],[?t3|?l]),
        [def succeeds member([?f1|?tl1],[?t3|?l]) by completion,
         cases(?t3 = [?f1|?tl1],
          [succeeds parent_terms(?t3,[?f2|?tl2],?p4),
	   succeeds partition(?p4) by corollary(union_find:types),
	   ?t4 = [?f2|?tl2] by lemma(parent_terms:uniqueness),
	   ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4)],
          succeeds member([?f1|?tl1],?l),
          [],
          succeeds member([?f1|?tl1],?l) \/
          ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))],
        ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4),
        [],
        succeeds member([?f1|?tl1],?l) \/
        ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4))],
      succeeds member([?f1|?tl1],?l) \/
      ?f1 = ?f2 & succeeds equivalentL(?tl1,?tl2,?p4)),
     open(?p4,?l) by introduction(open,2)],
    open(?p4,?l)),
   all l: open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
    succeeds term(?t2) => open(?p4,?l)),
  step([p],
   [],
   assume(open(?p,?l) & succeeds partition(?p) & succeeds termL([]) &
    succeeds termL([]),
    [],
    open(?p,?l)),
   all l: open(?p,?l) & succeeds partition(?p) & succeeds termL([]) &
    succeeds termL([]) => open(?p,?l)),
  step([t1,t1L,t2,t2L,p1,p3,p2],
   [all l: open(?p1,?l) & succeeds partition(?p1) & succeeds term(?t1) &
     succeeds term(?t2) => open(?p2,?l),
    all l: open(?p2,?l) & succeeds partition(?p2) & succeeds termL(?t1L) &
     succeeds termL(?t2L) => open(?p3,?l),
    succeeds union_find(?t1,?t2,?p1,?p2),
    succeeds union_findL(?t1L,?t2L,?p2,?p3)],
   assume(open(?p1,?l) & succeeds partition(?p1) &
    succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]),
    [def succeeds termL([?t1|?t1L]) by completion,
     def succeeds termL([?t2|?t2L]) by completion,
     succeeds partition(?p2) by corollary(union_find:types),
     open(?p3,?l)],
    open(?p3,?l)),
   all l: open(?p1,?l) & succeeds partition(?p1) &
    succeeds termL([?t1|?t1L]) & succeeds termL([?t2|?t2L]) => open(?p3,?l))])
).

:- theorem(unify_term_part:solved,
all [t1,t2,p]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_part(?t1,?t2,?p) =>
  succeeds solved(?p),
assume(succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_part(?t1,?t2,?p),
 [def succeeds unify_terms_part(?t1,?t2,?p) by completion,
  open([],[]) by lemma(open:nil),
  all l: open([],?l) & succeeds partition([]) & succeeds term(?t1) &
   succeeds term(?t2) => open(?p,?l) by 
   lemma(union_find:union_findL:open),
  open(?p,[]),
  succeeds partition(?p) by corollary(unify_terms_part:types),
  succeeds solved(?p) by lemma(open:solved)],
 succeeds solved(?p))
).

:- theorem(unify_terms_sub:unifier,
all [t1,t2,s]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_sub(?t1,?t2,?s) =>
  succeeds unifier(?t1,?t2,?s),
assume(succeeds term(?t1) & succeeds term(?t2) &
 succeeds unify_terms_sub(?t1,?t2,?s),
 [def succeeds unify_terms_sub(?t1,?t2,?s) by completion,
  exist(p,
   succeeds unify_terms_part(?t1,?t2,?p) &
   succeeds partition_sub(?p,?p,[],?s),
   [succeeds solved(?p) by theorem(unify_term_part:solved),
    succeeds partition(?p) by corollary(unify_terms_part:types),
    def succeeds unify_terms_part(?t1,?t2,?p) by completion,
    succeeds partition_solution(?p,?s) by theorem(partition_sub:solution),
    succeeds equivalent(?t1,?t2,?p) by 
     theorem(unify_term_part:equivalent),
    succeeds substitution(?s) by theorem(unify_terms_sub:types),
    ?t1 = ?t2 \/
    (ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
      succeeds class_member(?t2,?c)) by 
     lemma(equivalent:characterization:1),
    cases(?t1 = ?t2,
     [succeeds unifier(?t1,?t1,?s) by lemma(unifier:characterization:1),
      succeeds unifier(?t1,?t2,?s)],
     ex c: succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
      succeeds class_member(?t2,?c),
     exist(c,
      succeeds member(?c,?p) & succeeds class_member(?t1,?c) &
      succeeds class_member(?t2,?c),
      [succeeds class_solution(?c,?s) by lemma(partition_solution:member),
       succeeds class(?c) by lemma(partition:member),
       succeeds unifier(?t1,?t2,?s) by 
        lemma(class_solution:characterization:1)],
      succeeds unifier(?t1,?t2,?s)),
     succeeds unifier(?t1,?t2,?s))],
   succeeds unifier(?t1,?t2,?s))],
 succeeds unifier(?t1,?t2,?s))
).

:- theorem(unifiable_terms:characterization,
all [t1,t2]: succeeds term(?t1) & succeeds term(?t2) =>
  (succeeds unifiable_terms(?t1,?t2) <=>
   (ex s: succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s))),
assume(succeeds term(?t1) & succeeds term(?t2),
 [assume(succeeds unifiable_terms(?t1,?t2),
   [def succeeds unifiable_terms(?t1,?t2) by completion,
    exist(p,
     succeeds unify_terms_part(?t1,?t2,?p),
     [def succeeds unify_terms_part(?t1,?t2,?p) by completion,
      succeeds union_find(?t1,?t2,[],?p) & succeeds cycle_free(?p),
      succeeds partition(?p) by corollary(unify_terms_part:types),
      ex s: succeeds partition_sub(?p,?p,[],?s) by 
       theorem(partition_sub:success),
      exist(s,
       succeeds partition_sub(?p,?p,[],?s),
       [succeeds substitution(?s) by theorem(unify_terms_sub:types),
	succeeds unify_terms_sub(?t1,?t2,?s) by sld,
	succeeds unifier(?t1,?t2,?s) by theorem(unify_terms_sub:unifier),
	ex s: succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s)],
       ex s: succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s))],
     ex s: succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s))],
   ex s: succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s)),
  assume(ex s: succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s),
   exist(s,
    succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s),
    [ex p: succeeds unify_terms_part(?t1,?t2,?p) &
      succeeds partition_solution(?p,?s) by 
      theorem(unify_terms_part:success),
     exist(p,
      succeeds unify_terms_part(?t1,?t2,?p) &
      succeeds partition_solution(?p,?s),
      [],
      succeeds unifiable_terms(?t1,?t2))],
    succeeds unifiable_terms(?t1,?t2)),
   succeeds unifiable_terms(?t1,?t2))],
 succeeds unifiable_terms(?t1,?t2) <=>
 (ex s: succeeds substitution(?s) & succeeds unifier(?t1,?t2,?s)))
).

%-----------------------------------------------------------------------
% part12
%-----------------------------------------------------------------------

:- lemma(find_delete:uniqueness,
all [p,t,p1,p2,c1,c2]: succeeds find_delete(?p,?t,?p1,?c1) &
 succeeds find_delete(?p,?t,?p2,?c2) => ?p1 = ?p2 & ?c1 = ?c2,
induction(
 [all [p,t,p1,c1]: succeeds find_delete(?p,?t,?p1,?c1) => 
    (all [p2,c2]: succeeds find_delete(?p,?t,?p2,?c2) => ?p1 = ?p2 &
       ?c1 = ?c2)],
 [step([t],
   [],
   assume(succeeds find_delete([],?t,?p2,?c2),
    [def succeeds find_delete([],?t,?p2,?c2) by completion,
     [] = ?p2,
     cl(?t,[]) = ?c2],
    [] = ?p2 & cl(?t,[]) = ?c2),
   all [p2,c2]: succeeds find_delete([],?t,?p2,?c2) => [] = ?p2 &
     cl(?t,[]) = ?c2),
  step([c1,p1,t,p3,c2,p2],
   [succeeds class_member(?t,?c1),
    ?c2 = ?c1,
    ?p3 = ?p1],
   assume(succeeds find_delete([?c1|?p1],?t,?p2,?0),
    [def succeeds find_delete([?c1|?p1],?t,?p2,?0) by completion,
     exist(4,
      succeeds class_member(?t,?c1) & ?0 = ?c1 & ?p2 = ?p1 \/
      fails class_member(?t,?c1) & succeeds find_delete(?p1,?t,?4,?0) &
      ?p2 = [?c1|?4],
      cases(succeeds class_member(?t,?c1) & ?0 = ?c1 & ?p2 = ?p1,
       [],
       fails class_member(?t,?c1) & succeeds find_delete(?p1,?t,?4,?0) &
       ?p2 = [?c1|?4],
       [],
       ?p3 = ?p2 & ?c2 = ?0),
      ?p3 = ?p2 & ?c2 = ?0)],
    ?p3 = ?p2 & ?c2 = ?0),
   all [p2,0]: succeeds find_delete([?c1|?p1],?t,?p2,?0) => ?p3 = ?p2 &
     ?c2 = ?0),
  step([c1,p1,t,p3,c2,p2],
   [all [0,1]: succeeds find_delete(?p1,?t,?0,?1) => ?p2 = ?0 & ?c2 = ?1,
    fails class_member(?t,?c1),
    succeeds find_delete(?p1,?t,?p2,?c2),
    ?p3 = [?c1|?p2]],
   [assume(succeeds find_delete([?c1|?p1],?t,?1,?0),
     [def succeeds find_delete([?c1|?p1],?t,?1,?0) by completion,
      exist(2,
       succeeds class_member(?t,?c1) & ?0 = ?c1 & ?1 = ?p1 \/
       fails class_member(?t,?c1) & succeeds find_delete(?p1,?t,?2,?0) &
       ?1 = [?c1|?2],
       cases(succeeds class_member(?t,?c1) & ?0 = ?c1 & ?1 = ?p1,
	[],
	fails class_member(?t,?c1) & succeeds find_delete(?p1,?t,?2,?0) &
	?1 = [?c1|?2],
	[?p2 = ?2, ?p3 = ?1],
	?p3 = ?1 & ?c2 = ?0),
       ?p3 = ?1 & ?c2 = ?0)],
     ?p3 = ?1 & ?c2 = ?0),
    all [1,0]: succeeds find_delete([?c1|?p1],?t,?1,?0) => ?p3 = ?1 &
      ?c2 = ?0],
   all [p2,0]: succeeds find_delete([?c1|?p1],?t,?p2,?0) => ?p3 = ?p2 &
     ?c2 = ?0)])
).

:- lemma(union_find:union_findL:uniqueness,
(all [t1,t2,p1,p4,p5]: succeeds union_find(?t1,?t2,?p1,?p4) &
  succeeds union_find(?t1,?t2,?p1,?p5) => ?p4 = ?p5) &
(all [tl1,tl2,p1,p3,p4]: succeeds union_findL(?tl1,?tl2,?p1,?p3) &
  succeeds union_findL(?tl1,?tl2,?p1,?p4) => ?p3 = ?p4),
induction(
 [all [t1,t2,p1,p4]: succeeds union_find(?t1,?t2,?p1,?p4) => 
    (all p5: succeeds union_find(?t1,?t2,?p1,?p5) => ?p4 = ?p5),
  all [tl1,tl2,p1,p3]: succeeds union_findL(?tl1,?tl2,?p1,?p3) => 
    (all p4: succeeds union_findL(?tl1,?tl2,?p1,?p4) => ?p3 = ?p4)],
 [step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    succeeds class_member(?t2,?c1),
    ?p4 = ?p1],
   assume(succeeds union_find(?t1,?t2,?p1,?p5),
    [def succeeds union_find(?t1,?t2,?p1,?p5) by completion,
     exist([0,1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
      succeeds find_delete(?p1,?t1,?0,?1) &
      (succeeds class_member(?t2,?1) & ?p5 = ?p1 \/
       fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?p3,?c2) &
       ?1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
       (succeeds var_form(?t3) & ?p5 = [cl(?t4,[?1|?q2])|?p3] \/
        fails var_form(?t3) &
        (succeeds var_form(?t4) & ?p5 = [cl(?t3,[?c2|?q1])|?p3] \/
         fails var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
         succeeds union_findL(?t1L,?t2L,[cl(?t4,[?1|?q2])|?p3],?p5)))),
      [?c1 = ?1 by lemma(find_delete:uniqueness),
       cases(succeeds class_member(?t2,?1) & ?p5 = ?p1,
        [],
        fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?p3,?c2) &
        ?1 = cl(?t3,?q1) & ?c2 = cl(?t4,?q2) &
        (succeeds var_form(?t3) & ?p5 = [cl(?t4,[?1|?q2])|?p3] \/
         fails var_form(?t3) &
         (succeeds var_form(?t4) & ?p5 = [cl(?t3,[?c2|?q1])|?p3] \/
          fails var_form(?t4) & ?t3 = [?tag|?t1L] & ?t4 = [?tag|?t2L] &
          succeeds union_findL(?t1L,?t2L,[cl(?t4,[?1|?q2])|?p3],?p5))),
        [fails class_member(?t2,?c1),
	 ff],
        ?p4 = ?p5)],
      ?p4 = ?p5)],
    ?p4 = ?p5),
   all p5: succeeds union_find(?t1,?t2,?p1,?p5) => ?p4 = ?p5),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    succeeds var_form(?t3),
    ?p4 = [cl(?t4,[?c1|?q2])|?p3]],
   assume(succeeds union_find(?t1,?t2,?p1,?p5),
    [def succeeds union_find(?t1,?t2,?p1,?p5) by completion,
     exist([0,1,2,3,4,5,6,7,tag,t1L,t2L],
      succeeds find_delete(?p1,?t1,?0,?1) &
      (succeeds class_member(?t2,?1) & ?p5 = ?p1 \/
       fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?2,?3) &
       ?1 = cl(?4,?5) & ?3 = cl(?6,?7) &
       (succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2] \/
        fails var_form(?4) &
        (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
         fails var_form(?6) & ?4 = [?tag|?t1L] & ?6 = [?tag|?t2L] &
         succeeds union_findL(?t1L,?t2L,[cl(?6,[?1|?7])|?2],?p5)))),
      [?p2 = ?0 & ?c1 = ?1 by lemma(find_delete:uniqueness),
       cases(succeeds class_member(?t2,?1) & ?p5 = ?p1,
        [succeeds class_member(?t2,?c1),
	 ff],
        fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?2,?3) &
        ?1 = cl(?4,?5) & ?3 = cl(?6,?7) &
        (succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2] \/
         fails var_form(?4) &
         (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
          fails var_form(?6) & ?4 = [?tag|?t1L] & ?6 = [?tag|?t2L] &
          succeeds union_findL(?t1L,?t2L,[cl(?6,[?1|?7])|?2],?p5))),
        [succeeds find_delete(?p2,?t2,?2,?3),
	 ?p3 = ?2 & ?c2 = ?3 by lemma(find_delete:uniqueness),
	 cases(succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2],
          [],
          fails var_form(?4) &
          (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
           fails var_form(?6) & ?4 = [?tag|?t1L] & ?6 = [?tag|?t2L] &
           succeeds union_findL(?t1L,?t2L,[cl(?6,[?1|?7])|?2],?p5)),
          [?c1 = cl(?4,?5),
	   fails var_form(?t3),
	   ff],
          ?p4 = ?p5)],
        ?p4 = ?p5)],
      ?p4 = ?p5)],
    ?p4 = ?p5),
   all p5: succeeds union_find(?t1,?t2,?p1,?p5) => ?p4 = ?p5),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    succeeds var_form(?t4),
    ?p4 = [cl(?t3,[?c2|?q1])|?p3]],
   assume(succeeds union_find(?t1,?t2,?p1,?p5),
    [def succeeds union_find(?t1,?t2,?p1,?p5) by completion,
     exist([0,1,2,3,4,5,6,7,tag,t1L,t2L],
      succeeds find_delete(?p1,?t1,?0,?1) &
      (succeeds class_member(?t2,?1) & ?p5 = ?p1 \/
       fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?2,?3) &
       ?1 = cl(?4,?5) & ?3 = cl(?6,?7) &
       (succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2] \/
        fails var_form(?4) &
        (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
         fails var_form(?6) & ?4 = [?tag|?t1L] & ?6 = [?tag|?t2L] &
         succeeds union_findL(?t1L,?t2L,[cl(?6,[?1|?7])|?2],?p5)))),
      [?p2 = ?0 & ?c1 = ?1 by lemma(find_delete:uniqueness),
       cases(succeeds class_member(?t2,?1) & ?p5 = ?p1,
        [succeeds class_member(?t2,?c1),
	 ff],
        fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?2,?3) &
        ?1 = cl(?4,?5) & ?3 = cl(?6,?7) &
        (succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2] \/
         fails var_form(?4) &
         (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
          fails var_form(?6) & ?4 = [?tag|?t1L] & ?6 = [?tag|?t2L] &
          succeeds union_findL(?t1L,?t2L,[cl(?6,[?1|?7])|?2],?p5))),
        [succeeds find_delete(?p2,?t2,?2,?3),
	 ?p3 = ?2 & ?c2 = ?3 by lemma(find_delete:uniqueness),
	 ?c1 = cl(?4,?5) & ?c2 = cl(?6,?7),
	 cases(succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2],
          [succeeds var_form(?t3),
	   ff],
          fails var_form(?4) &
          (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
           fails var_form(?6) & ?4 = [?tag|?t1L] & ?6 = [?tag|?t2L] &
           succeeds union_findL(?t1L,?t2L,[cl(?6,[?1|?7])|?2],?p5)),
          cases(succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2],
           [],
           fails var_form(?6) & ?4 = [?tag|?t1L] & ?6 = [?tag|?t2L] &
           succeeds union_findL(?t1L,?t2L,[cl(?6,[?1|?7])|?2],?p5),
           [fails var_form(?t4),
	    ff],
           ?p4 = ?p5),
          ?p4 = ?p5)],
        ?p4 = ?p5)],
      ?p4 = ?p5)],
    ?p4 = ?p5),
   all p5: succeeds union_find(?t1,?t2,?p1,?p5) => ?p4 = ?p5),
  step([t1,t2,p1,p4,p2,c1,p3,c2,t3,q1,t4,q2,tag,t1L,t2L],
   [all 0: succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?0) => 
      ?p4 = ?0,
    succeeds find_delete(?p1,?t1,?p2,?c1),
    fails class_member(?t2,?c1),
    succeeds find_delete(?p2,?t2,?p3,?c2),
    ?c1 = cl(?t3,?q1),
    ?c2 = cl(?t4,?q2),
    fails var_form(?t3),
    fails var_form(?t4),
    ?t3 = [?tag|?t1L],
    ?t4 = [?tag|?t2L],
    succeeds union_findL(?t1L,?t2L,[cl(?t4,[?c1|?q2])|?p3],?p4)],
   assume(succeeds union_find(?t1,?t2,?p1,?p5),
    [def succeeds union_find(?t1,?t2,?p1,?p5) by completion,
     exist([0,1,2,3,4,5,6,7,8,9,10],
      succeeds find_delete(?p1,?t1,?0,?1) &
      (succeeds class_member(?t2,?1) & ?p5 = ?p1 \/
       fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?2,?3) &
       ?1 = cl(?4,?5) & ?3 = cl(?6,?7) &
       (succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2] \/
        fails var_form(?4) &
        (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
         fails var_form(?6) & ?4 = [?8|?9] & ?6 = [?8|?10] &
         succeeds union_findL(?9,?10,[cl(?6,[?1|?7])|?2],?p5)))),
      [?p2 = ?0 & ?c1 = ?1 by lemma(find_delete:uniqueness),
       cases(succeeds class_member(?t2,?1) & ?p5 = ?p1,
        [succeeds class_member(?t2,?c1),
	 ff],
        fails class_member(?t2,?1) & succeeds find_delete(?0,?t2,?2,?3) &
        ?1 = cl(?4,?5) & ?3 = cl(?6,?7) &
        (succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2] \/
         fails var_form(?4) &
         (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
          fails var_form(?6) & ?4 = [?8|?9] & ?6 = [?8|?10] &
          succeeds union_findL(?9,?10,[cl(?6,[?1|?7])|?2],?p5))),
        [succeeds find_delete(?p2,?t2,?2,?3),
	 ?p3 = ?2 & ?c2 = ?3 by lemma(find_delete:uniqueness),
	 cases(succeeds var_form(?4) & ?p5 = [cl(?6,[?1|?7])|?2],
          [succeeds var_form(?t3),
	   ff],
          fails var_form(?4) &
          (succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2] \/
           fails var_form(?6) & ?4 = [?8|?9] & ?6 = [?8|?10] &
           succeeds union_findL(?9,?10,[cl(?6,[?1|?7])|?2],?p5)),
          cases(succeeds var_form(?6) & ?p5 = [cl(?4,[?3|?5])|?2],
           [succeeds var_form(?t4),
	    ff],
           fails var_form(?6) & ?4 = [?8|?9] & ?6 = [?8|?10] &
           succeeds union_findL(?9,?10,[cl(?6,[?1|?7])|?2],?p5),
           [],
           ?p4 = ?p5),
          ?p4 = ?p5)],
        ?p4 = ?p5)],
      ?p4 = ?p5)],
    ?p4 = ?p5),
   all p5: succeeds union_find(?t1,?t2,?p1,?p5) => ?p4 = ?p5),
  step([p],
   [],
   assume(succeeds union_findL([],[],?p,?p4),
    [def succeeds union_findL([],[],?p,?p4) by completion,?p = ?p4],
    ?p = ?p4),
   all p4: succeeds union_findL([],[],?p,?p4) => ?p = ?p4),
  step([t1,t1L,t2,t2L,p1,p3,p2],
   [all p5: succeeds union_find(?t1,?t2,?p1,?p5) => ?p2 = ?p5,
    all p4: succeeds union_findL(?t1L,?t2L,?p2,?p4) => ?p3 = ?p4,
    succeeds union_find(?t1,?t2,?p1,?p2),
    succeeds union_findL(?t1L,?t2L,?p2,?p3)],
   assume(succeeds union_findL([?t1|?t1L],[?t2|?t2L],?p1,?p4),
    [def succeeds union_findL([?t1|?t1L],[?t2|?t2L],?p1,?p4) by completion,
     exist(0,
      succeeds union_find(?t1,?t2,?p1,?0) &
      succeeds union_findL(?t1L,?t2L,?0,?p4),
      [?p2 = ?0,
       succeeds union_findL(?t1L,?t2L,?p2,?p4),
       ?p3 = ?p4],
      ?p3 = ?p4)],
    ?p3 = ?p4),
   all p4: succeeds union_findL([?t1|?t1L],[?t2|?t2L],?p1,?p4) => ?p3 = ?p4)])
).

:- theorem(unify_terms_part:uniqueness,
all [t1,t2,p1,p2]: succeeds unify_terms_part(?t1,?t2,?p1) &
 succeeds unify_terms_part(?t1,?t2,?p2) => ?p1 = ?p2,
assume(succeeds unify_terms_part(?t1,?t2,?p1) &
 succeeds unify_terms_part(?t1,?t2,?p2),
 [def succeeds unify_terms_part(?t1,?t2,?p1) by completion,
  def succeeds unify_terms_part(?t1,?t2,?p2) by completion,
  ?p1 = ?p2 by lemma(union_find:union_findL:uniqueness)],
 ?p1 = ?p2)
).

:- lemma(partition_sub:class_sub:uniqueness,
(all [p1,p2,s1,s2,s3]: succeeds partition_sub(?p1,?p2,?s1,?s2) &
  succeeds partition_sub(?p1,?p2,?s1,?s3) => ?s2 = ?s3) &
(all [c,p,s1,s2,s3]: succeeds class_sub(?c,?p,?s1,?s2) &
  succeeds class_sub(?c,?p,?s1,?s3) => ?s2 = ?s3),
induction(
 [all [p1,p2,s1,s2]: succeeds partition_sub(?p1,?p2,?s1,?s2) => 
    (all s3: succeeds partition_sub(?p1,?p2,?s1,?s3) => ?s2 = ?s3),
  all [c,p,s1,s2]: succeeds class_sub(?c,?p,?s1,?s2) => 
    (all s3: succeeds class_sub(?c,?p,?s1,?s3) => ?s2 = ?s3)],
 [step([0,s],
   [],
   assume(succeeds partition_sub([],?0,?s,?s3),
    [def succeeds partition_sub([],?0,?s,?s3) by completion,?s = ?s3],
    ?s = ?s3),
   all s3: succeeds partition_sub([],?0,?s,?s3) => ?s = ?s3),
  step([c,p1,p2,s1,s3,s2],
   [all s3: succeeds class_sub(?c,?p2,?s1,?s3) => ?s2 = ?s3,
    all 0: succeeds partition_sub(?p1,?p2,?s2,?0) => ?s3 = ?0,
    succeeds class_sub(?c,?p2,?s1,?s2),
    succeeds partition_sub(?p1,?p2,?s2,?s3)],
   assume(succeeds partition_sub([?c|?p1],?p2,?s1,?0),
    [def succeeds partition_sub([?c|?p1],?p2,?s1,?0) by completion,
     exist(1,
      succeeds class_sub(?c,?p2,?s1,?1) &
      succeeds partition_sub(?p1,?p2,?1,?0),
      [?s2 = ?1,
       ?s3 = ?0],
      ?s3 = ?0)],
    ?s3 = ?0),
   all 0: succeeds partition_sub([?c|?p1],?p2,?s1,?0) => ?s3 = ?0),
  step([x,p1,p2,s1,s2,t],
   [all s3: succeeds partition_sub(?p1,?p2,[bind(?x,?t)|?s1],?s3) => 
      ?s2 = ?s3,
    succeeds partition_term($(?x),?p2,?t),
    succeeds partition_sub(?p1,?p2,[bind(?x,?t)|?s1],?s2)],
   assume(succeeds class_sub(cl($(?x),?p1),?p2,?s1,?s3),
    [def succeeds class_sub(cl($(?x),?p1),?p2,?s1,?s3) by completion,
     exist(0,
      succeeds partition_term($(?x),?p2,?0) &
      succeeds partition_sub(?p1,?p2,[bind(?x,?0)|?s1],?s3),
      [?t = ?0 by corollary(partition_term:uniqueness),
       succeeds partition_sub(?p1,?p2,[bind(?x,?t)|?s1],?s3),
       ?s2 = ?s3],
      ?s2 = ?s3)],
    ?s2 = ?s3),
   all s3: succeeds class_sub(cl($(?x),?p1),?p2,?s1,?s3) => ?s2 = ?s3),
  step([0,1,p1,p2,s1,s2],
   [all s3: succeeds partition_sub(?p1,?p2,?s1,?s3) => ?s2 = ?s3,
    succeeds partition_sub(?p1,?p2,?s1,?s2)],
   assume(succeeds class_sub(cl([?0|?1],?p1),?p2,?s1,?s3),
    [def succeeds class_sub(cl([?0|?1],?p1),?p2,?s1,?s3) by completion,
     ?s2 = ?s3],
    ?s2 = ?s3),
   all s3: succeeds class_sub(cl([?0|?1],?p1),?p2,?s1,?s3) => ?s2 = ?s3)])
).

:- theorem(unify_terms_sub:uniqueness,
all [t1,t2,s1,s2]: succeeds unify_terms_sub(?t1,?t2,?s1) &
 succeeds unify_terms_sub(?t1,?t2,?s2) => ?s1 = ?s2,
assume(succeeds unify_terms_sub(?t1,?t2,?s1) &
 succeeds unify_terms_sub(?t1,?t2,?s2),
 [def succeeds unify_terms_sub(?t1,?t2,?s1) by completion,
  exist(p,
   succeeds unify_terms_part(?t1,?t2,?p) &
   succeeds partition_sub(?p,?p,[],?s1),
   [def succeeds unify_terms_sub(?t1,?t2,?s2) by completion,
    exist(p1,
     succeeds unify_terms_part(?t1,?t2,?p1) &
     succeeds partition_sub(?p1,?p1,[],?s2),
     [?p = ?p1 by theorem(unify_terms_part:uniqueness),
      succeeds partition_sub(?p,?p,[],?s2),
      ?s1 = ?s2 by lemma(partition_sub:class_sub:uniqueness)],
     ?s1 = ?s2)],
   ?s1 = ?s2)],
 ?s1 = ?s2)
).

:- theorem(unify_terms_sub:most:general,
all [t1,t2,s1,s2]: succeeds term(?t1) & succeeds term(?t2) &
 succeeds substitution(?s2) & succeeds unifier(?t1,?t2,?s2) &
 succeeds unify_terms_sub(?t1,?t2,?s1) =>
  composition(?s1,?s2,?s2),
assume(succeeds term(?t1) & succeeds term(?t2) & succeeds substitution(?s2) &
 succeeds unifier(?t1,?t2,?s2) & succeeds unify_terms_sub(?t1,?t2,?s1),
 [ex s1: succeeds unify_terms_sub(?t1,?t2,?s1) & composition(?s1,?s2,?s2) by
   theorem(unify_terms_sub:existence),
  exist(s3,
   succeeds unify_terms_sub(?t1,?t2,?s3) & composition(?s3,?s2,?s2),
   [?s1 = ?s3 by theorem(unify_terms_sub:uniqueness),
    composition(?s1,?s2,?s2)],
   composition(?s1,?s2,?s2))],
 composition(?s1,?s2,?s2))
).

:- bye(mgu).
